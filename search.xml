<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/kai-yuan-cang-ku-tui-jian/"/>
      <url>/kai-yuan-cang-ku-tui-jian/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">仓库地址</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="mailto:git@github.com">git@github.com</a>:langchain-ai/langchain.git</td><td style="text-align:left">LangChain 是一个用于构建和运行语言模型应用程序的框架。它提供了丰富的工具和库，帮助开发者快速开发和部署各种语言模型应用。</td></tr><tr><td style="text-align:left"><a href="mailto:git@github.com">git@github.com</a>:SciPhi-AI/R2R.git</td><td style="text-align:left">提供开源的 RAG 集成系统，支持多模态处理、混合搜索、知识图谱构建等增强检索技术的功能</td></tr><tr><td style="text-align:left"><a href="mailto:git@github.com">git@github.com</a>:infiniflow/ragflow.git</td><td style="text-align:left">rag数据处理方案</td></tr><tr><td style="text-align:left"><a href="mailto:git@github.com">git@github.com</a>:aperture-data/aperturedb-python.git</td><td style="text-align:left">多模态数据存储解决方案</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/webrtc/"/>
      <url>/webrtc/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图">架构图</h2><img src="/webrtc/Architecture.png" class="" title="Architecture"><h2 id="不同多人会话服务器方案">不同多人会话服务器方案</h2><table><thead><tr><th style="text-align:center">方案名称</th><th style="text-align:left">方案评价</th><th style="text-align:center">实现难度</th></tr></thead><tbody><tr><td style="text-align:center">P2P/Mesh</td><td style="text-align:left">点对点的方案, 客户端分发流，性能较差</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">SFU</td><td style="text-align:left">服务端分发流方案， 技术难度较高，涉及到服务器分发和内网穿透一系列问题</td><td style="text-align:center">高</td></tr><tr><td style="text-align:center">MCU</td><td style="text-align:left">服务端合并流方案，技术难度最高，涉及到服务器合并流</td><td style="text-align:center">很高</td></tr></tbody></table><img src="/webrtc/webrtc-server.png" class="" title="不同多人会话服务器方案"><h2 id="WebRTC时序图">WebRTC时序图</h2><img src="/webrtc/Sequence-Diagram.png" class="" title="时序图"><h2 id="参考链接">参考链接</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia">WebRTC解释</a><br><a href="https://webrtc.github.io/webrtc-org/architecture/">WebRTC管网</a><br><a href="https://millo-l.github.io/WebRTC-implementation-method-Mesh-SFU-MCU/">WebRTC 实现方法</a><br><a href="https://www.scaledrone.com/blog/webrtc-tutorial-simple-video-chat/">WebRTC Tutorial: Simple video chat</a><br><a href="https://webrtc.org.cn/tutorial-simple-video-chat/">用WebRTC做一个简单的视频通话</a><br><a href="https://juejin.cn/post/6896045087659130894">从0到1打造一个 WebRTC 应用</a><br><a href="https://juejin.cn/post/6844903798750576647">【从头到脚】撸一个多人视频聊天 — 前端 WebRTC 实战（一）</a><br><a href="https://segmentfault.com/a/1190000020780854">50行代码完成视频通话 (WebRTC + WebSocket)</a></p>]]></content>
      
      
      <categories>
          
          <category> 03-Computer-Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RAG架构选型</title>
      <link href="/rag-jia-gou-xuan-xing/"/>
      <url>/rag-jia-gou-xuan-xing/</url>
      
        <content type="html"><![CDATA[<img src="/rag-jia-gou-xuan-xing/RAG%E7%AE%80%E5%8D%95%E6%9E%B6%E6%9E%84.png" class="" title="RAG简单架构.png"><h2 id="背景">背景</h2><p>检索增强生成（Retrieval Augmented Generation），简称 RAG 主要用于解决 知识的局限性、幻觉问题、数据安全性等问题的。<br>简单来讲，RAG就是通过检索获取相关的知识并将其融入Prompt，让大模型能够参考相应的知识从而给出合理回答。</p><p>完整的RAG应用流程主要包含两个阶段：</p><p>数据准备阶段：数据提取——&gt;文本分割——&gt;向量化（embedding）——&gt;数据入库<br>应用阶段：用户提问——&gt;数据检索（召回）——&gt;注入Prompt——&gt;LLM生成答案</p><h2 id="技术框架">技术框架</h2><ul><li><p><a href="https://python.langchain.com/docs/introduction/">langchain</a></p></li><li><p><a href="https://docs.langchain.com.cn/docs/introduction/">langchain中文网</a></p></li></ul><h2 id="RAG架构选型">RAG架构选型</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/16138803604">https://zhuanlan.zhihu.com/p/16138803604</a></li></ul><table><thead><tr><th style="text-align:center">模型名称</th><th style="text-align:center">项目仓库</th></tr></thead><tbody><tr><td style="text-align:center">Haystack</td><td style="text-align:center"><a href="http://github.com">github.com</a>:deepset-ai/haystack</td></tr><tr><td style="text-align:center">MaxKB</td><td style="text-align:center">github.com:1Panel-dev/MaxKB</td></tr><tr><td style="text-align:center">RAGFlow</td><td style="text-align:center"><a href="http://github.com">github.com</a>:infiniflow/ragflow</td></tr><tr><td style="text-align:center">Txtai</td><td style="text-align:center"><a href="http://github.com">github.com</a>:neuml/txtai</td></tr><tr><td style="text-align:center">STORM</td><td style="text-align:center"><a href="http://github.com">github.com</a>:stanford-oval/storm</td></tr><tr><td style="text-align:center">LLM-App</td><td style="text-align:center"><a href="http://github.com">github.com</a>:pathwaycom/llm-app</td></tr><tr><td style="text-align:center">Cognita</td><td style="text-align:center"><a href="http://github.com">github.com</a>:truefoundry/cognita</td></tr><tr><td style="text-align:center">R2R（Retrieval-to-Retrieval）</td><td style="text-align:center"><a href="mailto:git@github.com">git@github.com</a>:SciPhi-AI/R2R.git</td></tr><tr><td style="text-align:center">Neurite</td><td style="text-align:center"><a href="http://github.com">github.com</a>:satellitecomponent/Neurite</td></tr><tr><td style="text-align:center">FlashRAG</td><td style="text-align:center"><a href="http://github.com">github.com</a>:RUC-NLPIR/FlashRAG</td></tr><tr><td style="text-align:center">Canopy</td><td style="text-align:center"><a href="http://github.com">github.com</a>:pinecone-io/canopy</td></tr><tr><td style="text-align:center">langchain4j-aideepin</td><td style="text-align:center"><a href="http://github.com">github.com</a>:moyangzhanlangchain4j-aideepin</td></tr><tr><td style="text-align:center">jai-workflow</td><td style="text-align:center"><a href="http://github.com">github.com</a>:czelabueno/jai-workflow</td></tr><tr><td style="text-align:center">OpenManus</td><td style="text-align:center"><a href="http://github.com">github.com</a>:mannaandpoem/OpenManus</td></tr><tr><td style="text-align:center">Dify</td><td style="text-align:center"><a href="https://docs.dify.ai/zh-hans/guides/knowledge-base/external-knowledge-api-documentation">https://docs.dify.ai/zh-hans/guides/knowledge-base/external-knowledge-api-documentation</a></td></tr></tbody></table><h2 id="参考链接">参考链接</h2><ul><li><p><a href="https://juejin.cn/post/7442301465249382419">RAG框架总结主流框架</a></p></li><li><p><a href="https://github.com/browser-use/browser-use">浏览器助手</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/F0JF-P2b8hT8Pjyer08gpg">多智能体架构</a></p></li><li><p><a href="https://ai-bot.cn/ktransformers/">KTransformers: 大语言模型推理优化框架</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 08-LLMs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
            <tag> RAG架构选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepseek商业化部署</title>
      <link href="/deepseek-shang-ye-hua-bu-shu/"/>
      <url>/deepseek-shang-ye-hua-bu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="参数模型显卡要求">参数模型显卡要求</h2><p>模型运行参数要求</p><img src="/deepseek-shang-ye-hua-bu-shu/GPU.png" class="" title="GPU.png"><ul><li><a href="https://ollama.com/library/deepseek-r1">deepseek模型下载</a></li></ul><h3 id="模型尺寸选择">模型尺寸选择</h3><p>不同尺寸的模型区别主要体现在参数规模、模型容量、性能表现、准确性、训练成本、推理成本和不同使用场景</p><table><thead><tr><th>DeepSeek模型版本</th><th>参数量</th><th>特点</th><th>适用场景</th><th>硬件配置</th></tr></thead><tbody><tr><td>DeepSeek-R1-1.5B</td><td>1.5B</td><td>轻量级模型，参数量少，模型规模小</td><td>适用于轻量级任务，如短文本生成、基础问答等</td><td>4核处理器、8G内存，无需显卡</td></tr><tr><td>DeepSeek-R1-7B</td><td>7B</td><td>平衡型模型，性能较好，硬件需求适中</td><td>适合中等复杂度任务，如文案撰写、表格处理、统计分析等</td><td>8核处理器、16G内存，Ryzen7或更高，RTX 3060（12GB）或更高</td></tr><tr><td>DeepSeek-R1-8B</td><td>8B</td><td>性能略强于7B模型，适合更高精度需求</td><td>适合需要更高精度的轻量级任务，比如代码生成、逻辑推理等</td><td>8核处理器、16G内存，Ryzen7或更高，RTX 3060（12GB）或4060</td></tr><tr><td>DeepSeek-R1-14B</td><td>14B</td><td>高性能模型，擅长复杂的任务，如数学推理、代码生成</td><td>可处理复杂任务，如长文本生成、数据分析等</td><td>i9-13900K或更高、32G内存，RTX 4090（24GB）或A5000</td></tr><tr><td>DeepSeek-R1-32B</td><td>32B</td><td>专业级模型，性能强大，适合高精度任务</td><td>适合超大规模任务，如语言建模、大规模训练、金融预测等</td><td>Xeon 8核、128GB内存或更高，2-4张A100（80GB）或更高</td></tr><tr><td>DeepSeek-R1-70B</td><td>70B</td><td>顶级模型，性能最强，适合大规模计算和高复杂任务</td><td>适合高精度专业领域任务，比如多模态任务预处理。这些任务对硬件要求非常高，需要高端的 CPU 和显卡，适合预算充足的企业或研究机构使用</td><td>Xeon 8核、128GB内存或更高，8张A100/H100（80GB）或更高</td></tr><tr><td>DeepSeek-R1-671B</td><td>671B</td><td>超大规模模型，性能卓越，推理速度快，适合极高精度需求</td><td>适合国家级 / 超大规模 AI 研究，如气候建模、基因组分析等，以及通用人工智能探索</td><td>64核、512GB或更高，8张A100/H100</td></tr></tbody></table><h2 id="部署推荐">部署推荐</h2><h2 id="大模型训练场景">大模型训练场景</h2><table><thead><tr><th style="text-align:center">模型训练场景</th><th style="text-align:center">总体要求</th><th style="text-align:center">所需数据量</th><th style="text-align:center">质量要求</th></tr></thead><tbody><tr><td style="text-align:center">预训练</td><td style="text-align:center">超高</td><td style="text-align:center">不低于2T</td><td style="text-align:center">通用领域数据</td></tr><tr><td style="text-align:center">持续训练</td><td style="text-align:center">高</td><td style="text-align:center">数十到数百B级别</td><td style="text-align:center">通用领域数据</td></tr><tr><td style="text-align:center">微调</td><td style="text-align:center">中</td><td style="text-align:center">数十万到数千万</td><td style="text-align:center">高质量垂直行业专业知识</td></tr><tr><td style="text-align:center">数据库外挂</td><td style="text-align:center">中</td><td style="text-align:center">按需</td><td style="text-align:center">行业专业知识、规范化格式</td></tr><tr><td style="text-align:center">提示词工程</td><td style="text-align:center">低</td><td style="text-align:center">按需</td><td style="text-align:center">提示样例数据</td></tr></tbody></table><h2 id="数据集下载">数据集下载</h2><h3 id="一、通用数据平台">一、通用数据平台</h3><h4 id="1-Kaggle">1. <strong>Kaggle</strong></h4><ul><li><p><strong>网址</strong>: <a href="https://www.kaggle.com/datasets">https://www.kaggle.com/datasets</a></p></li><li><p><strong>特点</strong>: 社区活跃，数据集涵盖金融、医疗、社交网络等领域，支持直接下载或通过API调用。</p></li><li><p><strong>示例数据集</strong>:</p><ul><li><a href="https://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge">COVID-19开放数据集</a></li><li><a href="https://www.kaggle.com/c/titanic/data">Titanic乘客数据</a></li></ul></li></ul><h4 id="2-Hugging-Face-Datasets">2. <strong>Hugging Face Datasets</strong></h4><ul><li><p><strong>网址</strong>: <a href="https://huggingface.co/datasets">https://huggingface.co/datasets</a></p></li><li><p><strong>特点</strong>: 专注于NLP和多模态数据集，提供标准化加载接口（<code>datasets</code>库）。</p></li><li><p><strong>示例数据集</strong>:</p><ul><li>GLUE（自然语言理解基准）: <code>load_dataset("glue", "mrpc")</code></li><li>Common Voice（多语言语音）: <code>load_dataset("common_voice", "en")</code></li></ul></li></ul><h4 id="3-UCI-Machine-Learning-Repository">3. <strong>UCI Machine Learning Repository</strong></h4><ul><li><p><strong>网址</strong>: <a href="https://archive.ics.uci.edu/ml/index.php">https://archive.ics.uci.edu/ml/index.php</a></p></li><li><p><strong>特点</strong>: 经典数据集集合，适合机器学习入门与实验。</p></li><li><p><strong>示例数据集</strong>:</p><ul><li>Iris（鸢尾花分类）: <a href="https://archive.ics.uci.edu/ml/datasets/iris">下载链接</a></li><li>Adult（人口收入预测）: <a href="https://archive.ics.uci.edu/ml/datasets/adult">下载链接</a></li></ul></li></ul><hr><h3 id="二、自然语言处理（NLP）">二、自然语言处理（NLP）</h3><h4 id="1-文本语料库">1. <strong>文本语料库</strong></h4><ul><li><p><strong>Wikipedia Dump</strong></p><ul><li><strong>下载</strong>: <a href="https://dumps.wikimedia.org">https://dumps.wikimedia.org</a></li><li><strong>用途</strong>: 预训练语言模型（如BERT、GPT）。</li></ul></li><li><p><strong>BookCorpus</strong></p><ul><li><strong>下载</strong>: 需通过学术申请或第三方镜像（如<a href="https://www.tensorflow.org/datasets">TensorFlow Datasets</a>）。</li></ul></li></ul><h4 id="2-任务特定数据集">2. <strong>任务特定数据集</strong></h4><ul><li><strong>SQuAD（问答）</strong>:<ul><li><strong>下载</strong>: <a href="https://rajpurkar.github.io/SQuAD-explorer/">https://rajpurkar.github.io/SQuAD-explorer/</a></li></ul></li><li><strong>CoNLL-2003（命名实体识别）</strong>:<ul><li><strong>下载</strong>: <a href="https://huggingface.co/datasets/conll2003">Hugging Face Datasets</a></li></ul></li><li><strong>OpenWebText（开源版WebText）</strong>:<ul><li><strong>下载</strong>: <a href="https://github.com/jcpeterson/openwebtext">GitHub仓库</a></li></ul></li></ul><hr><h3 id="三、计算机视觉（CV）">三、计算机视觉（CV）</h3><h4 id="1-图像分类">1. <strong>图像分类</strong></h4><ul><li><p><strong>ImageNet</strong></p><ul><li><strong>下载</strong>: 需注册并申请访问权限 <a href="http://www.image-net.org">ImageNet官网</a></li><li><strong>替代方案</strong>: 使用<code>torchvision.datasets.ImageNet</code>（需本地路径）。</li></ul></li><li><p><strong>CIFAR-10/100</strong>:</p><ul><li><strong>下载</strong>: 直接通过深度学习框架加载（如PyTorch）：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> datasetscifar10 <span class="token operator">=</span> datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="2-目标检测与分割">2. <strong>目标检测与分割</strong></h4><ul><li><strong>COCO（Common Objects in Context）</strong>:<ul><li><strong>下载</strong>: <a href="https://cocodataset.org">https://cocodataset.org</a></li></ul></li><li><strong>PASCAL VOC</strong>:<ul><li><strong>下载</strong>: <a href="http://host.robots.ox.ac.uk/pascal/VOC">http://host.robots.ox.ac.uk/pascal/VOC</a></li></ul></li></ul><h4 id="3-图像生成">3. <strong>图像生成</strong></h4><ul><li><strong>FFHQ（Flickr-Faces-HQ）</strong>:<ul><li><strong>下载</strong>: <a href="https://drive.google.com/drive/folders/1u3xuSvE3B3E8JgGKB7C_BfY8_T3u6l4K">Google Drive</a></li></ul></li><li><strong>LAION-5B（大规模多模态）</strong>:<ul><li><strong>下载</strong>: 通过Hugging Face <a href="https://laion.ai/blog/laion-5b/">https://laion.ai/blog/laion-5b/</a></li></ul></li></ul><hr><h3 id="四、语音与音频">四、语音与音频</h3><h4 id="1-LibriSpeech">1. <strong>LibriSpeech</strong></h4><ul><li><strong>下载</strong>: <a href="http://www.openslr.org/12">http://www.openslr.org/12</a></li><li><strong>用途</strong>: 语音识别模型训练（如Whisper）。</li></ul><h4 id="2-Mozilla-Common-Voice">2. <strong>Mozilla Common Voice</strong></h4><ul><li><strong>下载</strong>: <a href="https://commonvoice.mozilla.org">https://commonvoice.mozilla.org</a></li><li><strong>特点</strong>: 多语言开源语音数据集，支持社区贡献。</li></ul><hr><h3 id="五、推荐系统与图数据">五、推荐系统与图数据</h3><h4 id="1-MovieLens">1. <strong>MovieLens</strong></h4><ul><li><strong>下载</strong>: <a href="https://grouplens.org/datasets/movielens">https://grouplens.org/datasets/movielens</a></li><li><strong>规模</strong>: 从1M到25M评分数据可选。</li></ul><h4 id="2-Amazon-Product-Data">2. <strong>Amazon Product Data</strong></h4><ul><li><strong>下载</strong>: <a href="https://nijianmo.github.io/amazon/index.html">https://nijianmo.github.io/amazon/index.html</a></li><li><strong>内容</strong>: 商品评论、元数据、社交网络图。</li></ul><h4 id="3-OpenStreetMap（地理数据）">3. <strong>OpenStreetMap（地理数据）</strong></h4><ul><li><strong>下载</strong>: <a href="https://www.openstreetmap.org">https://www.openstreetmap.org</a></li></ul><hr><h3 id="六、其他工具与技巧">六、其他工具与技巧</h3><h4 id="1-批量下载方法">1. <strong>批量下载方法</strong></h4><ul><li><strong>wget/curl</strong>:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-i</span> list_of_urls.txt  <span class="token comment"># 批量下载URL列表中的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>rsync（大型数据集）</strong>:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> <span class="token parameter variable">-avz</span> username@server:/path/to/dataset ./local_dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-数据许可协议检查">2. <strong>数据许可协议检查</strong></h4><ul><li><strong>CC-BY（署名）</strong>、<strong>CC0（公共领域）</strong>、<strong>Apache/MIT（代码兼容）</strong> 等协议需根据用途合规使用。</li></ul><h4 id="3-数据预处理工具">3. <strong>数据预处理工具</strong></h4><ul><li><strong>Pandas（表格数据）</strong>: 清洗、转换。</li><li><strong>Spark（大规模数据）</strong>: 分布式处理。</li><li><strong>Albumentations（图像增强）</strong>: 实时数据增强。</li></ul><hr><h3 id="七、注意事项">七、注意事项</h3><ol><li><strong>数据偏见</strong>: 检查数据集的代表性（如性别、地域分布）。</li><li><strong>存储与计算</strong>: 大规模数据集（如LAION-5B）需TB级存储与GPU集群支持。</li><li><strong>版本管理</strong>: 使用<code>DVC（Data Version Control）</code>跟踪数据集版本。</li></ol><hr><p>通过上述资源，可快速获取适用于大模型训练的开源数据集。建议根据任务需求选择数据规模适中、标注质量高的数据集，并优先参考学术论文中的基准数据集以复现结果。</p><h2 id="参考链接">参考链接</h2><ul><li><a href="https://www.mabiji.com/deepseek/deepseekr115b7b8b14b32b70b671b.html">deepseek-r1的1.5b、7b、8b、14b、32b、70b和671b有啥区别？</a>\</li><li><a href="https://help.aliyun.com/zh/pai/user-guide/one-click-deploy-deepseek">阿里云：一键部署DeepSeek-V3、DeepSeek-R1模型</a></li><li><a href="https://www.mabiji.com/deepseek/txyhai.html">腾讯云: DeepSeek-R1大模型一键部署教程by腾讯云HAI，如此简单！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 08-LLMs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
            <tag> 显卡服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIAssistant</title>
      <link href="/aiassistant/"/>
      <url>/aiassistant/</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释">名词解释</h2><ul><li><p><strong>AI编程助手</strong>:<br>当前主流AI编程助手离线版本并不具备或仅简单具备编程能力，<br>其更多是通过调用云服务器或本地服务器部署的大语言模型来辅助开发者完成各种编程任务，<br>例如代码解释、代码生成、代码优化、代码片段补全等。<br>插件将AI模型的答复和编译器优雅的结合，方便用户更快速的完成代码开发。</p></li><li><p><strong>LLMs</strong>:<br>大型语言模型（Large Language Models）是指具有数十亿甚至数百亿参数的深度学习模型，<br>并且在大规模语料库上进行预训练。这些模型可以生成自然语言文本，<br>并且可以用于各种自然语言处理任务，包括文本生成、文本摘要、文本分类等。</p></li><li><p><strong>ollama</strong>:<br>Ollama 是一个专为本地机器设计的开源框架，旨在简化大型语言模型（LLM）的部署、管理和运行。<br>它通过整合工具链和预构建模型库，使用户无需依赖云服务或复杂配置即可在本地高效使用各类开源大模型<br>（如 LLaMA、Mistral 等），尤其适合隐私敏感、网络受限或需定制化模型的场景</p></li><li><p><strong>成熟大语言模型</strong>:<br>cursor-small、claude-3.5-sonnet、claude-3.5-haiku、claude-3-opus、gpt-4o-mini、gpt-4o、o1、o1-mini、o3-mini、deepseek-v3、deepseek-r1</p></li></ul><h2 id="常用插件对比分析">常用插件对比分析</h2><ul><li><strong>总结</strong>:<br>编码助手是一个调用服务端大语言模型的用户友好编程协助工具，<br>笔者认为其收费核心应该在于大语言模型自身的能力，而非特定的云服务提供厂商。<br>基于以上原因，推荐cursor 和 continue 两个可以灵活配置不同大语言模型的协助工具，<br>其中cursor是独立运行的客户端，如果更习惯使用 VSCode 或 IntelliJ IDEA 进行编码，则更推荐 continue。<br>对于具体大语言模型的选择，不同模型有不同收费方式，国外节点有网络延迟问题，故推荐 DeepSeek 作为本地大模型选择。<br>企业级也可以根据自身需要可以使用 Ollama 私有化部署大语言模型。</li></ul><table><thead><tr><th style="text-align:center">助手名称</th><th style="text-align:left">核心功能点</th><th style="text-align:center">支持大模型</th><th style="text-align:center">价格</th><th style="text-align:center">官网</th></tr></thead><tbody><tr><td style="text-align:center">cursor<br>独立客户端</td><td style="text-align:left">多行编辑<br>智能重写<br>光标预测<br>解释代码</td><td style="text-align:center">cursor-small<br>claude-3.5-sonnet<br>claude-3.5-haiku<br>claude-3-opus<br>gpt-4o-mini<br>gpt-4o<br>o1<br>o1-mini<br>o3-mini<br>deepseek-v3<br>deepseek-r1</td><td style="text-align:center"><a href="https://www.cursor.com/cn/pricing">价格</a></td><td style="text-align:center"><a href="https://www.cursor.com/cn/features">官网</a></td></tr><tr><td style="text-align:center">continue</td><td style="text-align:left">解释代码<br>生成单元测试<br>生成注释<br>优化代码<br>代码片段补全</td><td style="text-align:center">Ollama 本地部署大模型<br>Claude 3.5 Sonnet<br>Llama 3.1 405B<br>GPT-4o<br>Grok-2<br>Gemini 1.5 Pro<br>Llama 3.1 8B<br>DeepSeek Coder 2 16B</td><td style="text-align:center">各api独立收费</td><td style="text-align:center"><a href="https://docs.continue.dev/chat/model-setup">官网</a></td></tr><tr><td style="text-align:center">GitHub Copilot</td><td style="text-align:left">代码生成<br>测试用例生成<br>文档生成</td><td style="text-align:center">Claude 3.5 Sonnet<br>GPT 4o<br>O3-mini</td><td style="text-align:center"><a href="https://github.com/features/copilot/plans?cft=copilot_li.features_copilot">价格</a></td><td style="text-align:center"><a href="https://github.com/features/copilot">官网</a></td></tr><tr><td style="text-align:center">CodeGeeX</td><td style="text-align:left">代码自动生成与补全<br>代码翻译<br>自动添加注释</td><td style="text-align:center">CodeGeeX4-ALL-9B</td><td style="text-align:center"></td><td style="text-align:center"><a href="https://codegeex.cn/">官网</a></td></tr><tr><td style="text-align:center">通义灵码</td><td style="text-align:left">解释代码<br>生成单元测试<br>生成注释<br>优化代码<br>代码片段补全</td><td style="text-align:center">qwen-2.5<br>deepseek-v3<br>deepseek-r1</td><td style="text-align:center"><a href="https://lingma.aliyun.com/pricing">价格</a></td><td style="text-align:center"><a href="https://lingma.aliyun.com/">官网</a></td></tr><tr><td style="text-align:center">腾讯云AI代码助手</td><td style="text-align:left">代码补全<br>单元测试<br>代码审查<br>代码解释</td><td style="text-align:center">混元大模型</td><td style="text-align:center"><a href="https://copilot.tencent.com/pricing">价格</a></td><td style="text-align:center"><a href="https://copilot.tencent.com/">官网</a></td></tr><tr><td style="text-align:center">豆包 MarsCode</td><td style="text-align:left">代码补全<br>单元测试<br>代码解释<br>生成注释</td><td style="text-align:center">豆包大模型</td><td style="text-align:center"></td><td style="text-align:center"><a href="https://www.marscode.cn/">官网</a></td></tr><tr><td style="text-align:center">文心一言 Comate</td><td style="text-align:left">代码生成<br>注释生成代码<br>代码解释<br>生成单测<br>生成注释<br>代码优化</td><td style="text-align:center">文心大模型</td><td style="text-align:center"><a href="https://comate.baidu.com/zh/pricing">价格</a></td><td style="text-align:center"><a href="https://comate.baidu.com/">官网</a></td></tr><tr><td style="text-align:center">讯飞 iFlyCode</td><td style="text-align:left">代码生成<br>代码补全<br>代码解释<br>文档注释</td><td style="text-align:center">星火大模型</td><td style="text-align:center"><a href="https://iflycode.xfyun.cn/product">价格</a></td><td style="text-align:center"><a href="http://iflycode.xfyun.cn/">官网</a></td></tr></tbody></table><h2 id="continue配置文件">continue配置文件</h2><h3 id="集成线上-DeepSeek-API">集成线上 DeepSeek API</h3><ol><li><p>获取 DeepSeek 对应API Key 👉  <a href="https://platform.deepseek.com/usage">DeepSeek API Key</a></p></li><li><p>continue 集成在线 DeepSeek API</p><img src="/aiassistant/config-deepseek-online.png" class="" title="配置方式"></li><li><p>官网配置文件(待对接)</p> <pre class="line-numbers language-json" data-language="json"><code class="language-json"> <span class="token punctuation">{</span>   <span class="token property">"completionOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"BaseCompletionOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>       <span class="token property">"maxTokens"</span><span class="token operator">:</span> <span class="token number">256</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token property">"models"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span>       <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"DeepSeek"</span><span class="token punctuation">,</span>       <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"deepseek-chat"</span><span class="token punctuation">,</span>       <span class="token property">"contextLength"</span><span class="token operator">:</span> <span class="token number">128000</span><span class="token punctuation">,</span>       <span class="token property">"apiKey"</span><span class="token operator">:</span> <span class="token string">"REDACTED"</span><span class="token punctuation">,</span>       <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"deepseek"</span><span class="token punctuation">,</span>       <span class="token property">"apiBase"</span><span class="token operator">:</span> <span class="token string">"https://api.deepseek.com/beta"</span>     <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"tabAutocompleteModel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"DeepSeek"</span><span class="token punctuation">,</span>     <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"deepseek-chat"</span><span class="token punctuation">,</span>     <span class="token property">"apiKey"</span><span class="token operator">:</span> <span class="token string">"REDACTED"</span><span class="token punctuation">,</span>     <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"deepseek"</span><span class="token punctuation">,</span>     <span class="token property">"apiBase"</span><span class="token operator">:</span> <span class="token string">"https://api.deepseek.com/beta"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="本地部署-DeepSeek-API">本地部署 DeepSeek API</h3><ol><li><p>Ollama离线部署LLM大语言模型 👉 <a href="https://ollama.com/library/deepseek-coder-v2">deepseek-coder-v2</a></p></li><li><p>配置Ollama模型地址<br>👉 <a href="https://docs.continue.dev/chat/model-setup#deepseek-coder-2-16b">continue 官方配置 Ollama 大模型 </a></p> <pre class="line-numbers language-config.json" data-language="config.json"><code class="language-config.json">"models": [    {        "title": "DeepSeek Coder 2 16B",        "provider": "ollama",        "model": "deepseek-coder-v2:16b",        "apiBase": "http://localhost:11434"    },    {        "title": "DeepSeek Coder ollama 6.7b",        "provider": "ollama",        "model": "deepseek-coder:6.7b",        "apiKey": "351c69317ad1a71925c9974",        "apiBase": "https://coder-loongmind.cplhyun.com"    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过已有API知识库 MaxKB 代理调用AI大模型</p><ul><li>本次测试 Ollama 访问地址没有直接开放，项目上使用了 MaxKB 调用服务器上部署的大模型作为AI知识库，同时该框架提供类openai<br>的接口格式，相关参数格式</li></ul> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将url 和 Authorization 替换为 MaxKB 应用实际真实的 Base URL 和 API Key。</span><span class="token function">curl</span> https://maxkb.fit2cloud.com/api/application/xxxxxxxx-8c56-11ef-a99e-0242ac140003/chat/completions <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-H</span> <span class="token string">"Authorization: Bearer application-xxxxxxxxf00e21a7530d1177c20967"</span>  <span class="token punctuation">\</span>    <span class="token parameter variable">-d</span> <span class="token string">'{        "model": "gpt-3.5-turbo",        "messages": [            {              "role": "你是杭州飞致云信息科技有限公司旗下产品 MaxKB 知识库问答系统的智能小助手，你的工作是帮助 MaxKB 用户解答使用中遇到的问题，用户找你回答问题时，你要把主题放在 MaxKB 知识库问答系统身上。",              "content": "MaxKB 是什么？"            }        ]    }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>故提供商类型可选择 openai，间接访问 Ollama 大模型，配置详情如下</li></ul> <pre class="line-numbers language-config.json" data-language="config.json"><code class="language-config.json">{  "title": "DeepSeek Coder 2 Local",  "provider": "openai",  "model": "deepseek-coder-v2:16b",  "contextLength": 128000,  "apiKey": "Bearer application-f5e44fffac10d076058856df311b3862",  "apiBase": "https://loongmind.cplhyun.com/api/application/ed9f52c8-e5f3-11ef-be93-0242ac130003"},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://help.aliyun.com/zh/model-studio/developer-reference/compatibility-of-openai-with-dashscope">阿里云百炼兼容OpenAI</a></p><ul><li>部分模型代码接入时报错404，生效模型为<code>qwen2.5-coder-7b-instruct</code></li></ul> <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"qwen-coder-plus"</span><span class="token punctuation">,</span>  <span class="token property">"provider"</span><span class="token operator">:</span> <span class="token string">"openai"</span><span class="token punctuation">,</span>  <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"qwen-coder-plus"</span><span class="token punctuation">,</span>  <span class="token property">"contextLength"</span><span class="token operator">:</span> <span class="token number">128000</span><span class="token punctuation">,</span>  <span class="token property">"apiKey"</span><span class="token operator">:</span> <span class="token string">"sk-f2d9791a17f14710b70dc277e72e206e"</span><span class="token punctuation">,</span>  <span class="token property">"apiBase"</span><span class="token operator">:</span> <span class="token string">"https://dashscope.aliyuncs.com/compatible-mode/v1"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="参考链接">参考链接</h2><ul><li><a href="https://blog.csdn.net/u010554324/article/details/135027694">国产AI编程辅助插件对比</a></li><li><a href="https://juejin.cn/post/7468200664117248040">IDEA 接入 DeepSeek,太酷了!</a></li><li><a href="https://api-docs.deepseek.com/zh-cn/quick_start/pricing">DeepSeek API 文档</a></li><li><a href="https://maxkb.cn/docs/dev_manual/APIKey_chat/">MaxKB 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQN practice-maze</title>
      <link href="/practice-maze/"/>
      <url>/practice-maze/</url>
      
        <content type="html"><![CDATA[<h2 id="系统环境">系统环境</h2><ul><li>windows + CUDA=11.6</li><li>miniconda3</li><li>python=[3.7.12](<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a><ul><li>conda create -n dqn python=3.7.12</li></ul></li><li>pytorch=<a href="https://pytorch.org/get-started/previous-versions/">1.7.1</a>  # numpy==1.21.6<ul><li>conda install pytorch==1.7.1 cudatoolkit=11.0 -c pytorch</li><li>pip install “torch-1.7.1+cpu-cp37-cp37m-win_amd64.whl” # <a href="https://download.pytorch.org/whl/torch/">https://download.pytorch.org/whl/torch/</a></li></ul></li><li>conda install gym[classic_control] # gym=0.21.0</li><li>conda install pygame==2.1.0 tensorboard=2.11.2 tensorboardX==2.5.1 pyglet==1.5.27</li></ul><h2 id="附录">附录</h2><h3 id="项目地址">项目地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:WANGJUEYA/DQN.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参考资料">参考资料</h3><ul><li><a href="https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf">《Playing Atari with Deep Reinforcement Learning》</a></li><li><a href="https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf">《Human-level Control through Deep Reinforcement Learning：Nature杂志》</a></li><li><a href="https://zhuanlan.zhihu.com/p/97856004">DQN(Deep Q-learning)算法原理与实现</a></li><li><a href="https://www.manning.com/books/deep-reinforcement-learning-in-action">《深度强化学习实战》</a></li><li><a href="https://zhuanlan.zhihu.com/p/630554489">DQN基本概念和算法流程</a></li></ul><h3 id="CartPole"><a href="CartPole.py">CartPole</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python CartPole.pytensorboard <span class="token parameter variable">--logdir</span><span class="token operator">=</span><span class="token string">"run/MemoryCapacity_100_CustomReward/"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gym<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment"># gym=0.26.0 https://blog.csdn.net/qq_43674552/article/details/127344366</span><span class="token comment"># Hyper Parameters 超参数</span>EPOCH <span class="token operator">=</span> <span class="token number">400</span>  <span class="token comment"># 400个episode循环</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">32</span>  <span class="token comment"># 样本数量</span>LR <span class="token operator">=</span> <span class="token number">0.01</span>  <span class="token comment"># learning rate | 学习率</span>EPSILON <span class="token operator">=</span> <span class="token number">0.9</span>  <span class="token comment"># greedy policy</span>GAMMA <span class="token operator">=</span> <span class="token number">0.9</span>  <span class="token comment"># reward discount</span>TARGET_REPLACE_ITER <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># target update frequency | 目标网络更新频率</span>MEMORY_CAPACITY <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token comment"># 记忆库容量</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">'CartPole-v0'</span><span class="token punctuation">)</span>  <span class="token comment"># 使用gym库中的环境：CartPole，且打开封装</span>env <span class="token operator">=</span> env<span class="token punctuation">.</span>unwrapped  <span class="token comment"># 打开环境封装</span>N_ACTIONS <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n  <span class="token comment"># 杆子动作个数 (2个)</span>N_STATES <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 杆子状态个数 (4个)</span><span class="token triple-quoted-string string">"""torch.nn是专门为神经网络设计的模块化接口。nn构建于Autograd之上，可以用来定义和运行神经网络。nn.Module是nn中十分重要的类，包含网络各层的定义及forward方法。定义网络：    需要继承nn.Module类，并实现forward方法。    一般把网络中具有可学习参数的层放在构造函数__init__()中。    只要在nn.Module的子类中定义了forward函数，backward函数就会被自动实现(利用Autograd)。"""</span><span class="token comment"># 定义Net类 (定义网络)</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义Net的一系列属性</span>        <span class="token comment"># nn.Module的子类函数必须在构造函数中执行父类的构造函数</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等价与nn.Module.__init__()</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>N_STATES<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 设置第一个全连接层(输入层到隐藏层): 状态数个神经元到20个神经元</span>        self<span class="token punctuation">.</span>fc1<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment"># 权重初始化 (均值为0，方差为0.1的正态分布)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> N_ACTIONS<span class="token punctuation">)</span>  <span class="token comment"># 设置第二个全连接层(隐藏层到输出层): 20个神经元到动作数个神经元</span>        self<span class="token punctuation">.</span>fc2<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment"># 权重初始化 (均值为0，方差为0.1的正态分布)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义forward函数 (x为状态)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 连接输入层到隐藏层，且使用激励函数ReLU来处理经过隐藏层后的值</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 连接隐藏层到输出层，获得最终的输出值 (即动作值)</span><span class="token comment"># 定义DQN类 (定义两个网络)</span><span class="token keyword">class</span> <span class="token class-name">DQN</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义DQN的一系列属性</span>        self<span class="token punctuation">.</span>target_net<span class="token punctuation">,</span> self<span class="token punctuation">.</span>evaluate_net <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 利用Net创建两个神经网络: 评估网络和目标网络</span>        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>MEMORY_CAPACITY<span class="token punctuation">,</span> N_STATES <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 初始化记忆库，一行代表一个transition</span>        self<span class="token punctuation">.</span>loss_Function <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 使用均方损失函数 (loss(xi, yi)=(xi-yi)^2)</span>        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>evaluate_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>  <span class="token comment"># 使用Adam优化器 (输入为评估网络的参数和学习率)</span>        self<span class="token punctuation">.</span>point <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># for storing memory</span>        self<span class="token punctuation">.</span>learn_step <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># for target updating</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义动作选择函数 (s为状态)</span>        s <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 将s转换成32-bit floating point形式，并在dim=0增加维数为1的维度</span>        <span class="token keyword">if</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> EPSILON<span class="token punctuation">:</span>  <span class="token comment"># epsilon-greedy 生成一个在[0, 1)内的随机数，如果小于EPSILON，选择最优动作</span>            <span class="token keyword">return</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>evaluate_net<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 通过对评估网络输入状态s，前向传播获得动作值</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 随机选择动作</span>            <span class="token keyword">return</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N_ACTIONS<span class="token punctuation">)</span>  <span class="token comment"># 这里action随机等于0或1 (N_ACTIONS = 2)</span>    <span class="token keyword">def</span> <span class="token function">store_transition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义记忆存储函数 (这里输入为一个transition)</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>self<span class="token punctuation">.</span>point <span class="token operator">%</span> MEMORY_CAPACITY<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">,</span> s_<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 如果记忆库满了，便覆盖旧的数据</span>        self<span class="token punctuation">.</span>point <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># memory_counter自加1</span>    <span class="token keyword">def</span> <span class="token function">sample_batch_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 抽取记忆库中的批数据</span>        perm_idx <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">[</span>perm_idx<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>  <span class="token comment"># 定义学习函数(记忆库已满后便开始学习)</span>        <span class="token comment"># 目标网络参数更新</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>learn_step <span class="token operator">%</span> TARGET_REPLACE_ITER <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 一开始触发，然后每100步触发</span>            self<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>evaluate_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将评估网络的参数赋给目标网络</span>        self<span class="token punctuation">.</span>learn_step <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 学习步数自加1</span>        <span class="token comment"># 抽取32个索引对应的32个transition，存入batch_memory</span>        batch_memory <span class="token operator">=</span> self<span class="token punctuation">.</span>sample_batch_data<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">)</span>        <span class="token comment"># 将32个s抽出，转为32-bit floating point形式，并存储到batch_state中，batch_state为32行4列</span>        batch_state <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>N_STATES<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 将32个a抽出，转为64-bit integer (signed)形式，并存储到batch_action中 (LongTensor类型方便后面torch.gather的使用)，batch_action为32行1列</span>        batch_action <span class="token operator">=</span> torch<span class="token punctuation">.</span>LongTensor<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> N_STATES<span class="token punctuation">:</span> N_STATES <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 将32个r抽出，转为32-bit floating point形式，并存储到batch_reward中，batch_reward为32行1列</span>        batch_reward <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> N_STATES <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> N_STATES <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 将32个s_抽出，转为32-bit floating point形式，并存储到batch_next_state中，batch_next_state为32行4列</span>        batch_next_state <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>batch_memory<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span>N_STATES<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 获取32个transition的评估值和目标值，并利用损失函数和优化器进行评估网络参数更新</span>        q_eval <span class="token operator">=</span> self<span class="token punctuation">.</span>evaluate_net<span class="token punctuation">(</span>batch_state<span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> batch_action<span class="token punctuation">)</span>        <span class="token comment"># eval_net(b_s)通过评估网络输出32行每个b_s对应的一系列动作值，然后.gather(1, b_a)代表对每行对应索引b_a的Q值提取进行聚合</span>        q_next <span class="token operator">=</span> self<span class="token punctuation">.</span>target_net<span class="token punctuation">(</span>batch_next_state<span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># target network</span>        <span class="token comment"># q_next不进行反向传递误差，所以detach；q_next表示通过目标网络输出32行每个b_s_对应的一系列动作值</span>        q_target <span class="token operator">=</span> batch_reward <span class="token operator">+</span> GAMMA <span class="token operator">*</span> q_next<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>BATCH_SIZE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># q_next.max(1)[0]表示只返回每一行的最大值，不返回索引(长度为32的一维张量)；.view()表示把前面所得到的一维张量变成(BATCH_SIZE, 1)的形状；最终通过公式得到目标值</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_Function<span class="token punctuation">(</span>q_eval<span class="token punctuation">,</span> q_target<span class="token punctuation">)</span>        <span class="token comment"># 输入32个评估值和32个目标值，使用均方损失函数</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空上一步的残余更新参数值</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 误差反向传播, 计算参数更新值</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 更新评估网络的所有参数</span>        <span class="token keyword">return</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 返回损失函数数值</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    dqn <span class="token operator">=</span> DQN<span class="token punctuation">(</span><span class="token punctuation">)</span>    writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"run/MemoryCapacity_100_CustomReward/"</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>dqn<span class="token punctuation">.</span>evaluate_net<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N_STATES<span class="token punctuation">)</span><span class="token punctuation">)</span>    global_step <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 绘图横坐标</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>EPOCH<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># episode循环</span>        s <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 重置环境</span>        running_loss <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 损失函数值</span>        cumulated_reward <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 初始化该循环对应的episode的总奖励</span>        step <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            global_step <span class="token operator">+=</span> <span class="token number">1</span>            env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示实验动画</span>            a <span class="token operator">=</span> dqn<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment"># 输入该步对应的状态s，选择动作</span>            s_<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 执行动作，获得反馈</span>            <span class="token comment"># 修改奖励 (不修改也可以，修改奖励只是为了更快地得到训练好的摆杆)</span>            x<span class="token punctuation">,</span> x_dot<span class="token punctuation">,</span> theta<span class="token punctuation">,</span> theta_dot <span class="token operator">=</span> s_            r1 <span class="token operator">=</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>x_threshold <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> env<span class="token punctuation">.</span>x_threshold <span class="token operator">-</span> <span class="token number">0.8</span>            r2 <span class="token operator">=</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span>theta_threshold_radians <span class="token operator">-</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> env<span class="token punctuation">.</span>theta_threshold_radians <span class="token operator">-</span> <span class="token number">0.5</span>            r <span class="token operator">=</span> r1 <span class="token operator">+</span> r2            dqn<span class="token punctuation">.</span>store_transition<span class="token punctuation">(</span>s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s_<span class="token punctuation">)</span>  <span class="token comment"># 存储样本</span>            cumulated_reward <span class="token operator">+=</span> r  <span class="token comment"># 逐步加上一个episode内每个step的reward</span>            <span class="token keyword">if</span> dqn<span class="token punctuation">.</span>point <span class="token operator">&gt;</span> MEMORY_CAPACITY<span class="token punctuation">:</span>  <span class="token comment"># 如果累计的transition数量超过了记忆库的固定容量2000</span>                <span class="token comment"># 开始学习 (抽取记忆，即32个transition，并对评估网络参数进行更新，并在开始学习后每隔100次将评估网络的参数赋给目标网络)</span>                loss <span class="token operator">=</span> dqn<span class="token punctuation">.</span>learn<span class="token punctuation">(</span><span class="token punctuation">)</span>                running_loss <span class="token operator">+=</span> loss                <span class="token keyword">if</span> done <span class="token keyword">or</span> step <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"��FAIL��Episode: %d| Step: %d| Loss:  %.4f, Reward: %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                        i<span class="token punctuation">,</span> step<span class="token punctuation">,</span> running_loss <span class="token operator">/</span> step<span class="token punctuation">,</span> cumulated_reward<span class="token punctuation">)</span><span class="token punctuation">)</span>                    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"training/Loss"</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> step<span class="token punctuation">,</span> global_step<span class="token punctuation">)</span>                    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"training/Reward"</span><span class="token punctuation">,</span> cumulated_reward<span class="token punctuation">,</span> global_step<span class="token punctuation">)</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rCollecting experience: %d / %d..."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dqn<span class="token punctuation">.</span>point<span class="token punctuation">,</span> MEMORY_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> done<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Episode: %d| Step: %d| Loss:  %.4f, Reward: %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>                    i<span class="token punctuation">,</span> step<span class="token punctuation">,</span> running_loss <span class="token operator">/</span> step<span class="token punctuation">,</span> cumulated_reward<span class="token punctuation">)</span><span class="token punctuation">)</span>            step <span class="token operator">+=</span> <span class="token number">1</span>            s <span class="token operator">=</span> s_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 05-Program-Design </category>
          
          <category> Algorithm </category>
          
          <category> DQN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DQN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DQN</title>
      <link href="/instruction/"/>
      <url>/instruction/</url>
      
        <content type="html"><![CDATA[<h2 id="学习目标">学习目标</h2><p>初级：学习包括完整的训练过程和测试。利用argparse 模块实现最简单的参数化运行,完成训练模型的保存和加载。<a href="https://github.com/ericyangyu/PPO-for-Beginners">参考地址</a></p><p>高级：利用 DQN设计一个agent，通过探索 8x8-map 迷宫，学习从起始位置 (start，绿色 block)到目标 (end，红色block)的最优路径。</p><p>输出文档：包括训练环境设置、算法、模型、超参数设置、训练曲线(损失函数、平均累计回报)等。</p><h2 id="背景介绍">背景介绍</h2><p>DeepMind 于 2013 年和 2015 年分别提出的两篇论文</p><p><a href="https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf">《Playing Atari with Deep Reinforcement Learning》</a></p><p><a href="https://storage.googleapis.com/deepmind-media/dqn/DQNNaturePaper.pdf">《Human-level Control through Deep Reinforcement Learning：Nature杂志》</a></p><p>其中DeepMind在第一篇中第一次提出Deep Reinforcement Learning（DRL）这个名称，并且提出DQN算法，实现从视频纯图像输入，完全通过Agent学习来玩Atari游戏的成果。之后DeepMind在Nature上发表了改进版的DQN文章（Human-level …）, 这将深度学习与RL结合起来实现从Perception感知到Action动作的端到端的一种全新的学习算法。<strong>简单理解就是和人类一样，输入感知信息比如眼睛看到的东西，然后通过大脑（深度神经网络)，直接做出对应的行为（输出动作）的学习过程。</strong> 而后DeepMind提出了AlphaZero（完美的运用了DRL+Monte Calo Tree Search）取得了超过人类的水平！</p><h2 id="相关链接">相关链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/97856004">DQN(Deep Q-learning)算法原理与实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 05-Program-Design </category>
          
          <category> Algorithm </category>
          
          <category> DQN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DQN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitBook</title>
      <link href="/gitbook/"/>
      <url>/gitbook/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>GitBook是一个将markdown文件生成电子书的工具，可以使用在线版本，也可以本地安装 gitbook-cli 本地化电子书</p><h2 id="安装及命令简介">安装及命令简介</h2><ul><li><p><a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html">https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/34946169">https://zhuanlan.zhihu.com/p/34946169</a></p></li><li><p>常用命令</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装gitbook脚手架</span><span class="token function">npm</span> <span class="token function">install</span> gitbook-cli <span class="token parameter variable">-g</span><span class="token comment"># 查看版本及初始化安装</span>gitbook <span class="token parameter variable">--version</span><span class="token comment"># 设置一个样板书</span>gitbook init<span class="token comment"># 将书籍创建到指定目录</span>gitbook init ./directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装问题及解决方案">安装问题及解决方案</h3><h4 id="安装过程Windows环境下安装异常-gitbook-cli-node-modules-npm-node-modules-graceful-fs-polyfills-js-287-cb-apply-is-not-a-function">安装过程Windows环境下安装异常 <code>gitbook-cli\node_modules\npm\node_modules\graceful-fs\polyfills.js:287 &gt; cb.apply is not a function</code></h4><p>找到对应文件<br><code>C:\Users\${username}\AppData\Roaming\npm\node_modules\gitbook-cli\node_modules\npm\node_modules\graceful-fs\polyfills.js</code></p><p>注释掉下面三行代码即可</p><pre class="line-numbers language-polyfills.js" data-language="polyfills.js"><code class="language-polyfills.js">// fs.stat = statFix(fs.stat)// fs.fstat = statFix(fs.fstat)// fs.lstat = statFix(fs.lstat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码仓库 </tag>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLite</title>
      <link href="/sqlite/"/>
      <url>/sqlite/</url>
      
        <content type="html"><![CDATA[<p>无需下载任何安装包，也无需启动任何数据库服务。就能维护一个SQLite数据库及在Spring程序中使用SQLite数据库。</p><h2 id="DBeaver连接SQLite-DBeaver会自动安装相关驱动">DBeaver连接SQLite(DBeaver会自动安装相关驱动)</h2><ul><li>任意文件夹下创建一个文件，文件名为 <code>database.db</code></li><li>新建一个SQLite连接，填写文件路径</li></ul><img src="/sqlite/DBeaver-setting.png" class="" title="DBeaver-setting"><ul><li>菜鸟教程 <a href="https://www.runoob.com/sqlite/sqlite-data-types.html">https://www.runoob.com/sqlite/sqlite-data-types.html</a></li></ul><h2 id="jdbc集成">jdbc集成</h2><h3 id="引入maven依赖">引入maven依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc/3.46.0.0--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.xerial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sqlite-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.46.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcSimpleUtils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">DataBase</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// "jdbc:sqlite:test.db"</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tableName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tableColumns<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcSimpleUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcSimpleUtils</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tClass <span class="token operator">=</span> tClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tableName <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tableColumns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithFields</span><span class="token punctuation">(</span>tClass<span class="token punctuation">,</span> f <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TableField</span> tableField <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tableField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tableColumns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tableField<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                columnMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tableField<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">DataBase</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">JdbcSimpleUtils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JdbcSimpleUtils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcSimpleUtils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM "</span> <span class="token operator">+</span> tableName<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">T</span> data <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> id <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> columnMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">DataBase</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sqlList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> data <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sqlList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">updateByIdSql</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sqlList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">insertSql</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span>sqlList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">insertSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> columnMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            columns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">+</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO %s(%s) VALUES(%s);"</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> columns<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">insertSql</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateByIdSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> set <span class="token operator">=</span> columnMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s='%s'"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"UPDATE %s SET %s WHERE ID = '%s';"</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> set<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updateByIdSql</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM %s WHERE ID IN (%s)"</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"','"</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT COUNT(1) FROM "</span> <span class="token operator">+</span> tableName<span class="token punctuation">,</span> res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> <span class="token constant">BEGIN</span> <span class="token operator">=</span> <span class="token string">"CREATE TABLE %s (\n ID INT PRIMARY KEY NOT NULL,\n"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token constant">LINE</span> <span class="token operator">=</span> <span class="token string">"%s TEXT"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token constant">END</span> <span class="token operator">=</span> <span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">BEGIN</span><span class="token punctuation">,</span> tableName<span class="token punctuation">)</span> <span class="token operator">+</span> tableColumns<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LINE</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">",\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultSet</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ResultSet</span> set <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>statement <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sqlItem <span class="token operator">:</span> sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sqlItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sqlItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">R</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Statement</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.sqlite.JDBC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> fn <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    c<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang | 入门及进阶使用</title>
      <link href="/golang/"/>
      <url>/golang/</url>
      
        <content type="html"><![CDATA[<h2 id="安装地址">安装地址</h2><ul><li><a href="https://golang.org/dl">官方地址</a>  👉  <a href="https://golang.org/dl">https://golang.org/dl</a></li><li><a href="https://golang.google.cn/dl/">中国镜像地址</a>  👉  <a href="https://golang.google.cn/dl/">https://golang.google.cn/dl/</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置全局环境变量: go下载代理，防止相关文件下载超时</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">GOPROXY</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//goproxy.io<span class="token punctuation">,</span>direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置全局环境变量: go依赖下载路径</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">GOPATH</span><span class="token punctuation">:</span> E<span class="token punctuation">:</span>\data\go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-make-工具">安装 make 工具</h2><ul><li>MinGW（Minimalist GNU for Windows）是一个为 Windows 系统提供的自由软件开发环境，它包含了一组适用于 Windows 的 GNU 工具集，包括编译器、链接器、调试器和其他相关工具。MinGW 使得开发者能够在 Windows 平台上编写和编译源代码，而不需要第三方 C 运行时库。</li><li>主要包含: GCC, Binutils, Make, GDB 等常用组件</li><li><a href="https://sourceforge.net/projects/mingw/files/latest/download?source=files">下载地址</a>  👉  <a href="https://sourceforge.net/projects/mingw/files/latest/download?source=files">https://sourceforge.net/projects/mingw/files/latest/download?source=files</a></li><li>全局变量中设置安装目录<code>E:\MinGW\bin</code></li><li>在安装目录下 <code>E:\MinGW\bin</code> 复制文件 <code>copy mingw32-make.exe make.exe</code></li><li>检查安装结果 <code>make -v</code>; IDEA设置make路径</li></ul><img src="/golang/IDEA-setting.png" class="" title="IDEA设置make路径"><pre class="line-numbers language-none"><code class="language-none">GOPROXY=https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/golang/GOLAND-goproxy.png" class="" title="GoLand设置全局代理"><h2 id="安装依赖包">安装依赖包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go mod tidy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="项目启动">项目启动</h2><pre class="line-numbers language-none"><code class="language-none">go run ./cmd/lumenim commet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/golang/GOLAND-%E5%B8%A6%E5%8F%82%E6%95%B0%E5%90%AF%E5%8A%A8.png" class="" title="GoLand带参数启动调试项目"><h2 id="项目调试">项目调试</h2><ul><li>低版本的 GoLand + 高版本的 GoLang 不匹配，需要重新下载调试器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">install</span> github.com/go-delve/delve/cmd/dlv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>或者下载源码进行安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:go-delve/delve.git<span class="token builtin class-name">cd</span> ./delve/cmd/dlvgo build <span class="token comment"># 生成 dlv.exe 文件</span><span class="token comment"># 将生成的 dlv.exe 替换 GoLand 旧版本的编译工具</span><span class="token comment"># E:\JetBrains\GoLand 2021.2.1\plugins\go\lib\dlv\windows</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述生成的<code>dlv.exe</code>也可以用于<code>vscode</code>调试</li></ul>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBean</title>
      <link href="/springbean/"/>
      <url>/springbean/</url>
      
        <content type="html"><![CDATA[<h2 id="重写bean实例">重写bean实例</h2><h3 id="自定义bean覆盖">自定义bean覆盖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanDefinitionRegistryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SPECIAL_OVERRIDE_BEAN</span> <span class="token operator">=</span> <span class="token string">"healthMessageQueueLogService"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isContainsSpecialBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> registry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">SPECIAL_OVERRIDE_BEAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isContainsSpecialBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">AnnotatedBeanDefinition</span> healthMessageBeanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">SPECIAL_OVERRIDE_BEAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>healthMessageBeanDefinition <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">AnnotatedGenericBeanDefinition</span> myBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>healthMessageBeanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//忽略 beanClass originatingBeanDefinition字段</span>                <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>healthMessageBeanDefinition<span class="token punctuation">,</span> myBeanDefinition<span class="token punctuation">,</span> <span class="token string">"beanClass"</span><span class="token punctuation">,</span> <span class="token string">"originatingBeanDefinition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置自定义的bean class</span>                myBeanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">MyHealthMessageQueueLogService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//重新加载自定义的bean class</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    myBeanDefinition<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">SPECIAL_OVERRIDE_BEAN</span><span class="token punctuation">,</span> myBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义移除重写的bean">自定义移除重写的bean</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>        basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.basic"</span><span class="token punctuation">,</span> <span class="token string">"com.system"</span><span class="token punctuation">,</span> <span class="token string">"com.business"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">REGEX</span><span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">"com.zh.core.service.SysUserBasicService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Squid</title>
      <link href="/squid/"/>
      <url>/squid/</url>
      
        <content type="html"><![CDATA[<h2 id="软件安装">软件安装</h2><h3 id="windows安装Squid">windows安装Squid</h3><p>在 Windows 平台上安装 Squid 分为以下几个步骤：</p><ol><li>下载 Squid for Windows<br>访问 <a href="https://wiki.squid-cache.org/SquidFaq/BinaryPackages">Squid 官方网站（https://www.squid-cache.org/）</a> ，在下载页面找到适用于 Windows 的 Squid 版本，下载对应的 zip 文件。</li><li>解压文件<br>将下载的 zip 文件解压到一个合适的位置，例如 C:\Squid。</li><li>配置 Squid  (不配置可以使用服务器自己的dns解析)<br>在解压后的 Squid 文件夹中，找到 squid.conf 文件，根据你的需求进行配置，例如设置缓存大小、代理规则等。<ul><li>如果被代理的请求地址不是 <code>443</code>, 需要增加一条放行规则 <code>acl SSL_ports port 9301</code></li></ul></li><li>启动 Squid 服务 (Windows 可以在<code>服务</code>面板中重启 Squid)<br>打开命令提示符，进入 Squid 文件夹，输入以下命令启动 Squid 服务：</li></ol><pre class="line-numbers language-none"><code class="language-none">squid -N  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，Squid 已在 Windows 平台上成功安装并启动。<br>注意：Squid 默认监听 3128 端口，你可以根据需求修改 squid.conf 文件中的端口设置。同时，Squid 需要一定的系统资源，请在设置代理规则时根据实际需求进行调整。</p><ol start="5"><li>若要停止 Squid 服务，只需在命令提示符中输入以下命令：</li></ol><pre class="line-numbers language-none"><code class="language-none">squid -K  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多详细配置选项，请参阅 Squid 官方文档：<a href="https://www.squid-cache.org/docs/squid/2.7/configuration_guide/index.html">https://www.squid-cache.org/docs/squid/2.7/configuration_guide/index.html</a></p><h3 id="使用代理发送请求判断是否生效">使用代理发送请求判断是否生效</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -x127.0.0.1:3128 <span class="token parameter variable">-I</span> https://host:port/path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="java使用">java使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RestTemplate</span> restTemplate<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleClientHttpRequestFactory</span> simpleClientHttpRequestFactory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加代理 ip 和 port 即可</span>simpleClientHttpRequestFactory<span class="token punctuation">.</span><span class="token function">setProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Proxy<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">3128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>restTemplate<span class="token punctuation">.</span><span class="token function">setRequestFactory</span><span class="token punctuation">(</span>simpleClientHttpRequestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用过程发生异常">调用过程发生异常</h3><ul><li>Unable to tunnel through proxy. Proxy returns “HTTP/1.1 403 Forbidden”</li></ul><p>vim /etc/squid/squid.conf<br>增加对应端口的放行规则</p><pre class="line-numbers language-none"><code class="language-none"># https放行acl SSL_ports port 9301# http放行acl Safe_ports port XX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务</p><ul><li>Unable to tunnel through proxy. Proxy returns “HTTP/1.1 503 Service Unavailable”</li></ul><p>通过 <code>curl -x127.0.0.1:3128 -I https://host:port/path</code> 命令发现报错 <code> ERR_DNS_FAIL 0</code></p><p>通过命令 <code>ipconfig /all</code> 查询当前环境的 dns 服务器, 配置对应的dns服务器地址</p><p>修改  /etc/squid/squid.conf 文件，修改dns服务器配置 <code>dns_nameservers 配置的dns服务器</code></p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
          <category> Proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
            <tag> 正向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm</title>
      <link href="/pycharm/"/>
      <url>/pycharm/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jetbrains.com/pycharm/download/other.html">PyCharm历史版本</a></p><h2 id="相关配置">相关配置</h2><h3 id="conda默认环境">conda默认环境</h3><p>File &gt; Setting &gt; Project: XXX &gt; Project Interpreter &gt; 右上角Add &gt; Conda Environment &gt; Existing Environments &gt; 选择conda环境</p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyCharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huggingface 模型初尝试 | 启动 ChatGLM 模型</title>
      <link href="/chatglm/"/>
      <url>/chatglm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><ul><li>本系列文章旨在使用 ChatGLM 预处理模型接入业务系统，完成项目助手类插件服务开发调用</li><li>基本思路是学会使用基础模型、学会微调基础模型、了解并掌握向量数据库的使用(实时数据交互)、完成业务接入 <u>NLP</u> 服务</li><li>本文是系列文章第一篇：启动 ChatGLM 模型</li></ul><h2 id="提前安装">提前安装</h2><h3 id="conda">conda</h3><ul><li><p><a href="https://docs.conda.io/en/latest/miniconda.html#windows-installers">conda</a> 是python包管理工具、可以安装一个内置的 <a href="https://www.python.org/">python</a></p></li><li><p><a href="https://developer.aliyun.com/mirror/anaconda">配置阿里数据源</a></p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span> <span class="token comment"># windows 生成 .condarc 文件配置</span>conda clean <span class="token parameter variable">-i</span> <span class="token comment"># 配置完成后，清理索引缓存;JSONDecodeError 异常可以尝试执行该命令</span>conda config <span class="token parameter variable">--show</span> channels <span class="token comment"># 展示所有镜像源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>用户目录下 .condarc 文件配置</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">channels:  - defaultsshow_channel_urls: truedefault_channels:  - http://mirrors.aliyun.com/anaconda/pkgs/main  - http://mirrors.aliyun.com/anaconda/pkgs/r  - http://mirrors.aliyun.com/anaconda/pkgs/msys2custom_channels:  conda-forge: http://mirrors.aliyun.com/anaconda/cloud  msys2: http://mirrors.aliyun.com/anaconda/cloud  bioconda: http://mirrors.aliyun.com/anaconda/cloud  menpo: http://mirrors.aliyun.com/anaconda/cloud  pytorch: http://mirrors.aliyun.com/anaconda/cloud  simpleitk: http://mirrors.aliyun.com/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检查是否安装成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建一个新的项目环境；后续所有安装都在该环境下进行</li></ul><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">conda create -n chatglm python=3.10 # 创建一个新的环境，需要指定python版本conda env list # 展示所有环境 conda env remove --name chatglmconda activate chatglm # 激活新创建的环境; conda deactivate # 退出当前环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="pytorch">pytorch</h3><ul><li><a href="https://pytorch.org">pytorch</a> # 根据 CUDA 版本选择正确的安装命令; <code>nvidia-smi</code> 查看对应 version</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi <span class="token comment"># 查询显存大小，至少需要4.3G显存(window默认使用 GPU专用内存)</span><span class="token comment"># 当前系统查询出来 CUDA版本为 11.6；前往历史版本下载对应的环境版本</span>conda <span class="token function">install</span> <span class="token assign-left variable">pytorch</span><span class="token operator">==</span><span class="token number">1.13</span>.1 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.14</span>.1 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.13</span>.1 pytorch-cuda<span class="token operator">=</span><span class="token number">11.6</span> <span class="token parameter variable">-c</span> pytorch <span class="token parameter variable">-c</span> nvidia<span class="token comment"># 当conda下载速度过慢，使用pip直接下载</span>pip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">1.13</span>.1+cu116 <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.14</span>.1+cu116 <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">0.13</span>.1 --extra-index-url https://download.pytorch.org/whl/cu116<span class="token comment"># Err:  HTTPSConnectionPool(host='files.pythonhosted.org', port=443): Read timed out</span>pip3 config <span class="token parameter variable">--global</span> <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MinGW">MinGW</h3><ul><li><p>安装 <a href="https://www.mingw-w64.org/downloads/#w64devkit">MinGW</a></p></li><li><p>推荐使用 <a href="https://jmeubank.github.io/tdm-gcc/">TDM-GCC</a> 安装</p></li><li><p>检查是否安装成功</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载并启动-chatGLM-代码">下载并启动 chatGLM 代码</h2><h3 id="下载仓库代码">下载仓库代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:THUDM/ChatGLM-6B.git <span class="token comment"># https://github.com/THUDM/ChatGLM-6B.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载预处理模型">下载预处理模型</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># git submodule add git@hf.co:THUDM/chatglm-6b-int4 ./THUDM/chatglm-6b-int4</span><span class="token comment"># 在项目根目录下创建`THUDM`模型文件夹，同时进入目录克隆模型[注册一个账户配置 ssh 可以下载更快]</span><span class="token function">git</span> clone git@hf.co:THUDM/chatglm-6b-int4 <span class="token comment"># https://huggingface.co/THUDM/chatglm-6b-int4</span><span class="token comment"># git大文件存储工具</span><span class="token function">git</span> lfs <span class="token function">install</span><span class="token builtin class-name">cd</span> chatglm-6b-int4<span class="token comment"># 大文件下载；如果不能下载，前往下方地址手动下载模型置于当前文件夹</span><span class="token function">git</span> lfs pull<span class="token comment"># 如果出现 `Error updating the git index Unable to process path pytorch_model.binUnable to process path pytorch_model.bin`; 尝试执行下面语句</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token comment"># 执行之后重新拉取代码即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://cloud.tsinghua.edu.cn/d/674208019e314311ab5c/">清华大学模型下载地址</a></p><table><thead><tr><th>模型名称</th><th>模型大小</th><th>模型所需GPT与内存</th></tr></thead><tbody><tr><td>chatglm-6b</td><td>12.4g</td><td>最低13G显存，16G内存</td></tr><tr><td>chatglm-6b-int8</td><td>7.2G</td><td>最低8G显存</td></tr><tr><td>chatglm-6b-int4</td><td>3.6G</td><td>最低4.3G显存</td></tr></tbody></table><h3 id="运行web示例demo">运行web示例demo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token parameter variable">--file</span> requirements.txt <span class="token comment"># 提示找不到包时可增加其他镜像源</span><span class="token comment"># 添加清华镜像源</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config <span class="token parameter variable">--show</span> channels<span class="token comment"># pip install -r requirements.txt -i https://mirror.sjtu.edu.cn/pypi/web/simple</span>pip <span class="token function">install</span> mdtex2html torch cpm_kernels <span class="token comment"># 提示找不到包尝试用pip命令安装</span><span class="token comment"># 下载模型文件, 创建`THUDM`文件夹</span><span class="token comment"># 需要更改文件上方模型路径; 原为 `THUDM/chatglm-6b` &gt; `THUDM\chatglm-6b-int4`; win环境下文件分隔符不同</span>python web_demo.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>项目加载模型数据</li></ul><img src="/chatglm/%E9%A1%B9%E7%9B%AE%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B%E6%95%B0%E6%8D%AE.png" class="" title="项目加载模型数据"><h2 id="无GPU部署JittorLLMs">无GPU部署<code>JittorLLMs</code></h2><h3 id="更新jittor环境">更新<code>jittor</code>环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:Jittor/JittorLLMs.git<span class="token builtin class-name">cd</span> JittorLLMsconda create <span class="token parameter variable">-n</span> jittor-chatglm <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span> <span class="token comment"># 新建一个环境尝试简单显存要求</span>conda activate jittor-chatglm<span class="token comment"># -i 指定用jittor的源， -I 强制重装Jittor版torch</span>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token parameter variable">-i</span> https://pypi.jittor.org/simple <span class="token parameter variable">-I</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>requirements.txt 依赖声明如下</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text"># requirements.txtjittor == 1.3.8.5jtorch == 0.1.7torchtorchvision<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署Langchain-Chatchat"><s>部署<code>Langchain-Chatchat</code></s></h2><blockquote><p><code>Langchain-Chatchat</code> 一个基于 <code>chatGLM</code> 的本地知识库实现</p></blockquote><h3 id="下载代码">下载代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:chatchat-space/Langchain-Chatchat.git <span class="token comment"># https://github.com/chatchat-space/Langchain-Chatchat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载模型">下载模型</h3><p>可参考上一节使用<code>git lfs pull</code>进行大文件下载</p><p>以本项目中默认使用的&nbsp;LLM&nbsp;模型&nbsp;<a href="https://huggingface.co/THUDM/chatglm2-6b">THUDM/chatglm2-6b</a>&nbsp;与&nbsp;Embedding&nbsp;模型&nbsp;<a href="https://huggingface.co/moka-ai/m3e-base">moka-ai/m3e-base</a>&nbsp;为例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@hf.co:THUDM/chatglm-6b-int4 <span class="token comment"># https://huggingface.co/THUDM/chatglm-6b-int4</span><span class="token function">git</span> clone git@hf.co:moka-ai/m3e-base <span class="token comment"># https://huggingface.co/moka-ai/m3e-base</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更改配置文件">更改配置文件</h3><p>复制项目文件 <code>./configs/model_config.py.example</code> &gt; ``./configs/model_config.py`</p><p>复制项目文件 <code>./configs/server_config.py.example</code> &gt; ``./configs/model_config.py`</p><h3 id="初始化知识库">初始化知识库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> chatchat <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span> <span class="token comment"># 新的conda环境</span>conda activate chatchatconda <span class="token function">install</span> <span class="token parameter variable">--file</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="其他代码仓库地址">其他代码仓库地址</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:THUDM/ChatGLM2-6B.git <span class="token comment"># https://github.com/THUDM/ChatGLM2-6B # chatGLM 升级内容</span><span class="token function">git</span> clone git@github.com:THUDM/CodeGeeX2.git <span class="token comment"># https://github.com/THUDM/CodeGeeX2 # chatGLM 代码能力加强模型</span><span class="token function">git</span> clone git@hf.co:TMElyralab/lyraChatGLM.git <span class="token comment"># https://huggingface.co/TMElyralab/lyraChatGLM # 对 ChatGLM-6B 进行推理加速，最高可以实现 9000+ tokens/s 的推理速度</span><span class="token function">git</span> clone git@github.com:wangzhaode/ChatGLM-MNN.git <span class="token comment"># https://github.com/wangzhaode/ChatGLM-MNN # 一个基于 MNN 的 ChatGLM-6B C++ 推理实现，支持根据显存大小自动分配计算任务给 GPU 和 CPU</span><span class="token function">git</span> clone git@github.com:Jittor/JittorLLMs.git <span class="token comment"># https://github.com/Jittor/JittorLLMs # 最低3G显存或者没有显卡都可运行 ChatGLM-6B FP16， 支持Linux、windows、Mac部署</span><span class="token function">git</span> clone git@github.com:MegEngine/InferLLM.git <span class="token comment"># https://github.com/MegEngine/InferLLM # 轻量级 C++ 推理，可以实现本地 x86，Arm 处理器上实时聊天，手机上也同样可以实时运行，运行内存只需要 4G</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="名词解释">名词解释</h2><h3 id="NLP">NLP</h3><p>NLP 是自然语言处理（Natural Language Processing）的缩写，本文学习的 transformers 是一种自然语言处理的思想及技术</p><h3 id="Hugging-face">Hugging face</h3><p>Hugging face 起初是一家聊天机器人初创服务商，其在github上开源了 Transformers python 库。<br>还提供了 Trainer （构建和训练自定义模型的框架） 、 Tuning （用于微调预训练模型的库）等库。<br>这些工具和库都使用 Python 编写，并支持多种不同的深度学习框架，如 PyTorch 和 TensorFlow 等。<br>主要目的是为 NLP 社区提供一个统一的框架，便于研究人员和开发人员能够轻松地使用最先进的预训练模型，并将其应用于各种不同的 NLP 任务中。</p><h3 id="PyTorch">PyTorch</h3><p>PyTorch 是一个开源的Python机器学习库，Hugging face很多模型需要前置安装 PyTorch</p><h3 id="Transformer">Transformer</h3><p>Transformer 是 <u>Hugging face</u> 提供的自然语言处理工具库，也是当前比较流行的机器学习工具库。<br>因为NLP通常是多个任务顺序而成，通常使用 <code>transformer</code> 中 <code>pipeline</code> 进行流水线工作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pip 是 python 包管理工具, Python 3.4+ 自带pip工具</span>pip <span class="token function">install</span> <span class="token assign-left variable">transformers</span><span class="token operator">==</span><span class="token number">4.26</span>.1 <span class="token comment"># 安装指定版本</span>pip <span class="token function">install</span> tensorflow<span class="token comment"># 如果你是conda的话</span>conda <span class="token function">install</span> <span class="token parameter variable">-c</span> huggingface transformers  <span class="token comment"># 4.0以后的版本才会有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="requirements-txt">requirements.txt</h3><p>Python项目中必须包含一个 requirements.txt 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip freeze <span class="token operator">&gt;</span> requirements.txt <span class="token comment"># 生成requirements.txt</span>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token comment"># 从requirements.txt安装依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考资料">参考资料</h2><ul><li><a href="https://huggingface.co/models">Hugging face 官方网站</a></li><li><a href="https://zhuanlan.zhihu.com/p/535100411">Huggingface 超详细介绍</a></li><li><a href="https://blog.csdn.net/qq_51116518/article/details/130299417">从零开始的ChatGLM 配置详细教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Huggingface </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGLM </tag>
            
            <tag> Huggingface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postgresql</title>
      <link href="/postgresql/"/>
      <url>/postgresql/</url>
      
        <content type="html"><![CDATA[<h2 id="yum源安装">yum源安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## rpm下载</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm<span class="token comment">## 安装</span><span class="token comment"># sudo yum remove postgresql-server</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> postgresql-server <span class="token comment"># -y 表示自动确认 </span><span class="token comment">## 设置开启自启动</span><span class="token function">sudo</span> /usr/lib/systemd/system/postgresql.service initdb<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> postgresql-<span class="token function">sudo</span> systemctl start postgresql<span class="token comment">## 查看安装是否成功</span><span class="token function">sudo</span> systemctl status postgresql<span class="token comment">## 进入postgresql</span>psql <span class="token parameter variable">-U</span> <span class="token operator">&lt;</span>数据库用户名<span class="token operator">&gt;</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">&gt;</span><span class="token comment"># 如果镜像使用默认配置（如官方镜像）：</span>psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> postgrespsql <span class="token parameter variable">-U</span> postgres <span class="token comment"># 这条语句登录数据库，不需要输入数据库密码，注意U是大写的。</span><span class="token comment">## 查看所有数据库</span>SELECT datname FROM pg_database<span class="token punctuation">;</span><span class="token comment">## 查询数据库中所有表</span>SELECT table_name FROM information_schema.table where table_schema <span class="token operator">=</span> <span class="token string">'maxkb'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-安装-pgvector">docker 安装 pgvector</h2><h3 id="使用自定义Docker镜像（推荐）">使用自定义Docker镜像（推荐）</h3><ol><li>创建Dockerfile</li></ol><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 使用官方PostgreSQL镜像（选择兼容的版本）</span><span class="token instruction"><span class="token keyword">FROM</span> postgres:13</span><span class="token comment"># 安装构建依赖</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; <span class="token operator">\</span>    apt-get install -y build-essential postgresql-server-dev-13 git</span><span class="token comment"># 下载并编译pgvector</span><span class="token instruction"><span class="token keyword">RUN</span> git clone --branch v0.5.1 https://github.com/pgvector/pgvector.git /tmp/pgvector &amp;&amp; <span class="token operator">\</span>    cd /tmp/pgvector &amp;&amp; <span class="token operator">\</span>    make &amp;&amp; <span class="token operator">\</span>    make install &amp;&amp; <span class="token operator">\</span>    rm -rf /tmp/pgvector</span><span class="token comment"># 清理不必要的依赖</span><span class="token instruction"><span class="token keyword">RUN</span> apt-get purge -y --auto-remove build-essential postgresql-server-dev-13 git &amp;&amp; <span class="token operator">\</span>    apt-get clean &amp;&amp; <span class="token operator">\</span>    rm -rf /var/lib/apt/lists/*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>构建镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-postgres-with-pgvector <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>运行容器并启用扩展</li></ol><ul><li>通过初始化脚本自动启用扩展<ul><li>创建 init.sql 文件：</li></ul>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTENSION <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> vector<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行容器时挂载脚本：</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> my-pgvector <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>mysecretpassword <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> ./init.sql:/docker-entrypoint-initdb.d/init.sql <span class="token punctuation">\</span>  <span class="token parameter variable">-d</span> my-postgres-with-pgvector`<span class="token variable"><span class="token variable">`</span>+ 手动启用扩展<span class="token variable">`</span></span>``bash<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-pgvector psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-c</span> <span class="token string">"CREATE EXTENSION vector;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用现有社区镜像（快速）">使用现有社区镜像（快速）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> pgvector <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>Password123@postgres <span class="token parameter variable">-p</span> <span class="token number">5432</span>:5432 <span class="token parameter variable">-v</span> /path/to/docker/postgresql:/var/lib/postgresql/data ankane/pgvector<span class="token comment"># 检查容器是否启动成功</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> pgvector psql <span class="token parameter variable">-U</span> postgres<span class="token comment"># 在psql中执行</span><span class="token punctuation">\</span>dx<span class="token comment"># 或</span>SELECT * FROM pg_extension<span class="token punctuation">;</span><span class="token comment"># 退出容器</span><span class="token punctuation">\</span>q<span class="token comment"># 运行外网连接容器内postgresql  # 该内容不需要，默认外网可连接，密码错误可能是由于旧的配置文件未删除</span><span class="token comment"># 进入容器命令行</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> pgvector <span class="token function">bash</span><span class="token comment"># 备份原网络访问配置</span><span class="token function">cp</span> /var/lib/postgresql/data/pg_hba.conf /var/lib/postgresql/data/pg_hba.conf.bk250411<span class="token comment"># 追加认证规则到 pg_hba.conf</span><span class="token builtin class-name">echo</span> <span class="token string">"host all all 0.0.0.0/0 scram-sha-256"</span> <span class="token operator">&gt;&gt;</span> /var/lib/postgresql/data/pg_hba.conf<span class="token comment"># docker复制容器内文件</span><span class="token function">docker</span> <span class="token function">cp</span> pgvector:/var/lib/postgresql/data/pg_hba.conf pg_hba.conf<span class="token comment"># 退出容器后重新加载配置</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-u</span> postgres pgvector pg_ctl reload <span class="token parameter variable">-D</span> /var/lib/postgresql/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建用户及授权">创建用户及授权</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户并设置密码</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> maxkb <span class="token keyword">WITH</span> PASSWORD <span class="token string">'maxkb'</span><span class="token punctuation">;</span><span class="token comment">-- 创建数据库并指定所有者</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> maxkb OWNER maxkb<span class="token punctuation">;</span><span class="token comment">-- 授予用户数据库权限</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token keyword">DATABASE</span> maxkb <span class="token keyword">TO</span> maxkb<span class="token punctuation">;</span><span class="token comment">-- 查看所有数据库</span>\l<span class="token comment">-- 连接到目标数据库并授予public模式权限</span>\c maxkb<span class="token keyword">GRANT</span> <span class="token keyword">USAGE</span><span class="token punctuation">,</span> <span class="token keyword">CREATE</span> <span class="token keyword">ON</span> <span class="token keyword">SCHEMA</span> <span class="token keyword">public</span> <span class="token keyword">TO</span> maxkb<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">PRIVILEGES</span> <span class="token operator">IN</span> <span class="token keyword">SCHEMA</span> <span class="token keyword">public</span> <span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token keyword">TABLES</span> <span class="token keyword">TO</span> maxkb<span class="token punctuation">;</span><span class="token comment">-- 启用向量扩展</span><span class="token keyword">CREATE</span> EXTENSION vector<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP-Proxy-Servlet</title>
      <link href="/http-proxy-servlet/"/>
      <url>/http-proxy-servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景">应用场景</h2><blockquote><p>外网用户 A , 内网服务器 B (处理用户认证), 和资源提供服务器 C (无用户认证)<br>对于 A 需要访问 C 资源, 且需要保证访问权限控制, 故通过 B 完成接口代理。<br>在其他 A 不能直接访问 C, 但 B 能访问 C 的服务器也能使用该方案处理。</p></blockquote><h2 id="Spring集成HTTP-Proxy-Servlet">Spring集成<code>HTTP-Proxy-Servlet</code></h2><h3 id="maven集成">maven集成</h3><ul><li>最新版本为 2.20.0; jdk8不适用</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mitre.dsmiley.httpproxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>smiley-http-proxy-servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加yml配置">增加yml配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">proxy</span><span class="token punctuation">:</span>  <span class="token key atrule">configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> yozo <span class="token comment"># 唯一标识的路径</span>      <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否打印日志</span>      <span class="token key atrule">servlet</span><span class="token punctuation">:</span> <span class="token comment"># 请求服务地址, 为空时拼接 `/{key}/*`</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>yozosoft.prefix<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性加载">属性加载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token class-name">KmsProxyServletProperty</span><span class="token punctuation">.</span><span class="token constant">PREFIX</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyServletProperty</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">"proxy"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProxyAtom</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProxyAtom</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%sProxyServlet"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 代理唯一标识         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>        <span class="token comment">/**         * 是否开启日志, 默认关闭         */</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> openLog<span class="token punctuation">;</span>        <span class="token comment">/**         * 本地地址(为空时返回 /{key}/*)         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Proxy key must be config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"/%s/*"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> location<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 代理转发的地址         */</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表代理批量增加">列表代理批量增加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyServletConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ProxyServletProperty</span> property<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span><span class="token function">getConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">ServletRegistration</span> initServlet <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ProxyServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            initServlet<span class="token punctuation">.</span><span class="token function">setInitParameter</span><span class="token punctuation">(</span><span class="token class-name">ProxyServlet</span><span class="token punctuation">.</span><span class="token constant">P_TARGET_URI</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            initServlet<span class="token punctuation">.</span><span class="token function">setInitParameter</span><span class="token punctuation">(</span><span class="token class-name">ProxyServlet</span><span class="token punctuation">.</span><span class="token constant">P_LOG</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isOpenLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            initServlet<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考链接">参考链接</h2><ul><li><a href="https://gitcode.net/mirrors/mitre/HTTP-Proxy-Servlet">HTTP-Proxy-Servlet GitHub</a></li><li><a href="https://blog.csdn.net/qq_36256590/article/details/129710798">HTTP-Proxy-Servlet 集成文档</a></li><li><a href="https://blog.csdn.net/zoeou/article/details/126967315">HTTP-Proxy-Servlet 注册多个代理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
          <category> Proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy</title>
      <link href="/proxy/"/>
      <url>/proxy/</url>
      
        <content type="html"><![CDATA[<p>HTTP代理软件是指可以将客户端的HTTP请求转发给目标服务器，并将服务器的响应返回给客户端的软件。</p><h2 id="正向代理-Forward-Proxy">正向代理 (Forward Proxy)</h2><p>正向代理是最常见的代理类型，它充当客户端和服务器之间的中间人。</p><p>客户端将请求发送到代理服务器，代理服务器会将请求转发给服务器，并将服务器响应返回给客户端。</p><p>正向代理常用于绕过网络访问限制和保护客户端隐私。</p><p>一些常见的正向代理软件包括Squid、Privoxy、Polipo等。</p><h2 id="反向代理-Reverse-Proxy">反向代理 (Reverse Proxy)</h2><p>反向代理是位于服务器端的代理服务器，充当服务器和客户端之间的中间人。</p><p>当客户端向服务器发送请求时，反向代理会将请求转发到真正的服务器，然后将服务器的响应返回给客户端。</p><p>反向代理通常用于负载均衡、缓存加速和网络安全。</p><p>一些常见的反向代理软件包括<a href="/nginx">Nginx</a>、HAProxy、Apache等。</p><p>👉 用<a href="/http-proxy-servlet">HTTP-Proxy-Servlet</a>实现反向代理</p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
          <category> Proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
            <tag> 正向代理 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal</title>
      <link href="/threadlocal/"/>
      <url>/threadlocal/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring请求的一次性缓存">Spring请求的一次性缓存</h3><p>Spring项目中部分参数配置不想通过接口层层传入, 使用一次性缓存在本次请求中全局共用这些缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextCacheHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOCAL_CACHE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Stream-并行流使用一次性缓存失败">Stream 并行流使用一次性缓存失败</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">keys<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token comment">// dosometing )</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>[参考链接] <a href="https://blog.csdn.net/Laugh_xiaoao/article/details/122521584">https://blog.csdn.net/Laugh_xiaoao/article/details/122521584</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序组件</title>
      <link href="/wechat-components/"/>
      <url>/wechat-components/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序使用NPM加载组件">微信小程序使用NPM加载组件</h2><h2 id="气泡弹出框">气泡弹出框</h2><p><a href="https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806">https://developers.weixin.qq.com/community/develop/doc/000e4e7103c3c090e517e0cdb5b806</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:byk04712/weapp-popover.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> WeChat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins</title>
      <link href="/jenkins/"/>
      <url>/jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="更改jenkins默认工作目录">更改jenkins默认工作目录</h2><blockquote><p>查看jenkins默认工作目录</p></blockquote><ul><li>Manage Jenkins &gt; System Configuration(系统配置) &gt; 主目录<code>/root/.jenkins</code></li></ul><blockquote><p>更改jenkins默认工作目录</p></blockquote><ol><li>本项目使用tomcat部署, 停用tomcat</li><li>更改系统全局参数<code>JENKINS_HOME</code>到新地址(更改前将原来的主目录复制到新目录)</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile <span class="token comment"># 修改系统环境变量</span><span class="token comment"># 文件中新增一条jenkins环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JENKINS_HOME</span><span class="token operator">=</span>/data/jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重启tomcat(jenkins重启)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接工具对比分析</title>
      <link href="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/"/>
      <url>/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="DBeaver-推荐">DBeaver(推荐)</h2><ul><li>是否免费: 免费开源社区版 及 商业版</li><li>下载地址: <a href="https://dbeaver.io">https://dbeaver.io</a></li><li>支持数据库<ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>SQLite</li><li>SQL Server</li><li>MariaDB</li><li>DB2 LUW</li><li>DuckDB</li><li>Apache Hive</li><li>DM: 使用JDBC连接设置可以连接达梦数据库! <a href="https://blog.csdn.net/u012063422/article/details/123759444">使用手册</a></li><li>MongoDB、Redis 为商业版支持的数据库连接</li><li>商业版支持更多 NoSQL 数据库 及 更多其他连接数据库</li></ul></li><li>其他常用功能<ul><li>支持导入navicat数据库连接(密码需要重新输入、各类连接分别单独导入)</li><li>数据库结构比较</li><li>数据库（结构 &amp; 数据）导入导出</li><li>ER 图、模拟数据生成(商业版本)</li><li><s>无数据传输功能</s></li><li>数据库仪表盘(traffic、InnoDB data、Queries、Server sessions)</li></ul></li><li>其他特点或问题<ul><li>第一次连接新数据库类型时会自动下载对应的驱动</li></ul></li><li>评价: 功能丰富，数据库连接可扩展性好(使用jdbc连接方便)</li><li>应用截图</li></ul><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/DBeaver-%E8%A1%A8%E7%BB%93%E6%9E%84.png" class=""><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/DBeaver-ER.png" class=""><h3 id="DBeaver查看本地保存密码">DBeaver查看本地保存密码</h3><ul><li>存储文件位置 <code>首选项 &gt; 常规 &gt; 工作空间</code></li><li>找到加密文件 <code>&lt;workspace&gt;\General\.dbeaver\credentials-config.json</code></li><li>解密数据<ul><li>-K 参数参考源码 <code>https://github.com/dbeaver/dbeaver/blob/6.3.5/plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/app/DefaultSecureStorage.java</code></li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl aes-128-cbc <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-K</span> babb4a9f774ab853c96c2d653dfe544a <span class="token punctuation">\</span>  <span class="token parameter variable">-iv</span> 00000000000000000000000000000000 <span class="token punctuation">\</span>  <span class="token parameter variable">-in</span> credentials-config.json <span class="token operator">|</span> <span class="token punctuation">\</span>  <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">16</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DataGrip">DataGrip</h2><ul><li>是否免费: jetbrains系列商业软件</li><li>下载地址: <a href="https://www.jetbrains.com/datagrip/download/other.html">https://www.jetbrains.com/datagrip/download/other.html</a></li><li>支持数据库<ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>SQLite</li><li>SQL Server</li><li>MariaDB</li><li>MongoDB</li><li>Apache Hive</li><li>DM: 使用JDBC连接设置可以连接达梦数据库! <a href="https://wangjueya.github.io/datagrip-lian-jie-da-meng-shu-ju-ku">使用手册</a></li><li><strong>elasticsearch</strong></li></ul></li><li>其他常用功能<ul><li>数据库结构比较(UI美观)</li><li>数据库（结构 &amp; 数据）导入导出</li><li>模型映射 Diagrams Show Visualization</li></ul></li><li>其他特点或问题<ul><li>提供多数据库驱动</li><li>拥有智能的上下文敏感和编码语法提示</li><li>拥有可视化的表格编辑，你可以添加、删除、编辑和克隆数据行</li><li>提供版本控制支持</li><li>重构支持（主要是会给你SQL优化的建议，使你能够重构sql）</li><li>内存占用过大、安装包过大</li><li>第一次连接新数据库类型时会自动下载对应的驱动</li><li>没有可视化表结构设计，偏向编码式表结构修改 - 无数据库字段提示</li></ul></li><li>评价: 功能丰富多样, 不够轻量</li><li>应用截图</li></ul><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/DataGrip-Diagrams.png" class=""><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/DataGrip-DDL.png" class=""><h2 id="Navicat-Premium">Navicat Premium</h2><ul><li>是否免费: 仅免费试用期</li><li>下载地址: <a href="http://www.navicat.com.cn/download/navicat-premium">http://www.navicat.com.cn/download/navicat-premium</a></li><li>支持数据库<ul><li>MySQL</li><li>PostgreSQL</li><li>Oracle</li><li>SQLite</li><li>SQL Server</li><li>MariaDB</li><li>MongoDB</li><li><s>DM</s></li><li>其他常用云数据库(Amazon AWS、Oracle Cloud、Microsoft Azure、MongoDB Cloud Services、阿里云、腾讯云、华为云)</li></ul></li><li>其他常用功能<ul><li>数据传输、数据同步</li><li>数据库（结构 &amp; 数据）导入导出</li><li>模型设计 &amp; 逆向表到模型</li></ul></li><li>评价: 界面简单，功能强大，使用方便</li><li>应用截图</li></ul><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/Navicat-Premium.png" class=""><h2 id="HeiDiSQL">HeiDiSQL</h2><ul><li>是否免费: 免费使用</li><li>下载地址: <a href="https://www.heidisql.com/download.php">https://www.heidisql.com/download.php</a></li><li>支持数据库<ul><li>Mysql</li><li>ProxySQL Admin</li><li>SQL Server</li><li>PostgreSQL</li><li>SQLite</li><li>Firebird</li></ul></li><li>其他特点或问题<ul><li>用户量少，社区不活跃</li></ul></li><li>评价: 功能较少，比较轻量</li><li>应用截图</li></ul><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/HeidiSQL.png" class=""><h2 id="phpMyAdmin"><s>phpMyAdmin</s></h2><ul><li>是否免费: 免费使用</li><li>下载地址: <a href="https://www.phpmyadmin.net">https://www.phpmyadmin.net</a></li><li>支持数据库<ul><li>关系型数据库</li></ul></li><li>其他特点或问题<ul><li>通过网页操作数据库</li></ul></li><li>评价: 开发应用性不高</li><li>应用截图</li></ul><img src="/shu-ju-ku-lian-jie-gong-ju-dui-bi-fen-xi/phpMyAdmin.png" class=""><h2 id="数据库测试地址">数据库测试地址</h2><table><thead><tr><th>名称</th><th>连接池地址</th><th>用户名</th></tr></thead><tbody><tr><td>mysql</td><td>jdbc:mysql://192.168.100.38:3306/zh-boot-vuet</td><td>root</td></tr><tr><td>oracle</td><td>jdbc:oracle:thin:@<a href="//192.168.103.200:1521/szp6">//192.168.103.200:1521/szp6</a></td><td>ZHBOOT_VUE_DEV</td></tr><tr><td>postgres</td><td>jdbc:postgresql://192.168.100.21:5432/test_db</td><td>test_user</td></tr><tr><td>MongoDB</td><td>jdbc:mongodb://192.168.100.21:27017/yushan</td><td>yushan</td></tr><tr><td>DM</td><td>jdbc:dm://192.168.103.116:5236/JYCK_MANAGER</td><td>JYCK_MANAGER</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataGrip连接达梦数据库</title>
      <link href="/datagrip-lian-jie-da-meng-shu-ju-ku/"/>
      <url>/datagrip-lian-jie-da-meng-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="a-准备达梦驱动">a. 准备达梦驱动</h2><ul><li>可从maven本地仓库中获取</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.dameng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>DmJdbcDriver18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${dm-jdbc-driver.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="b-新建一个驱动">b. 新建一个驱动</h2><img src="/datagrip-lian-jie-da-meng-shu-ju-ku/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A9%B1%E5%8A%A8.png" class="" title="新建一个驱动"><h2 id="c-导入驱动需要的jar包">c. 导入驱动需要的jar包</h2><img src="/datagrip-lian-jie-da-meng-shu-ju-ku/%E5%AF%BC%E5%85%A5jar%E5%8C%85.png" class="" title="导入jar包"><h2 id="d-新建数据库连接">d. 新建数据库连接</h2><img src="/datagrip-lian-jie-da-meng-shu-ju-ku/%E6%96%B0%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5.png" class="" title="新建数据库连接">]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> DataGrip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | 入门及进阶使用</title>
      <link href="/java/"/>
      <url>/java/</url>
      
        <content type="html"><![CDATA[<h2 id="使用文档">使用文档</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/index.html">官方文档</a></li></ul><p>java字符串动态加载调用<br><a href="https://blog.csdn.net/qq_30436011/article/details/126461448">https://blog.csdn.net/qq_30436011/article/details/126461448</a></p>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常识判断 | 国家公务员招录考试</title>
      <link href="/chang-shi-pan-duan/"/>
      <url>/chang-shi-pan-duan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>语言理解与表达 | 国家公务员招录考试</title>
      <link href="/yu-yan-li-jie-yu-biao-da/"/>
      <url>/yu-yan-li-jie-yu-biao-da/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑填空">逻辑填空</h2><h3 id="实词">实词</h3><table><tbody><tr><th colspan="2">辨析角度</th><th>示例</th></tr><tr><td rowspan="3">实词的意义</td><td>词义的侧重点</td><td>暗淡 VS 黯淡<br>”暗淡”侧重光线不明亮。”黯淡”侧重心情不明朗</td></tr><tr><td>词义的轻重程度</td><td>轻视 VS 蔑视<br>两词都有小看的意思，”轻视”程度较轻，”蔑视”程度较重</td></tr><tr><td>词语的适用对象</td><td>启用 VS 起用<br>”启用”指开始使用。其适用对象为物。<br>”起用”指提拔任用;重新任用已退职其被免职的官员或职员。其适用对象为人</td></tr><tr><td rowspan="3">实词的色彩</td><td>词语的感情色彩</td><td>果断 VS 武断<br>”果断"指决断、不犹豫。含褒义。<br>”武断”指只凭主观做判断;言行主观片面。含贬义。</td></tr><tr><td>词语的语体色彩</td><td>商量 VS 商榷<br>”商量”和”商榷”都有讨论、计划之意，”商量”多用于口语，”商榷”多用于书面语</td></tr><tr><td>词语的形象色彩</td><td>哭泣 VS 哽咽<br>”哭泣”和”哽咽"为同义词，”哽咽”再现了哭过时声气阻塞的情景，具有形象色彩</td></tr><tr><td rowspan="2">实词的用法</td><td>词语的习惯搭配</td><td>改进 VS 改善<br>”改进”常与”工作””方法”技术”等搭配<br>”改善”常与”关系””条件””生活”等搭配</td></tr><tr><td>词语的语法功能</td><td>①”的”字后接的一般是名词，宾语应是名词或名词性成分<br>②修饰名词的应是形容词,用来做定语<br>③修饰动词的可以是形容词也可以是副词，用来做状语</td></tr></tbody></table><h3 id="成语">成语</h3><p>成语是逻辑填空考查的又一大重点。成语的考查主要涉及八大错误类型，分别为望文生义、褒贬误用、张冠李戴、谦敬错位、轻重失度、侧重失当、语法错误、重复赘余。具体如下表所示：</p><table><thead><tr><th style="text-align:center">错误类型</th><th style="text-align:center">定义</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">望文生义</td><td style="text-align:center">望文生义指不了解某一成语的确切含义，只牵强附会地从字面上去理解，做出错误的或片面的解释的现象</td><td style="text-align:left">”不刊之论”<br>错误理解：不能刊登的言论<br>正确词义：正确的、不可修改的言论</td></tr><tr><td style="text-align:center">褒贬误用</td><td style="text-align:center">褒贬误用是基于成语感情色彩的一个设错陷阱。成语的感情色彩分为褒义、贬义、中性三种</td><td style="text-align:left">字斟句酌 VS 咬文嚼宇<br>两词都有遣词用字谨慎的意思<br>”字斟句酌”指慎重用词。含褒义<br>”咬文嚼字”意为过分地斟酌宇句，多指死抠字眼而不注重精神实质。含贬义</td></tr><tr><td style="text-align:center">张冠李戴</td><td style="text-align:center">张冠李戴指成语自身的适用对象与文段中被陈述的对象不符的现象</td><td style="text-align:left">罄竹难书 VS 汗牛充栋<br>两词都有多的意思<br>”罄竹难书”形容罪行多得写不完<br>”汗牛充栋”形容藏书非常多</td></tr><tr><td style="text-align:center">谦敬错位</td><td style="text-align:center">谦敬错位指把谦辞、敬辞用错了场合或对象的现象</td><td style="text-align:left">一孔之见 VS 不吝赐教<br>两词都用于讨论中的发表意见<br>”一孔之见”比喻狭隘片面的见解。是谦辞，用于自己<br>”不吝赐教”意为不吝惜指点教导。是敬辞，用于请教别人意见</td></tr><tr><td style="text-align:center">轻重失度</td><td style="text-align:center">轻重失度指没有根据特定语境选择轻重适度的成语</td><td style="text-align:left">无可厚非 VS 无可非议<br>两词都有不要批评之意<br>”无可厚非”指说话做事虽有缺点，但还有可取之处,应子谅解。程度较轻<br>”无可非议”指没有什么可以指责的，表示做得妥当。程度较重</td></tr><tr><td style="text-align:center">侧重失当</td><td style="text-align:center">侧重失当指成语的侧重点与句意不符而使用不当的现象</td><td style="text-align:left">义不容辞 VS 责无旁贷<br>两词都有不可推卸之意<br>”义不容辞”侧重道义上不允许推卸<br>”责无旁货”侧重责任上不可推卸</td></tr><tr><td style="text-align:center">语法错误</td><td style="text-align:center">语法错误指只关注词义而忽略成语的语法功能，导致填入成语与语境不符的现象</td><td style="text-align:left">当务之急 VS 迫在眉睫<br>两词都有情势紧急之意<br>”当务之急“是名词性成语，需要与”是”连用，”当务之急是……”“……是当务之急”<br>“迫在眉睫”是形容词性成语，本身可以做谓语，不能与”是”连用</td></tr><tr><td style="text-align:center">重复赘余</td><td style="text-align:center">重复赘余指使用的成语含义与句子部分语义存在重叠的现象</td><td style="text-align:left">”忍俊不禁”已含有发笑的意思,不能再说”忍俊不禁地笑了”<br>”贻笑大方”指让内行人笑话，已含有”让人”之意，不能再说”让人贻笑大方“<br>”势如破竹”词义中含有”如破竹”比喻的成分，不能再与比喻词搭配</td></tr></tbody></table><h3 id="关联词">关联词</h3><p>关联词在逻辑填空题中考查相对较少,下表是关联词的八大关系：</p><table><thead><tr><th style="text-align:center">复句类型</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:center">并列关系</td><td style="text-align:left">并列关系复句的几个分句往往分别述说有关联性的几件事，或是一件事的几个方面，撇开语用安排或表述重心，前后分句的顺序往往可以调换。常见的并列关系复句包括平列式并列和对照式并列两种</td></tr><tr><td style="text-align:center">承接关系</td><td style="text-align:left">承接关系复句的几个分句述说连续动作或接连发生的几件事情，分句之间有先后顺序,语序不能任意颠倒</td></tr><tr><td style="text-align:center">递进关系</td><td style="text-align:left">递进关系复句，是后一个分句比前一个分句在意义上更进一层，这“更进一层"的意义往往体现在程度、数量时间、范围等方面，分句的顺序较为固定</td></tr><tr><td style="text-align:center">选择关系</td><td style="text-align:left">选择关系复句，是几个分句分别叙述两种或两种以上的情况，以供人选择或取舍。按选择的类型或关联词语的不同，可以把选择关系复句分为两类:取舍未定的选择和取舍已定的选择</td></tr><tr><td style="text-align:center">转折关系</td><td style="text-align:left">转折关系复句是主句不顺着从句的意思,而是跟从句的意思相反或相对。一般来说，从句在前,主句在后，前后分句在语意上是由一个方向转向了另一个方向，也就是说后一分句在语意上对前一分句有所转折</td></tr><tr><td style="text-align:center">假设关系</td><td style="text-align:left">假设关系复句，即从句提出一种假设的条件，主句说明在这种假设条件成立下产生的结果。两个分句之间是一种假定的条件与结果的关系。常见的假设关系复句包括两种：一致假设和让步假设</td></tr><tr><td style="text-align:center">条件关系</td><td style="text-align:left">条件关系复句，是前一个分句提出一个条件,后一个分句说明这个条件一旦实现所要产生的结果。条件关系复句可分为三种类型：充分条件、必要条件 、无条件</td></tr><tr><td style="text-align:center">因果关系</td><td style="text-align:left">分句间存在原因与结果关系的复句是因果关系复句。常见的因果关系复句包括两种：说明因果和推论因果</td></tr></tbody></table><h2 id="阅读理解">阅读理解</h2><h3 id="主旨归纳">主旨归纳</h3><h3 id="细节判断">细节判断</h3><h3 id="标题添加">标题添加</h3><h3 id="词句理解">词句理解</h3><h3 id="推断下文">推断下文</h3><h3 id="寓意理解">寓意理解</h3><h3 id="文章阅读">文章阅读</h3><h2 id="词句表达">词句表达</h2><h3 id="语句排序">语句排序</h3><p>解答语句排序题可以从首尾句、关联词、指代词、逻辑顺序及承启关系五个方面人手。具体如下表所示</p><table><thead><tr><th style="text-align:center">解题思路</th><th style="text-align:left">技巧点拨</th></tr></thead><tbody><tr><td style="text-align:center">根据首尾句</td><td style="text-align:left">文段首句一般不含指代不明的代词,据此可排除首句含有指代词句子的选项<br>文段首句一般是引论性的内容，而句尾多为结论性的内容，可据此选定首句或尾句</td></tr><tr><td style="text-align:center">根据关联词</td><td style="text-align:left">根据关联词的搭配习惯及搭配对象，以确定含有成对关联词的两个句子的顺序<br>单独使用的关联词，可通过句意间的逻辑关系确定句子的前后顺序</td></tr><tr><td style="text-align:center">根据指代词</td><td style="text-align:left">指代词一般跟在指代对象之后,可根据指代词确定其前面句子的肉容<br>指代词有近指、远指之分，可据此确定相关句子的内容和顺序</td></tr><tr><td style="text-align:center">根据逻辑顺序</td><td style="text-align:left">时间顺序：可根据含有时间词的句子来确定几个句子的前后顺序<br>事物发展顺序：对句子进行排序时，应遵循事物发展的规律及先后顺序</td></tr><tr><td style="text-align:center">根据承启关系</td><td style="text-align:left">顶真手法的运用、前后句内容的相关及前后句句式的一致，是判断句子间承启关系的标志</td></tr></tbody></table><h3 id="语句填充">语句填充</h3><h3 id="病句辦析">病句辦析</h3><h3 id="标点使用">标点使用</h3><h3 id="修辞运用">修辞运用</h3><h3 id="句法结构">句法结构</h3>]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>申论 | 国家公务员招录考试</title>
      <link href="/shen-lun/"/>
      <url>/shen-lun/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>资料分析 | 国家公务员招录考试</title>
      <link href="/zi-liao-fen-xi/"/>
      <url>/zi-liao-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="文字材料">文字材料</h2><p>文字材科是用陈述的方式将一系列相关信息罗列出来，主要考查考生对一段统计性资料的综合分析和加工能力。文字型资料分析题难度相对较大，主要表现在：</p><ul><li>(1)文字陷阱性————文字中的细节、伏笔，有些文字陷阱会误导考生做出错误的选择。</li><li>(2)数据隐蔽性————众多数据都隐藏在陈述中，考生要具备快速准确地把握字里行间包含的各种数量关系和逻辑关系，将数据逐一找出，并能将相关数据串联起来的分析能力。</li></ul><p>关键词定位法主要适用于文字材料的信息提取。文字材料包含的信息量很大，以致在寻找某些信息时耗时较长。要实战解题应注意以下两点：</p><ul><li>(1)速览材料：答题之前，切忌逐字逐句地全面阅读，只需对材料内容有一个印象即可，对于关键词可以适当标记。</li><li>(2)精确定位：答题开始，根据题干内容，确定题目要求的是什么？是什么时间的？ 带着“主体“”时间”两大要素精确定位数据。一般在和增长相关的概念考查中，会涉及“时间”要素。</li></ul><p>关键词定位法的具体步骤如下图所示：</p><ul><li>① 解读题干，根据题干关键词定位材料相关位置</li><li>② 特殊名词的标注和分析</li><li>③ 返回材料查找数据 -&gt; 确定材料结构及标注关键词</li><li>④ 排除干扰项</li><li>⑤ 选出正确答案</li></ul><p>文字材料格式类型分为两类，即分段型和未分段型，不同的材料类型其关键词的标注要点略有不同。</p><p><strong>关键词标注要点</strong><br>分段型：首段的首、尾句；每段首句；时间关键词<br>未分段型：每向的句首；表示总分关系的“其中”后相关内容；时间关键词</p><h2 id="表格材料">表格材料</h2><p>表格材料是把获得的数字材料，经过汇总整理后，按一定的顺序列在表格之内得到的材料。表格由标题(包括单位)、横标目、纵标目、表格数据和注释等构成。表格数据在横标目和纵标目的交叉处获得，它是对横标目、纵标目两方面信息结合起来的描述。具体内容见下表。</p><table><thead><tr><th style="text-align:center">材料类型</th><th style="text-align:center">阅读技巧</th><th style="text-align:center">具体分类</th><th style="text-align:left">材料特点</th></tr></thead><tbody><tr><td style="text-align:center">表格型</td><td style="text-align:center">表格交叉项法</td><td style="text-align:center">一级标目</td><td style="text-align:left">具有直观、一目了然的特点，简单的 m 行 n 列表格，反映的数据关系比较单一</td></tr><tr><td style="text-align:center">表格型</td><td style="text-align:center">表格交叉项法</td><td style="text-align:center">二级标目</td><td style="text-align:left">横(纵)标目包括两级子标目，内部的数据关系较为复杂</td></tr><tr><td style="text-align:center">表格型</td><td style="text-align:center">表格交叉项法</td><td style="text-align:center">三级标目</td><td style="text-align:left">横(纵)标目包括三级子标目，数据关系复杂，计算时要注意理清各个子标目反映的数据间的关系</td></tr></tbody></table><p>表格材料解题步骤</p><ul><li>第一步，快速浏览表格的横标目、纵标目(明确给出的含义是累计量还是现期量，是总量还是分量，是否存在多级标目等，注意把握其中的逻辑关系)，表格中的大量具体数据略读或不读。</li><li>第二步，阅读题干，结合题干的选项，返回表格查找数据(表格数据较多且复杂时，为避免找错可带直尺或三角板加以参照)。</li><li>第三步，准确列式后，根据选项特点选择合适的技巧进行快速计算。</li></ul><h2 id="图形材料">图形材料</h2><p>图形材料具有形象直观、通俗易懂、便于比较等显著特点，在资料分析中考查频率较高。<br>常见的图形材料一般有以下几种：</p><table><thead><tr><th style="text-align:center">材料类型</th><th style="text-align:center">阅读技巧</th><th style="text-align:center">具体分类</th><th style="text-align:left">材料特点</th></tr></thead><tbody><tr><td style="text-align:center">图形材料</td><td style="text-align:center">图形要点抽取法</td><td style="text-align:center">条形图</td><td style="text-align:left">条形的长短代表数量的大小，用于表示离散型数据材料</td></tr><tr><td style="text-align:center">图形材料</td><td style="text-align:center">图形要点抽取法</td><td style="text-align:center">扇形图</td><td style="text-align:left">表示的是各部分数量同总数之间的关系，分为比重扇形图和具体数量扇形图</td></tr><tr><td style="text-align:center">图形材料</td><td style="text-align:center">图形要点抽取法</td><td style="text-align:center">折线图</td><td style="text-align:left">利用曲线的连续变化来反映事物动态变化的图形，能够显示数据的变化趋势，反映事物的变化情况</td></tr><tr><td style="text-align:center">图形材料</td><td style="text-align:center">图形要点抽取法</td><td style="text-align:center">复合图</td><td style="text-align:left">图形中集合了条形和折线两种形式，条形表示各分类的数量，折线表示各分类的相对变化</td></tr><tr><td style="text-align:center">图形材料</td><td style="text-align:center">图形要点抽取法</td><td style="text-align:center">混合图</td><td style="text-align:left">包括基本图形两种或以上图形类型的材料形式，需要将不同类型的图形联系起来综合了解，才能正确地理解材料内容，回答给出的问题</td></tr></tbody></table><p>  解题关键是针对不同的图形类型从不同的要点入手，在最短的时间内抓住材料的一些关键信息，例如：扇形图主要提取标题、图注信息；条形图、折线图重点关注横纵坐标等。<br>  图形要点抽取、题干的正确解读、题干信息在材料中的快速准确定位和技巧的熟练准确运用是阅读图形材料的重点和难点。</p><p>图形材料的常规解题思路：</p><ul><li>(1) 快速浏览图形，弄懂其标题、横坐标(单位)、纵坐标(单位)和图注等所代表的意义，再根据题目定位到相应的横、纵坐标和图注，获得相应的数据。</li><li>(2) 读图时，最好带着题干的问题去读，注意摘取与试题有关的重要信息。这样一方面有利于对资料的理解，另一方面也可以减少答题时重复看图的时间。</li><li>(3) 适当采用“排除法”。统计图分析题目的备选答案，通常有一两项是迷惑性不强或极易排除的，通过图中反映出的定性结论就可以排除;在进行计算时，通过比较数值大小、位数等可排除迷惑选项。</li></ul><p>除了上述常见图形以外，还包括以下几种特殊类型的图形，考生对这些类型的图形材料的特点要有所了解，防患于未然。</p><h3 id="1-网状统计图">1.网状统计图</h3><p>  网状统计图一般由三组斜线组成，各组分别代表一种事物。资料分析中的网状图是以三角形的顶角为 100%，以对顶角的底边为 0% 来分析的，从各自的顶端向下面走，分布率就从 100% 不断向下降，即用一个网状表示某个对象在三个方面的分布情况。<br>  图中没有明确的数据，只有一些宇母，这些字母代表的意义一定要弄清楚。网状图表面上看似很复杂，但是它没有复杂计算，只要掌握其特点，解题相对比较容易。</p><h3 id="2-三维图">2.三维图</h3><p>  三维图相对于平面图来说，很明显地增大了该图的难度，主要考查考生对立体图形的感知能力和解读能力，这种图形能更加直观的反映出有三种指标限制的数据的大小，所以越来越多地被统计部门所采用。</p><h3 id="3-螺旋图">3.螺旋图</h3><p>  螺旋图有另外一个非常美丽的名字，叫作玫瑰图，看上去很难找到头绪，其实只要找到图形的切人点就很容易解读了。螺旋图是折线图的变体。</p><h3 id="4-洛伦兹曲线图">4.洛伦兹曲线图</h3><p>  洛伦兹曲线用于比较和分析一个国家在不同时代或者不同国家在同一时代的财富不平等程度，该曲线作为一个总结收入和财富分配信息的便利的图形方法得到广泛的应用。图中横轴表示人口(按收入由低到高分组)的累积百分比，纵轴表示收入的累积百分比，孤线为洛伦兹曲线，弧线弯曲程度越大，收人分配越不平等，反之亦然。</p><h2 id="综合材料">综合材料</h2><p>综合材料指统计材料当中包括文字、统计表和统计图当中的两种或者两种以上。一般来说，综合材料中的文字部分具有一个中心含义，给出概述性的表达；统计表相对具休，数据清晰；统计图具有直观性，适合定性描述。具体分析如下：</p><table><thead><tr><th style="text-align:center">材料类型</th><th style="text-align:center">阅读技巧</th><th style="text-align:center">具体分类</th><th style="text-align:left">材料特点</th></tr></thead><tbody><tr><td style="text-align:center">综合型</td><td style="text-align:center">综合分析法</td><td style="text-align:center">文字+表格<br>文字+图形<br>图形+表格<br>文字+图形＋表格</td><td style="text-align:left">可以单独从某一个材料命题考查，也可以几个材料结合起来命题考查，<br>主要是要求熟练掌握文字、表格、图形三种基本形式，<br>并熟悉它们的内在联系，熟练快速地进行切换</td></tr></tbody></table><p>在本专项中，要求考生掌握以下几点：</p><ul><li>(1)熟练掌握文字型、图形型、表格型三种材料的查找数据的方法，并逐步将这些方法使用变成习惯，确保在答题时不受材料类型混合的影响。</li><li>(2)熟悉不同类型材料的常见考点设置方式，并了解不同考点的联合设置考查。</li><li>(3)加强对各类综合型材料的了解，并通过练习提高解题速度和对题目的敏感度。</li><li>(4)综合材料的重点和难点是快速理清材料要点，根据它们的特点悉心解读不同标识、图形、表格等的含义，以及材料彼此之间的内在联系、提取综合材料信息。</li><li>(5)注意速算技巧的应用。常用技巧包括尾数法、首数法、有效数字法、同位比较法、错位加减法等，结合题目细细体会计算技巧和概念正确理解的重要性，注感实际做题时对计算技巧使用的训练。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断推理 | 国家公务员招录考试</title>
      <link href="/pan-duan-tui-li/"/>
      <url>/pan-duan-tui-li/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑判断">逻辑判断</h2><h3 id="直言命题及其推理">直言命题及其推理</h3><h4 id="1-概念及其关系">1.概念及其关系</h4><p>通过画图的方式, 可以得到直言命题主项与谓项间(概念间)的相互关系。在考试中, 也可以利用文氏图来解题。相关知识点如下所示:</p><table><thead><tr><th>命题</th><th style="text-align:center">A 全同 B</th><th style="text-align:center">A 真包含于 B</th><th style="text-align:center">A 真包含 B</th><th style="text-align:center">A 交叉 B</th><th style="text-align:center">A 全异 B</th></tr></thead><tbody><tr><td>全称肯定命题(所有 A是B)</td><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">假</td></tr><tr><td>全称否定命题(所有A不是B)</td><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">真</td></tr><tr><td>特称肯定命题(有的 A是 B)</td><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">假</td></tr><tr><td>特称否定命题(有的 A不是 B)</td><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">真</td></tr></tbody></table><h4 id="2-变形推理">2.变形推理</h4><p>变形推理相关知识点如下所示</p><table><thead><tr><th style="text-align:center">变形推理</th><th>变形推理前</th><th>变形推理后</th></tr></thead><tbody><tr><td style="text-align:center">换质推理</td><td>所有 A 是 B</td><td>所有 A 不是非 B</td></tr><tr><td style="text-align:center">换质推理</td><td>所有 A 不是 B</td><td>所有 A 是非 B</td></tr><tr><td style="text-align:center">换质推理</td><td>有些 A 是 B</td><td>有些 A 不是非 B</td></tr><tr><td style="text-align:center">换质推理</td><td>有些 A 不是 B</td><td>有些 A 是非 B</td></tr><tr><td style="text-align:center">换位推理</td><td>所有 A 是 B</td><td>有些 B 是 A</td></tr><tr><td style="text-align:center">换位推理</td><td>所有 A 不是 B</td><td>所有 B 不是 A</td></tr><tr><td style="text-align:center">换位推理</td><td>有些 A 是 B</td><td>有些 B 是 A</td></tr><tr><td style="text-align:center">换位推理</td><td>有些 A 不是 B</td><td>-</td></tr></tbody></table><h4 id="3-周延性">3.周延性</h4><p>量项是全称的则主项周延, 量项是特称的则主项不周延。</p><p>联项是否定的则谓项周延, 联项是肯定的则谓项不周延。</p><h4 id="4-对当关系">4.对当关系</h4><p>对当关系即直言命题之间的相互制约关系, 主要包括以下四种:</p><table><thead><tr><th style="text-align:center">对当关系</th><th>命题</th><th style="text-align:center">特点</th></tr></thead><tbody><tr><td style="text-align:center">矛盾关系</td><td>“所有 A 都是 B” 与 “有些 A 不是 B”</td><td style="text-align:center">必有一真一假</td></tr><tr><td style="text-align:center">矛盾关系</td><td>“所有 A 都不是 B” 与 “有些 A 是 B”</td><td style="text-align:center">必有一真一假</td></tr><tr><td style="text-align:center">矛盾关系</td><td>“a 是 B” 与 “a 不是 B”</td><td style="text-align:center">必有一真一假</td></tr><tr><td style="text-align:center">反对关系</td><td>“所有 A 都是 B” 与 “所有 A 都不是 B”</td><td style="text-align:center">不能同真(必有一假)<br>但是可以同假</td></tr><tr><td style="text-align:center">反对关系</td><td>“所有 A 都是 B” 与 “a 不是 B”</td><td style="text-align:center">不能同真(必有一假)<br>但是可以同假</td></tr><tr><td style="text-align:center">反对关系</td><td>“所有 A 都不是 B” 与 “a 是 B”</td><td style="text-align:center">不能同真(必有一假)<br>但是可以同假</td></tr><tr><td style="text-align:center">下反对关系</td><td>“有些 A 是 B” 与 “有些 A 不是 B”</td><td style="text-align:center">不能同假(必有一真)<br>但是可以同真</td></tr><tr><td style="text-align:center">下反对关系</td><td>“a 不是 B” 与 “有些 A 是 B”</td><td style="text-align:center">不能同假(必有一真)<br>但是可以同真</td></tr><tr><td style="text-align:center">下反对关系</td><td>“a 是 B” 与 “有些 A 不是 B”</td><td style="text-align:center">不能同假(必有一真)<br>但是可以同真</td></tr><tr><td style="text-align:center">从属关系</td><td>全称肯定命题 -&gt; 单称肯定命题 -&gt; 特称肯定命题</td><td style="text-align:center">全称真则特称真<br>特称假则全称假</td></tr><tr><td style="text-align:center">从属关系</td><td>全称否定命题 -&gt; 单称否定命题 -&gt; 特称否定命题</td><td style="text-align:center">全称真则特称真<br>特称假则全称假</td></tr></tbody></table><p>[注] “所有 A 都是 B” 为全称肯定命题；“所有 A 不是 B” 为全称否定命题；“有的 A 是 B” 为特称肯定命题；“有的 A 不是 B” 为特称否定命题；“a 是 B” 为单称肯定命题；“a 不是 B” 为单称否定命题。</p><h4 id="5-三段论">5.三段论</h4><p>三段论是由两个直言命题作为前提和一个直言命题作为结论而构成的推理。其中两个前提中含有三个不同的概念, 并且每一个概念在三段论推理中都出现两次。其四种标准形式如下所示:</p><ul><li>所有 A 是 B, 所有 B 是 C, 则所有 A 是 C。</li><li>所有 A 是 B,所有 B 不是 C,则所有 A 不是 C。</li><li>有些 A 是 B, 所有 B 是 C, 则有些 A 是 C。</li><li>有些 A 是 B, 所有 B 不是 C, 则有些 A 不是 C。</li></ul><p>三段论的推理规则及违反规则所犯错误具体如下所示:</p><table><thead><tr><th style="text-align:center">序号</th><th>规则内容</th><th>违反规则所犯错误</th><th>示例</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td>有且只能有三个不同的项, 即大项、小项和中项, 且每个项分别出现两次</td><td>概念错误</td><td>人的认识能力是无限的, 张某是人<br>所以, 张某的认识能力是无限的<br>(两处"人"属于不同概念)</td></tr><tr><td style="text-align:center">2</td><td>从两个否定的前提推不出结论</td><td>无效或错误推理</td><td>所有的侵略战争都不是正义战争<br>抗日战争不是侵略战争<br>所以, 抗日战争是正义战争<br>(无效推理)</td></tr><tr><td style="text-align:center">3</td><td>前提中有一个是否定的则结论否定<br>结论否定则必有一个前提是否定的</td><td>无效或错误推理</td><td>鱼类不是生活在陆地上的<br>鸟生活在陆地上<br>所以,鸟不是鱼类(正确推理)</td></tr><tr><td style="text-align:center">4</td><td>两个前提都是特称判断推不出结论</td><td>无效或错误推理</td><td>有些人是坏人, 有些人是泰国人<br>所以, 有些泰国人是坏人(无效推理)</td></tr><tr><td style="text-align:center">5</td><td>如果两个前提中有一个是特称判断, 那么结论也必须是特称判断</td><td>无效或错误推理</td><td>凡是懶人都不爱洗澡, 有些人是懒人<br>所以, 有些人不爱洗澡(正确推理)</td></tr></tbody></table><h4 id="6-负直言命题的等值命题">6.负直言命题的等值命题</h4><ul><li>并非所有 A 都是 B = 有些 A 不是 B；并非所有 A 都不是 B = 有些 A 是 B。</li><li>并非有些 A 是 B = 所有 A 都不是 B；并非有些 A 不是 B = 所有 A 都是 B。</li><li>并非 a 是 B = a 不是 B；并非 a 不是 B = a 是 B。</li></ul><h4 id="7-模态命题及其推理">7.模态命题及其推理</h4><ul><li>模态命题即含有模态词 “可能” 或 “必然” 的命题。</li><li>模态词的转换: 可能 = 不必然不；必然 = 不可能不；不可能 = 必然不；不必然 = 可能不。</li><li>模态命题与非模态命题的推理关系: 必然 A -&gt; A -&gt; 可能A；必然非A -&gt; 非A -&gt; 可能非A。</li></ul><h3 id="复言命题及其推理">复言命题及其推理</h3><h4 id="1-复言命题的真假关系与推理规则">1. 复言命题的真假关系与推理规则</h4><p>复言命题的真假关系与推理规则, 如下所示:</p><table><thead><tr><th style="text-align:center">命题类型</th><th style="text-align:center">真假关系</th><th style="text-align:left">推理规则</th><th style="text-align:center">负命题</th></tr></thead><tbody><tr><td style="text-align:center">联言命题<br>(A 并且 B)</td><td style="text-align:center">一假即假<br>全真才真</td><td style="text-align:left">命题真推出肢命题真<br>所有肢命题真推出命题真</td><td style="text-align:center">非 A 或非 B</td></tr><tr><td style="text-align:center">相容选言命题<br>(或者 A, 或者 B)</td><td style="text-align:center">一真即真<br>全假才假</td><td style="text-align:left">肯定一部分选言肢, 不能否定另一部分选言肢<br>否定一部分选言肢,可以肯定另一部分选言肢</td><td style="text-align:center">非 A 并且非 B</td></tr><tr><td style="text-align:center">不相容选言命题<br>(要么 A, 要么 B)</td><td style="text-align:center">有且只有一真才为真</td><td style="text-align:left">肯定一个选言肢, 就否定其余的选言肢<br>否定一个选言肢以外的所有选言肢, 就能肯定未被否定的那个选言肢</td><td style="text-align:center">“A 并且 B"或者"非 A 并且非 B”</td></tr><tr><td style="text-align:center">充分条件假言命题<br>(如果 A, 那么 B)</td><td style="text-align:center">只有前件真后件假才为假</td><td style="text-align:left">肯定前件就能肯定后件<br>否定后件就能否定前件<br>否定前件不能否定后件<br>肯定后件不能肯定前件</td><td style="text-align:center">A 并且非 B</td></tr><tr><td style="text-align:center">必要条件假言命题<br>(只有 A, 才 B)</td><td style="text-align:center">只有前件假后件真才为假</td><td style="text-align:left">否定前件就能否定后件<br>肯定后件就能肯定前件<br>肯定前件不能肯定后件<br>否定后件不能否定前件</td><td style="text-align:center">非 A 并且 B</td></tr><tr><td style="text-align:center">充要条件假言命题<br>(当且仅当 A, 才 B)</td><td style="text-align:center">前件与后件同真假则为真<br>前件与后件不同真假则为假</td><td style="text-align:left">肯定前件就能肯定后件<br>否定前件就能否定后件<br>肯定后件就能肯定前件<br>否定后件就能否定前件</td><td style="text-align:center">“非 A 并且 B"或者"A 并且非 B”</td></tr><tr><td style="text-align:center">负命题<br>(并非A)</td><td style="text-align:center">原命题为真则为假<br>原命题为假则为真</td><td style="text-align:left">肯定原命题则否定负命题<br>否定原命题则肯定负命题</td><td style="text-align:center">A</td></tr></tbody></table><h4 id="2-复言命题的转化关系">2. 复言命题的转化关系</h4><ul><li>“如果 A,那么 B” = “只有B, 才A” = “非 A 或 B”</li><li>“只有 A, 才 B” = “如果 B, 那么 A” = “A 或非 B”</li><li>“除非 A, 否则 B” = “如果非 A,那么 B” = “只有 A,才非 B”</li></ul><h4 id="3-假言连锁推理">3. 假言连锁推理</h4><p>假言连锁推理的形式如下所示:</p><table><thead><tr><th style="text-align:center">充分条件假言连锁推理</th><th style="text-align:center">必要条件假言连锁推理</th></tr></thead><tbody><tr><td style="text-align:center">如果 A,那么B <br>如果 B,那么C<br>------------<br>如果 A,那么 C</td><td style="text-align:center">只有 A,才 B<br>只有 B,才 C<br>------------<br>只有 A,才 C</td></tr></tbody></table><h4 id="4-二难推理">4. 二难推理</h4><p>二难推理的形式如下所示:</p><table><thead><tr><th style="text-align:center">简单构成式</th><th style="text-align:center">简单破坏式</th><th style="text-align:center">复杂构成式</th><th style="text-align:center">复杂破坏式</th></tr></thead><tbody><tr><td style="text-align:center">如果 A,那么 B<br>如果 C,那么 B<br>A 或者 C<br>------------<br>B</td><td style="text-align:center">如果 A,那么 B<br>如果 A,那么 C<br>非 B 或者非 C<br>------------<br>非A</td><td style="text-align:center">如果 A,那么 B<br>如果 C,那么 D<br>A 或者 C<br>------------<br>B 或者 D</td><td style="text-align:center">如果 A,那么 B<br>如果 C,那么 D<br>非 B 或者非 D<br>------------<br>非 A 或者非 C</td></tr></tbody></table><h3 id="智力推理">智力推理</h3><p>  智力推理，又称朴素逻辑，是需要根据题干所给条件进行灵活推理的一类题目。在 2017—2019 年国家公务员考试地市卷中均出现了材料阅读题，即 5 道题目共用一小段材料。同时，在 2013—2018 年江苏省考、2017 年吉林省考中均出现了 2 道或 3 道题目共用一小段材料的题目。从考查实质来看,这类材料题主要考查智力推理及对快解方法的熟练运用。</p><p>智力推理题目常用解题方法如下:</p><ul><li>(1) 找突破口法，即找到能够迅速理清思路的切人点，以此为突破口，简化解题步骤。</li><li>(2) 排除法，即将错误的选项先行排除，当无从人手，无法确定答案时可用。</li><li>(3) 代人法，即把选项代人题干验证，适用于题干烦琐、难度较大的题目。</li><li>(4) 假设法，即假设某个题干判断的真假，适用于真假问题和有些顺序排列、特征匹配的题目。</li><li>(5) 图表法，即通过画图或列表将各个元素及相应特征进行匹配，适用于含有多元素或特征匹配的题目。</li></ul><h3 id="削弱型">削弱型</h3><h4 id="1。-提问方式">1。 提问方式</h4><p>削弱型题目的提问方式一般有以下几种:</p><ul><li>”以下哪项如果为真，最能(或最不能)削弱上述结论？“</li><li>”以下哪项如果为真，最能(或最不能)削弱上述论证？“</li><li>”以下哪项如果为真，最能(或最不能)对上述论述提出质疑？“</li><li>”以下哪项如果为真，最能质疑上述观点？“</li><li>”以下哪项如果为真，能够最有力地反驳上述推论？“</li></ul><h4 id="2-削弱角度">2. 削弱角度</h4><p>在解答削弱型题目时，我们一般根据不同的论证方式选择不同的削弱角度,具体如下所示:</p><table><tbody><tr><td style="background-color: #dfe2e5" rowspan="2">跳跃论证</td><td>表现形式: 论据和论点的关键词不同，两者之间存在明显跳跃，需要增加隐含假设才能使论证成立</td></tr><tr><td>削弱角度: 指出跳跃是不成立的，即论据和论点之间没有联系或有差异、偷换概念等</td></tr><tr><td style="background-color: #dfe2e5" rowspan="2">归纳论证</td><td>表现形式: 以实验、问卷、调查、研究等方法得出的数据作为论据推出结论的论证</td></tr><tr><td>削弱角度: 指出数据不可靠，如样本特殊，容量不足，没有代表性，没有调查的样本存在不同结果等</td></tr><tr><td style="background-color: #dfe2e5" rowspan="2">因果论证</td><td>表现形式: 通过揭示事物之间存在的因果联系而得出某种观点的论证方法，在考试中往往是通过实验、调查、问卷、研究等得出</td></tr><tr><td>削弱角度: <br>①切断因果，指出题干所述的因果关系不成立<br>②因果倒置，指出题干错把原因当结果，把结果当原因<br>③另有他因，指出存在其他导致结果的原因(注意因果倒置的削弱程度比另有他因更强)</td></tr><tr><td style="background-color: #dfe2e5" rowspan="2">类比论证</td><td>表现形式: 根据两个对象在某些属性上相同或相似，推出它们在另一些属性上也相同或相似的论证</td></tr><tr><td>削弱角度: 指出两者之问相似度不高或者存在本质区别</td></tr><tr><td style="background-color: #dfe2e5" rowspan="2">方法论证</td><td>表现形式: 为了达到某种目的或解决某一问题提出一个方法的论证</td></tr><tr><td>削弱角度: 方法实施后达不到目的，或方法不可行</td></tr></tbody></table><h4 id="3-解题步骤">3. 解题步骤</h4><p>无论正确选项使用的是哪种的削弱方式，解答削弱型题目一般都遵循以下步骤:</p><ul><li>(1) 分清题干的论证方式，即其论点和论据各是什么；</li><li>(2) 分别查看各选项是否能削弱，并分析是通过何种方式削弱的；</li><li>(3) 比较各削弱方式之同的削弱程度，从而选择最符合题意的一项。</li></ul><h4 id="4-削弱程度的比较">4. 削弱程度的比较</h4><p>  当一个题目中有多个选项对题干有削弱作用时，要注意选项是直接还是间接削弱题干，是削弱论据、论点还是论证方式。<br>  对于一个论证来说，论点比论据更重要，不论是采用何种途径削弱，最终目的都是削弱题干中的论点。因此,一般来说，直接削弱比间接削弱的削弱作用强，削弱论点比削弱论据或论证方式的削弱作用強。</p><h3 id="加强型">加强型</h3><h4 id="1-提问方式">1. 提问方式</h4><p>加强型题目根据提问方式的不同,可以分为一般加强型和补充前提型两类。</p><h5 id="1-一般加强型题目的提问中通常包含“加强”“支持”等字样，其常见提问方式如下">(1) 一般加强型题目的提问中通常包含“加强”“支持”等字样，其常见提问方式如下:</h5><ul><li>“以下哪项如果为真,最能加强(支持)题干论证？”</li><li>“以下哪项最能加强上述反驳？”</li><li>“以下哪项如果为真，最能支持上述观点？”</li><li>“以下哪项如果为真，能给上述断言以最大的支特？”</li></ul><h5 id="2-补充前提型题目，即要求选择能够成为题干前提或隐含假设的选项的一类题目。所谓前提是使推理成立的一个必要条件。常见的提问方式如下">(2) 补充前提型题目，即要求选择能够成为题干前提或隐含假设的选项的一类题目。所谓前提是使推理成立的一个必要条件。常见的提问方式如下:</h5><ul><li>“以下哪项最可能是上述论证所假设的？”</li><li>“上述推论基于以下哪项假设？”</li><li>“为使上述结论成立，以下哪项陈述必须为真？”</li><li>“为使上述论证能够成立，必须假设的前提是: ”</li></ul><h4 id="2-加强角度">2. 加强角度</h4><p>加强型题目的表现形式与削弱型类似，根据不同的论证方式有不同的加强角度，具体如下所示:</p><table><tbody><tr><td style="background-color: #dfe2e5">跳跃论证</td><td>加强角度: 在两者间搭桥建立联系或者排除其他因素的影响</td></tr><tr><td style="background-color: #dfe2e5">归纳论证</td><td>加强角度: 指出调查样本不特殊，样本足够大能够代表总体,没有调查的样本也具有同样结果等</td></tr><tr><td style="background-color: #dfe2e5">因果论证</td><td>加强角度: <br>①有因有果，指出原因存在时，结果也存在<br>②无因无果,从反面加强，指出原因不存在时，结果也不存在<br>③排除他因，说明除了题干原因之外,其他因素对结论不构成影响</td></tr><tr><td style="background-color: #dfe2e5">类比论证</td><td>加强角度: 指出两者之间具有较高的相似度或本质相似</td></tr><tr><td style="background-color: #dfe2e5">方法论证</td><td>加强角度: 方法实施后能达到目的，或方法可行</td></tr></tbody></table><h4 id="3-解题步骤-2">3. 解题步骤</h4><p>一般加强型题目的解题步骤及加强的强弱程度比较，均与削弱型题目类似。</p><p>补充前提型题目的解题步骤如下:</p><p>(1) 阅读题干，分析题干的论点和论据，找出题干漏洞；</p><p>(2) 分析选项，排除那些明显不能弥补题干漏洞的选项；</p><p>(3) 用反向代入法来验证那些可能正确的选项</p><ul><li>反向代入法，即将选项的反向带入题干，看该选项不成立时题干结论是否成立。如果不成立，则该选项为正确答案；如果还有成立的可能性，则排除</li></ul><h3 id="结论型">结论型</h3><h4 id="1-提问方式-2">1. 提问方式</h4><p>结论型题目的提问方式包括以下几种:</p><ul><li>“从上文可以推出以下哪些结论？“</li><li>“下述哪项最能概括上文的主要观点？“</li><li>“以下哪项作为结论从上述题干中推出最为恰当？“</li><li>“如果上述断定是真的，以下哪项也一定是真的？“</li><li>“如果上述断定是真的。那么除了以下哪项，其余的断定也必定是真的？”</li></ul><h4 id="2-题型及方法">2. 题型及方法</h4><p>结论型题目的考查类型及解题方法如下所示:</p><table><thead><tr><th style="text-align:center">题目类型</th><th style="text-align:center">解题方法</th></tr></thead><tbody><tr><td style="text-align:center">对题干信息的转化</td><td style="text-align:center">不要附加题干未涉及的信息</td></tr><tr><td style="text-align:center">归纳论点</td><td style="text-align:center">对题干内容进行归纳推理</td></tr></tbody></table><h3 id="解释型">解释型</h3><h4 id="1-提问方式-3">1.提问方式</h4><p>解释型题目的提问方式包括以下几种:</p><ul><li>“以下哪项如果为真，最有助于解释上达行为？“</li><li>“以下哪项如果为真，能解释上述矛盾的现象？“</li><li>“以下各项中，哪项最无助于说明上述现象？“</li></ul><h4 id="2-题型及方法-2">2.题型及方法</h4><p>解释型题目的考查类型及解题方法如下所示:</p><table><thead><tr><th style="text-align:center">题目类型</th><th style="text-align:left">解题方法</th></tr></thead><tbody><tr><td style="text-align:center">解释结论或现象</td><td style="text-align:left">与题干论述情景相关<br>产生的结果正确且符合逻辑</td></tr><tr><td style="text-align:center">解释矛盾或差异</td><td style="text-align:left">找到题干中的矛盾<br>选项与题干情景相关<br>不能与矛盾双方相悖且与矛盾双方相包容</td></tr></tbody></table><h3 id="评价型">评价型</h3><h4 id="1-提问方式-4">1. 提问方式</h4><p>评价型题目的提问方式包括以下几种:</p><ul><li>“对以下哪项问题的回答，最有助于评价上述论证？“</li><li>"以下哪一项办法最有利于验明上述研究结论的可靠性？“</li><li>“以下哪项最为恰当地指出了上述论证的漏洞？“</li><li>“以下哪项是二人争论的焦点？“</li></ul><h4 id="2-考查方式及方法">2. 考查方式及方法</h4><p>评价型题目的考查方式及解题方法如下所示</p><table><thead><tr><th style="text-align:center">考查方式</th><th style="text-align:left">解题方法</th></tr></thead><tbody><tr><td style="text-align:center">常规评价</td><td style="text-align:left">寻找对题干推理起正反两方面作用的选项</td></tr><tr><td style="text-align:center">找类似的逻辑结构或评价论证方法</td><td style="text-align:left">首先要弄清楚题干的论证结构，然后逐一分析选项的结构<br>分析题干论证所用的方法及其存在的漏洞,选择概括最为恰当的一项</td></tr></tbody></table><h2 id="图形推理">图形推理</h2><h3 id="类比型图形推理">类比型图形推理</h3><h4 id="1-题型介绍">1. 题型介绍</h4><p>  类比型图形推理的题干是两组图形，每组三个图形，需要根据第一组图形的排列规律，在选项中选择一个合适的图形作为第二组中所缺少的图形。这一题型是公务员考试图形推理最原始的题型，整体难度较低。</p><p>  类比型图形推理的题干形式如下所示:</p><p>  以所给的四个选项中，选择最合适的一个填人问号处，使之呈现一定的规律性。</p><h4 id="2-核心考点">2. 核心考点</h4><p>  类比型图形推理的考点及规律如下表所示，顺推型和九宫格图形推理的考点与此类似,后面不再赘述</p><table><tbody><tr><th>題型</th><th>考点</th><th>规律</th><th>举例说明</th></tr><tr><td rowspan="4">类比型<br>图形推理</td><td>图形中的数量关系</td><td>线条数、封闭区域数、笔画数、图形种类数等数量相等或等差增减</td><td>图形笔画数均为 5</td></tr><tr><td>图形中的位置关系</td><td>图形整体或部分旋转、移动、翻转得到后面图形</td><td>旋转 90° 后得到下一图形</td></tr><tr><td>图形中的几何特征</td><td>直线图形与曲线图形、对称性、开放(封闭)性、图形中的面积规律变化</td><td>题干图形都为开放图形</td></tr><tr><td>图形间的相互转化</td><td>去同存异、去异存同、图形组合、图形转换</td><td>前两个图形去同存异后得到第三个图形</td></tr></tbody></table><h4 id="3-解题要点">3. 解题要点</h4><p>(1) 横向类比: 首先分析第一组图形内部的联系，然后将这种联系运用于第二组图形。</p><p>(2) 纵向类比，将两组图形中相同位置的图形对应来看,综合比较,寻找规律。</p><h3 id="顺推型图形推理">顺推型图形推理</h3><h4 id="1-题型介绍-2">1. 题型介绍</h4><p>  顺推型图形推理包含一组题干图形和一组选项图形，需要根据题干图形的排列规律，在选项中选择一个合适的图形。这一题型由于规律类型众多，考点变化丰富，难度较大。</p><h4 id="2-解题要点">2. 解题要点</h4><p>  一般情况下，顺推型图形推理的规律有共同特征型、连续变化型和间隔排列型三种，共同特征型和连续变化型的考查方式较为常见。如下:</p><ul><li>(1) 共同特征型，从图形整体特征和构成元素出发，归纳出图形之间的共同特征。</li><li>(2) 连续变化型，根据题干图形表现出的具有连续性的某种规律，延续得到下一个图形。</li><li>(3) 间隔排列型，这类题的题干通常给出五个图形，其中第一、第三、第五个图形表现出一致的规律,第二、第四个图形表现出某种规律，据此在选项中找出符合对应规律的图形。</li></ul><h3 id="九宫格型图形推理">九宫格型图形推理</h3><h4 id="1-题型介绍-3">1. 题型介绍</h4><p>  九宮格型图形推理的题干是一个3x3的方格，给出了其中的8个图形，要求根据这几个图形的排列规律，在选项中选择一个合适的图形作为第9个图形。这一题型是对类比型图形推理、顺推型图彤推理的结合与创新，整体难度介于类比型图形推理和顺推型图形推理之间。</p><h4 id="2-解题要点-2">2.解题要点</h4><p>九宫格型图形推理的解题要点有以下三个:</p><ul><li>(1) 按每行或每列将9个图形分成3组,转化为类似于类比型图形推理的解题思路</li><li>(2) 找出9个图形具有的共同特征或者将9个图形看成一个整体寻找规律。</li><li>(3) 将9个因形看成连线排列的一列图形，由此转化为类似于顺推型图形推理的解题思路。</li></ul><h3 id="空间型图形推理">空间型图形推理</h3><h4 id="1。-题型介绍">1。 题型介绍</h4><p>空间型图形推理侧重考查应试者的空同想象能力，主要有以下五种题型:</p><ul><li>(1) 折纸盒问题: 题干为平面展开图，四个选项均为立体图形，提问方式一般为“左边给定的是纸盒的外表面，下列哪一项能由它折叠而成？“”将题干图形折叠后，得到的图形是？”。解决这类问题，首先需要区分相邻面与相对面,然后再根据小图形间的位置关系判断。</li><li>(2) 拆纸盒问题: 题干为立体图形，四个选项均为平面展开图，提问方式一般为“下面四个所给的选项中，哪一项能折成左边给定的图形？””将题干图形展开后应为？”。“拆纸盒问题”相对简单,逐分析选项排除即可。</li><li>(3) 三视图问题: 立体图形在三个方向上的投影，包括主视图、俯视图和左视图。</li><li>(4) 截面图问题: 将一个立体图形用某一平面剖开，该平面与立体图形按触区城的外部轮廓即为该立体图形的截面</li><li>(5) 立休拼接与切制问麵: 立体拼接是将几个立休小图形拼接组合成一个完整的立休图形，立体切制是将一个立休图形切割成两个或多个立体小图形，主要考查考生对于空间的想象能力，以及对于细节特征的观察能力。</li></ul><h4 id="2-解题要点-3">2. 解题要点</h4><p>  空间型图形推理主要考查应试者的空间想象能力。解题时需要对图形间的相对位置关系准确判断，有些题难度较大。<br>  在解决折纸盒与拆纸盒问题时通常采用直接判断法和排除法。使用直接判断法的要求很高，可能不便把握。排除法使用的频率较高，通常从相对面与相邻面、小图形特征等方面考虑。<br>  三视图、截面图、立体拼接与切割问题需要一定的专业知识，但公务员考试中一般都考查得比较简单，考生进行一定的题目训练即可掌握。</p><h3 id="分类分组型图形推理">分类分组型图形推理</h3><h4 id="1-题型介绍-4">1. 题型介绍</h4><p>  分类分组型图形推理的题干包含六个图形，要求将这六个图形分为两类，使得每一类图形都有各自的共同特征或规律。<br>  分类分组型图形推理相对来说,涵盖的考点不多，一般只考查“结构类””位置类”和“数量类”，因此在做分类分组型图形推理时，只需从“结构类”“位置类”和“数量类”考点中分析分类的标准。</p><h4 id="2-核心考点-2">2. 核心考点</h4><p>分类分组型图形推理的核心考点及示例如下所示:</p><table><tbody><tr><th>題型</th><th>考点</th><th>举例说明</th></tr><tr><td rowspan="3">分类分组型图形推理</td><td>图形构成</td><td>图形①③⑤均为直线图形，图形②④⑥均为曲线图形</td></tr><tr><td>几何性质</td><td>图形①③⑤均为轴对称图形，图形②④⑥均为中心对称图形</td></tr><tr><td>图形转化</td><td>图形①③⑤可通过旋转相互转化，图形②④⑥可通过旋转相互转化</td></tr></tbody></table><h4 id="3-解题要点-2">3. 解题要点</h4><p>分类分组型题目的解题要点有以下两个:</p><ul><li>(1) 以图形之间的共同特征或共有元素为突破口，猜想并验证分类标准。</li><li>(2) 分析单个图形的外部整体特征和内在细节特征,然后用其他图形去匹配</li></ul><h3 id="其他形式图形推理">其他形式图形推理</h3><h4 id="1-题型介绍-5">1. 题型介绍</h4><p>  除了常见的五种题型外，在各类公务员考试中，还出现了图形类比、图形组合、图形重组、图形求异等题型。总的来说，这些题型考查的本质内容与前面介绍的四种题型既有差别又有联系，是图形推理题型多样化发展的结果。</p><ul><li>(1) 图形类比。根据第一组所给图形的关系，从四个选项中选出最合适的一个填入第二组中的问号处，使之呈现一定的规律性。</li><li>(2) 图形组合。选项四个图形中，只有一个是由题干四个图形拼合而成的，请选出来。</li><li>(3) 图形重组。题干图形重新组合将得到选项中哪个图形？</li><li>(4) 图形求异。请从下面的四个图形中选出与其他三个不同的一个图形。</li></ul><h4 id="2-核心考点-3">2. 核心考点</h4><p>其他形式图形推理的核心考点如下所示:</p><table><tbody><tr><th>題型</th><th>考点</th><th>方法</th></tr><tr><td rowspan="5">其他形式图形推理</td><td rowspan="2">图形类比</td><td>寻找图形间的转化方式</td></tr><tr><td>寻找图形的共同特征</td></tr><tr><td rowspan="2">图形组合、重组</td><td>线条群重组</td></tr><tr><td>片块重组</td></tr><tr><td rowspan="2">图形求异</td><td>应用求同分析找出其中三个图形的共同点</td></tr></tbody></table><h2 id="定义判断">定义判断</h2><h3 id="单定义判断">单定义判断</h3><h4 id="1-题型介绍-6">1.题型介绍</h4><p>  公务员考试对单定义判断题的要求如下:</p><ul><li>每道题先给出定义，然后列出四种情况，要求你严格根据定义，从中选出一个最符合或最不符合该定义的答案。注意: 假设这个定义是正确的，不容置疑的。</li></ul><p>  公务员考试中所给出的定文是不容置疑的。这就要求应试者在解题时，要准确理解被定义项的内涵，不要放大或缩小，否则就会对定义产生误解，犯类似“定义过宽”或“定义过窄”的错误。</p><h4 id="2-解题要点-4">2. 解题要点</h4><p>  解答单定义判断题目时，通常需要找到定义的特征,然后结合选项进行分析，因此我们总结出了特征筛选法。这方法主要分为两种情况，一是定义有明确的提示词，可通过提示词分析定义特征，即提取要点;二是无法直接找到提示词，需要总结定义的特征，即归纳关键信息。</p><ul><li>(1) 提取要点是解答单定义判断题目最常用而且最有效的方法，考生只要把握住定义的关键要点，将选项与题干定义进行对比分析，就能准确地判断出正确或者错误的选项。</li></ul><p>  在寻找定义的要点时，我们可以从主体、客体、目的、原因、条件、方式或结果等几个方面考虑。这些要点可能全部出现在题干的定义当中，也可能只出现其中的一个、两个。这些要点的特征及提示词总结如下:</p><table><thead><tr><th style="text-align:center">要点类型</th><th style="text-align:left">特征及提示词</th></tr></thead><tbody><tr><td style="text-align:center">表主体</td><td style="text-align:left">行为或事件的发动者、当事方</td></tr><tr><td style="text-align:center">表客体</td><td style="text-align:left">行为或事件的承受者、被指向者</td></tr><tr><td style="text-align:center">表目的</td><td style="text-align:left">“达到···目的”“为了···”“确保···“</td></tr><tr><td style="text-align:center">表原因</td><td style="text-align:left">“由于”“出于”</td></tr><tr><td style="text-align:center">表条件</td><td style="text-align:left">“以···为前提”“以···为基础”“在···条件下”</td></tr><tr><td style="text-align:center">表方式或手段</td><td style="text-align:left">“通过···方式”“运用···手段”</td></tr><tr><td style="text-align:center">表结果</td><td style="text-align:left">“造成···”“导致···“</td></tr></tbody></table><ul><li>(2) 归纳关键信息适用于有些时候題目所给的定义并不能明确区分出各种条件，但其中仍然包含关键信息。但是，不同的题目其关键信息并不相同，考生要排除冗余信息，进行合理的归纳和总结。</li></ul><p>  这类题目的定义一般为某种效应或者现象，题干中给出的也往往是一个例子，在解答这类题目时，虽然题干中没有明确的可以总结为要点的句子，但往往有较为形象的类比或生动的描述，考生可自行对它进行归纳，再与选项对比，找出最合适的一项。<br>  特征筛选法作为单定义判断的主要解题方法，能够帮助大家快速锁定正确选项。除此之外，还有一种方法能够辅助我们解题，即选项对比法。顾名思义，选项对此法即在四个达项中存在一个特征较为明显，与其他三项区分度较大的选项。但为了保证准确率，选项对比法只作为辅助手段，要特征筛选法才能使用。</p><h3 id="多定义判断">多定义判断</h3><h4 id="1-题型介绍-7">1. 题型介绍</h4><p>  多定义判断是指题干出现多个定义的题目，主要有两种出题方式: 一种是新型多定义，题干涉及两个或多个定义，而提问只涉及一个定义;另一种则是传统型多定义，题干分別给出三个定义和三个典型例证，要求判断典型例证和定义的对应数目或对应关系。</p><p>  近年来，传统型多定义逐渐从考试中淡出，更多的是对新型多定义的考查，其中所涉及的定义间关系如下所示:</p><table><tbody><tr><th>定义间关系</th><th>具体情况</th><th>解题原则</th><th>解题方法</th></tr><tr><td>并列</td><td>多个定义相互并列</td><td rowspan="3">分析定义间的区别和联系，以便更好地理解被考查定义</td><td rowspan="3">去同存异法<br>〝排除＋验证”法</td></tr><tr><td rowspan="2">包含</td><td>某个定义包括几种情况或几个小定义</td></tr><tr><td>给出一个定义,并对定义中的某个概念进行解释性定义</td></tr></tbody></table><h4 id="2-解题要点-5">2. 解题要点</h4><p>  在多定义判断题目中，,题干中的定义数目变多了，每个都要去理解,因此审题时间明显变长。但是，在题干的定义数目变多的同时,定义的复杂度却在下降，基本上都是比较简短的定义，能又快又明确地找出定义的关键要点。多定义判断的解题方法主要有去同存异法和“排除＋验证”法两种。<br>  (1)去同存异法一般用在多定义判断题目中，题目所给的几个定义都是有很大相似度的，属于同一范畴，只是有一些细微差别。因此，在解题时，我们对几个定义中相同的属性可以忽略不计，而只要对它们有差别的地方进行此较，即要注意“去同存异”。阅读题干时，可将这些不同之处圈出来，这样在比对选项或典型例证过程中，针对性更强，作答速度和正确率自然也就会提升。<br>  (2) “排除＋验证”法用于做多定义判断题尤其是要求判断例证与定义是否相符的多定义判断题时，是最高效的方法。</p><p>运用“排除+验证”法解多定义判断题的主要步骤:</p><ul><li>① 先分析四个备选项，明确待验证对象（定义 X 与典型例证 Y 相符或不相符）。</li><li>② 判断待验证对象的正误。</li><li>③ 根据判断结果排除不相符的备选项，缩小可选项范围。</li><li>④ 判断剩余可选项的正误，得出正确答案。</li></ul><p>  事实上，多定义考查的本质和单定义相同，只是需要区分定义间的关系，因此，在解答多定义时，对于其中的一个定义同样可以考虑运用特征筛选法和选项对此法。</p><h2 id="类比推理">类比推理</h2><h3 id="词项间关系">词项间关系</h3><h4 id="1-题型介绍-8">1.题型介绍</h4><p>类比推理考查考生分析、比较词项之间关系的能力。公务员考试中类比推理题的答题要求如下，</p><ul><li>每道题先给出一组相关的词，要求你在备选答案中找出一组与之在逻辑关系上最为贴近、相似或匹配的词</li></ul><p>按照题型分类，类比推理可分为两词型、三词型和对当型三种，具体如下所示:</p><table><thead><tr><th style="text-align:center">题目类型</th><th style="text-align:left">题目特征</th><th style="text-align:center">基本形式</th></tr></thead><tbody><tr><td style="text-align:center">两词型</td><td style="text-align:left">题干和四个备选答案所给的一组词均涉及两个词项</td><td style="text-align:center">A:B</td></tr><tr><td style="text-align:center">三词型</td><td style="text-align:left">题干和四个备选答案所给的一组词均涉及三个词项</td><td style="text-align:center">A:B:C</td></tr><tr><td style="text-align:center">对当型</td><td style="text-align:left">题干分别涉及两组词的部分词项，而四个备选答案中给出题干所缺少的词项</td><td style="text-align:center">A对于（）相当于（）对于B</td></tr></tbody></table><h4 id="2-核心考点-4">2. 核心考点</h4><p>类比推理考查的是对词项之间所具有的关系进行类比的能力。因此,词项间的关系即考点，主要包括逻辑关系中的集合关系、条件关系、因果关系；言语关系中的语义关系和语法关系；常识关系中的经验常识和理论常识。</p><ul><li>(1) 集合关系的常见类型总结如下所示:</li></ul><table><tbody><tr><th colspan="2">词项间关系</th><th>示例</th></tr><tr><td rowspan="3">全同关系</td><td>同一事物的全称 、简称、别称等</td><td>家父:父亲</td></tr><tr><td>中文名和音译名</td><td>话筒:麦克风</td></tr><tr><td>口语和书面语</td><td>小气:吝啬</td></tr><tr><td rowspan="2">包含关系</td><td>种与属</td><td>中学:学校</td></tr><tr><td>整体与部分</td><td>书包:背带</td></tr><tr><td colspan="2">交叉关系</td><td>明星:本科生</td></tr><tr><td rowspan="3">全异关系</td><td>属于同一个大类的并列关系</td><td>红茶:绿茶</td></tr><tr><td>具有共同属性或功能的并列关系</td><td>雨伞:雨衣</td></tr><tr><td>不属于同一个大类，两者亳无联系</td><td>实数:木耳</td></tr></tbody></table><ul><li>(2) 条件关系的常见类型总结如下所示:</li></ul><table><tbody><tr><th>词项间关系</th><th>示例</th></tr><tr><td>充分条件关系</td><td>摩擦:生热</td></tr><tr><td>必要条件关系</td><td>投资:收益</td></tr></tbody></table><ul><li>(3) 因果关系的常见类型总结如下所示:</li></ul><table><tbody><tr><th colspan="2">词项间关系</th><th>示例</th></tr><tr><td rowspan="2">因果关系</td><td>A 是 B 的原因</td><td>成功:喜悅</td></tr><tr><td>A 导致 B</td><td>地震:伤亡</td></tr></tbody></table><ul><li>(4) 语义关系的常见类型总结如下所示:</li></ul><table><tbody><tr><th colspan="2">词项间关系</th><th>示例</th></tr><tr><td rowspan="2">近义关系</td><td>近义词关系</td><td>成功:喜悅</td></tr><tr><td>有相近的意恩</td><td>聚精会神:专心</td></tr><tr><td rowspan="2">反义关系</td><td>反义词关系</td><td>奢侈:简朴</td></tr><tr><td>有相反的意恩</td><td>亦步亦趋:主见</td></tr><tr><td>象征关系</td><td>事物及其象征意义</td><td>鸽子:和平</td></tr></tbody></table><ul><li>(5) 语法关系的常见类型总结如下所示:</li></ul><table><tbody><tr><th>词项间关系</th><th>示例</th></tr><tr><td>主谓结构</td><td>苍鹰:翱翔</td></tr><tr><td>动宾结构</td><td>管理:员工</td></tr><tr><td>修饰关系</td><td>芳香:花朵</td></tr><tr><td>并列结构</td><td>丰功:伟绩</td></tr></tbody></table><ul><li>(6) 经验常识的常见类型总结如下所示:</li></ul><table><tbody><tr><th>词项间关系</th><th>示例</th></tr><tr><td>位置关系</td><td>二人转:东北</td></tr><tr><td>特征关系</td><td>雪:白</td></tr><tr><td>功能关系</td><td>手机:通信</td></tr><tr><td>材料关系</td><td>家具:木材</td></tr><tr><td>工具关系</td><td>教师:粉笔</td></tr><tr><td>目的关系</td><td>展览:铭记:历史</td></tr><tr><td>顺承关系</td><td>报警:救援</td></tr><tr><td>引导关系</td><td>操作:手册</td></tr></tbody></table><ul><li>(7) 理论常识的常见类型总结如下所示：</li></ul><table><tbody><tr><th>词项间关系</th><th>示例</th></tr><tr><td>地理</td><td>潮汐:月球引力:太阳引力</td></tr><tr><td>历史</td><td>负荆请罪:廉颇</td></tr><tr><td>文学</td><td>“天门中断楚江开,碧水东流至此回”:长江</td></tr><tr><td>物理</td><td>路程:时间:速度</td></tr></tbody></table><h3 id="类比推理解题技巧">类比推理解题技巧</h3><h4 id="1-解题要点">1. 解题要点</h4><p>有时候，运用普通的词项间关系，得不出答案，或者可以得出多个符合题干关系的选项。这就需要我们用一些解题方法，来得出答案。具体方法有以下三种：</p><table><tbody><tr><th>解题方法</th><th>具体分析</th><th>示例</th></tr><tr><td>代入排除法</td><td>解答对当型题目的基本方法。<br>解题时将各选项中的词项依次代入题干，<br>两组词关系最为相似的即为正确答案</td><td>存折对于（）相当于栅栏对于（）</td></tr><tr><td>遣词造句法</td><td>利用语感对题干给出的几个词项进行造句，<br>再把所造句子的结构套用于选项，<br>合适的即为正确答案</td><td>患者：医院：治疗（患者在医院接受治疗）</td></tr><tr><td>横纵对比法</td><td>分别通过横向和纵向对比题干和选项之间的关系，<br>选出与题干相同点最明显、最多的选项</td><td>京剧：芭蕾<br>横向：京剧和芭蕾都是舞台艺术<br>纵向：京剧是国粹，芭蕾源自国外</td></tr></tbody></table><h4 id="2-词项关系的细微差别">2. 词项关系的细微差别</h4><p>随着类比推理难度的增加，许多题目除了表面的关系外，往往还有更深层的关系，此时就需要通过横向和纵向的多次对比，找出其中的细微差别,选出更符合题干关系的一项。常见的细微差别见下表：</p><table><tbody><tr><th>词性</th><td>是否都是名词、动词、形容词等</td></tr><tr><th>感情色彩</th><td>是否都是褒义、贬义、积极、消极等</td></tr><tr><th>属性</th><td>是否同属于某种类型，对象功能是否相似等</td></tr><tr><th>词义</th><td>是否是近义词或者反义词等</td></tr><tr><th>词的构成</th><td>词语构成方式是否都是主谓、偏正、动宾结构，或联绵词、复合词等</td></tr><tr><th>其他特性</th><td>是否存在其他选项所没有的共同特性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数量关系 | 国家公务员招录考试</title>
      <link href="/shu-liang-guan-xi/"/>
      <url>/shu-liang-guan-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="数学运算">数学运算</h2><h3 id="计算问题">计算问题</h3><h4 id="算式计算">算式计算</h4><table><thead><tr><th style="text-align:center">常用法则</th><th style="text-align:center">具体公式</th></tr></thead><tbody><tr><td style="text-align:center">加法</td><td style="text-align:center">$ a+b=b+a，(a+b)+c=a+(b+c) $</td></tr><tr><td style="text-align:center">乘法</td><td style="text-align:center">$ a\times{b}=b\times{a}，(a\times{b})\times{c}=a\times{(b\times{c})} $</td></tr><tr><td style="text-align:center">幂次</td><td style="text-align:center">$ a^{m}\times{a^{n}}=a^{n}\times{a^{m}}=a^{m+n}，(a^m)^n=(a^n)^m=a^{mn}，(a\times{b})^m=a^m\times{b^m}，(\frac ba)^m=\frac {b^m} {a^m} $</td></tr><tr><td style="text-align:center">完全平方公式</td><td style="text-align:center">$ (a\pm b)^2=a^2\pm 2ab+b^2 $</td></tr><tr><td style="text-align:center">平方差公式</td><td style="text-align:center">$ a^2-b^2=(a+b)(a-b) $</td></tr><tr><td style="text-align:center">完全立方公式</td><td style="text-align:center">$ (a\pm b)^3 = a^3\pm 3a^2b+3ab^2+b^3 $</td></tr><tr><td style="text-align:center">立方和(差公式)</td><td style="text-align:center">$ a^3\pm b^3=(a\pm b)(a^2\mp ab+b^2) $</td></tr><tr><td style="text-align:center">列项公式</td><td style="text-align:center">$ \frac {d} {n(n+d)}=\frac 1n - \frac{1}{n+d}，当d=1时，\frac{1}{n(n+1)}=\frac 1n-\frac{1}{n+1} $</td></tr></tbody></table><h4 id="数列计算">数列计算</h4><table><thead><tr><th style="text-align:center">数列</th><th style="text-align:center">通项公式</th><th style="text-align:center">对称公式</th><th style="text-align:center">求和公式</th></tr></thead><tbody><tr><td style="text-align:center">等差数列</td><td style="text-align:center">$a_n=a_1+(n-1)d$</td><td style="text-align:center">$a_m+a_n=a_i+a_j，其中m+n=n+j$</td><td style="text-align:center">$①一般求和：S_n=\frac {n(a_1+a_n)} {2}=na_1+\frac 12n(n-1)d \\ ②中项求和：S_n=\begin{cases} na_{\frac{n+1}{2}} ，n为奇数 \\ \frac n2(a_{\frac n2}+a_{\frac n2 + 1}) ，n为偶数 \end{cases}$</td></tr><tr><td style="text-align:center">等比数列</td><td style="text-align:center">$a_n=a_1·q^{n-1}$</td><td style="text-align:center">$a_m·a_n=a_i·a_j，其中 m+n=i+j$</td><td style="text-align:center">$S_n=\begin{cases} \frac{a_1(1-q^n)}{1-q}，q \neq 1 \\ na_1，q = 1 \end{cases}$</td></tr><tr><td style="text-align:center">平方数列</td><td style="text-align:center">$a_n=n^2$</td><td style="text-align:center"></td><td style="text-align:center">$S_n=\frac 16 n(n+1)(2n+1)$</td></tr><tr><td style="text-align:center">立方数列</td><td style="text-align:center">$a_n=n^3$</td><td style="text-align:center"></td><td style="text-align:center">$S_n=[\frac 12 n(n+1)]^2$</td></tr></tbody></table><ul><li>平方数列利用 $(n+1)^3-n^3=3n^2+3n+1$ 多项式求和</li><li>立方数列利用 $(n+1)^4-n4=4n^3+6n^2+4n+1$ 多项式求和</li></ul><h4 id="平均数与均值不等式">平均数与均值不等式</h4><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">概念及公式</th></tr></thead><tbody><tr><td style="text-align:center">算术平均数</td><td style="text-align:center">所有数据之和除以数据个数所得的商，用公式表示为 $ M=\frac {m_1+m_2+m_3+ \cdots +m_n}{n} $</td></tr><tr><td style="text-align:center">加权平均数</td><td style="text-align:center">比重不同的一组数据的平均数，即把原始数据按照合理的比例来计算。<br>在一组数据中，$ x_1、x_2、x_3、\cdots、x_k $ 出现的次数分别为 $ f_1、f_2、f_3、\cdots、f_k $ ，<br>且 $ f_1+f_2+f_3+ \cdots +f_k=n $，<br>那么这组数据的加权平均数 $ \overline X = \frac {x_1 \cdot f_1 + x_2 \cdot f_2 + \cdots + x_k \cdot f_k} {f_1+f_2+f_3+ \cdots +f_k} = \frac {x_1 \cdot f_1 + x_2 \cdot f_2 + \cdots + x_k \cdot f_k} {n} $</td></tr><tr><td style="text-align:center">几何平均数</td><td style="text-align:center">几个正实数乘积的n次算术根，用公式表示为 $ G=\sqrt[n]{m_1 \cdot m_2 \cdot m_c \cdot \cdots \cdot m_n} $</td></tr><tr><td style="text-align:center">圴值不等式</td><td style="text-align:center">任意几个正数的算术平均数总是不小于其几何平均数。即 $ \frac {m_1+m_2+m_3+ \cdots +m_n}{n} \geqslant \sqrt [n] {m_1 \cdot m_2 \cdot m_c \cdot \cdots \cdot m_n} $ ，当且仅当 $ m_1=m_2=m_3= \cdots =m_n $ 时，等号成立。</td></tr></tbody></table><ul><li>公务员考试多考查两个数或三个数的均值不等式：</li></ul><p>$ ① \frac {a+b}{2} \geqslant \sqrt{ab}，当且仅当 a=b 时等号成立；$</p><p>$ ② \frac {a+b+c}{2} \geqslant \sqrt[3]{abc}，当且仅当 a=b=c 时等号成立。$</p><h4 id="比较大小">比较大小</h4><p>常用的比较大小的方法有<strong>作差法</strong>、<strong>作商法</strong>、<strong>倒数法</strong>和<strong>中间值法</strong>。</p><h4 id="定义新运算">定义新运算</h4><p>解定义新运算问题，只需将新定义的运算规则转化为常规的四则运算即可。</p><h3 id="和差倍比问题">和差倍比问题</h3><h4 id="和差倍问题">和差倍问题</h4><p>和差倍问题的解题关键在于“1倍量”的计算，考生要正确理解题意。情况比较复杂时，可采用方程 法简化思路。</p><p>和差倍问题可分为如下三类：</p><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;分类&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;和倍关系&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;和 ÷ (倍数+1)=小数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;小数x倍数=大数&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;差倍关系&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;差 ÷ (倍数-1)=小数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;小数x倍数=大数&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;和差关系&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;(和+差)-2=大数&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;(和-差)-2=小数&quot;}]}]}"></svg></div><h4 id="比例问题">比例问题</h4><p>核心公式：分量 ÷ 总量 = 所占比例、分量 ÷ 所占比例 = 总量。</p><p>解题关键：比例问题的解题关键是找准各分量、总量及两者之间的比例关系。当题干涉及两个数的比，日这两个数必须为整数时。可运用数字特征对选项进行筛选，即排除法。分数、百分数皆适用。</p><h4 id="连比问题">连比问题</h4><p>在数学运算中，连比问题的题干多是给出三个已知量中任意两个比例式，可通过对两个比例式的转化得到三个量的比例关系。</p><p>解题关键：连比问题可通过找最小公倍数，直接确定答案。</p><h3 id="行程问题">行程问题</h3><ul><li>行程问题的研究核心是物体运动过程中速度、时间和路程三者之间的关系。</li></ul><h4 id="行程问题的基础知识">行程问题的基础知识</h4><p>核心公式：路程=时间x速度。</p><p>比例关系：时间相同，速度比=路程比；速度相同，时间比=路程比； 路程相同，速度比=时间反比。</p><p>平均速度：平均速度=总路程÷总时间。</p><p>若物体前一半时间以速度$v_1$运动，后一半时间以速度$v_2$运动，则全程的平均速度为$\frac {v_1+v_2}{2}$</p><p>若物体前一半路程以速度$v_1$运动，后一半路程以$v_2$运动，则全程的平均速度为$\frac {2v_1v_2}{v_1+v_2}$</p><h4 id="行程问题的基本类型">行程问题的基本类型</h4><p>常见的行程问题核心考点及相关公式如下表所示：</p><table><thead><tr><th style="text-align:center">问题类型</th><th style="text-align:left">核心考点及相关公式</th></tr></thead><tbody><tr><td style="text-align:center">相遇问题</td><td style="text-align:left">相遇问题主要研究两个物体相向(相对)运动的情况<br>相遇时间=相遇路程÷速度和</td></tr><tr><td style="text-align:center">追及向题</td><td style="text-align:left">追及问题主要研究两个物体同向运动的情况<br>追及时间=追及路程÷速度差</td></tr><tr><td style="text-align:center">往返多次相遇问题</td><td style="text-align:left">从两地同时出发的直线多次相遇问题中，第 n 次相遇时，每个人走的路程等于他第一次相遇时所走路程的 (2n-1) 倍</td></tr><tr><td style="text-align:center">环线相遇问题</td><td style="text-align:left">环线相遇向题中每次相遇所走的路程之和是一圈。如果最初从同一点出发，那么第 n 次相遇时，每个人所走的总路程等于第一次相遇时所走路程的 n 倍</td></tr><tr><td style="text-align:center">环线追及问题</td><td style="text-align:left">环线追及问题中每次相遇所走的路程差是一圈。如果最初从周长为 S 的环形跑道同一点出发，那么第 n 次相遇时，两个人的路程差为 nS</td></tr><tr><td style="text-align:center">流水问题</td><td style="text-align:left">流水问题主要是研究船在逆水和顺水时的速度差别<br>顺水速度=船速＋水速；逆水速度=船速-水速<br>船速=(顺水速度＋逆水速度)÷2；水速=(顺水速度-逆水速度)÷2</td></tr><tr><td style="text-align:center">火车过桥问题</td><td style="text-align:left">火车在运动过程中，在计算火车走过的路程时，需要将”车长“考虑进来<br>火车速度x时间=车长+桥长</td></tr></tbody></table><h3 id="工程问题">工程问题</h3><ul><li>工程问题中涉及工作量、工作时间和工作效率三个量，其核心公式是工作量=工作效率x工作时间。常见的工程问题如下所示</li></ul><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;工程问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;单独完成工程问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;合作完成工程问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;两人完全合作完工问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;合作＋休息完工问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;三人或多人完工问题&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;水管问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;单根水管进水&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;多根水管进水&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;同时进水出水&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;解题方法&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;特值法、方程法&quot;}]}]}"></svg></div> <ul><li>水管问题属于工程问题的衍生。当遇到注水问题时，可将注水管的工作效辛视为正，排水管的工作效率视为负；遇到排水问题时，注水管的工作效率为负，排水管的工作效率为正。</li></ul><h3 id="浓度问题">浓度问题</h3><ul><li>浓度问题指与溶液浓度相关的问题。题型可分为两种，溶液蒸发或稀释问题以及两种溶液的混合问题，</li></ul><h4 id="基本概念">基本概念</h4><ul><li>溶剂：溶剂是一种可以溶化固体、液体或气体的物质。日常生活中比较常见的溶剂一般为液体。例如盐水溶液中的水就是溶剂。</li><li>溶质：溶质是溶液中被溶剂溶解的物质。例如盐水溶液中的食盐就是溶质。</li><li>溶液：溶液是由溶质和溶剂共同组成的混合物。例如食盐溶于水形成的混合物为盐水溶液。</li><li>浓度：我们日常生活以及公务员考试中所涉及的浓度一般指的是质量百分浓度，即溶液中所含溶质质量与溶液质量的百分比。</li></ul><h4 id="基本公式">基本公式</h4><ul><li>溶液质量=溶质质量+溶剂质量</li><li>浓度=溶质质量-溶液质量×100%</li></ul><h4 id="溶液的混合特性">溶液的混合特性</h4><ul><li>一种高浓度的溶液 A 和一种低浓度的同种溶液 C 混合后得到溶液 B，那么溶液 B 的溶度肯定介于溶液 A 和溶液 C 的浓度之间。</li></ul><h3 id="利润问题">利润问题</h3><h4 id="概念及相关公式">概念及相关公式</h4><p>利润问题相关概念及公式如下所示：</p><table><thead><tr><th style="text-align:center">概念</th><th style="text-align:left">含义</th><th style="text-align:left">示例</th><th style="text-align:left">相关公式</th></tr></thead><tbody><tr><td style="text-align:center">进价</td><td style="text-align:left">商品买进的价格</td><td style="text-align:left">商家以每件 100 元买人某商品</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">定价</td><td style="text-align:left">商家根据进价定出的商品出售价格</td><td style="text-align:left">商家决定以每件 150 元卖出某商品</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">售价</td><td style="text-align:left">商品实际的出售价格</td><td style="text-align:left">商家实际以每件 120 元卖出某商品</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">利润</td><td style="text-align:left">售价与进价的差</td><td style="text-align:left">每件商品商家赚了 120-100=20 元</td><td style="text-align:left">利润=售价-进价</td></tr><tr><td style="text-align:center">利润率</td><td style="text-align:left">利润占进价的百分比</td><td style="text-align:left">利润率为 20÷100=20%</td><td style="text-align:left">$利润率= \frac {利润}{进价} $</td></tr></tbody></table><h4 id="主要题型">主要题型</h4><ul><li>简单获利问题：题目内容都与进价、售价和利润有关，主要利用相关公式解决问题。</li><li>打折问题：商家确定价格之后，为吸引更多顾客购买商品，通常采用打折的方式降低实际价格。</li><li>价格与销量反向变化问题：当商品价格上涨时，销量就会下降；价格下跌时，销量就会增加。在公务员考试中，研究此类问题，一般是求总利润最高时的售价或总利润的最大值</li><li>多种促销问题：商家有时会给出多种促销方式，我们需要通过计算，确定最优惠的促销方式。</li></ul><h3 id="容斥问题">容斥问题</h3><ul><li>几个集合之间存在交叉关系 ，要求根据其相互关系计算元素个数的问题称为“容斥原理”问题。公务员考试中，多涉及两个集合或三个集合。</li><li>容斥问题的常用解题方法有公式法和文氏图法两种。</li></ul><h4 id="公式法">公式法</h4><ul><li>两个集合：$A \cup B = A+B-A \cap B$</li><li>三个集合：$A \cup B \cup C=A+B+C-A \cap B-B \cap C-C \cap A+A \cap B \cap C$<br>注意：计算时要找准集合的对应关系及公式中各项的对应数值</li></ul><h4 id="文氏图法">文氏图法</h4><p>当题目关系较为复杂时，可考虑画文氏图，帮助看清各集合之问的关系。如下所示：</p><img src="/shu-liang-guan-xi/%E6%96%87%E6%B0%8F%E5%9B%BE.png" class="" title="文氏图"><h3 id="抽屉问题">抽屉问题</h3><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;抽屉原理问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;抽屉原理1&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;将多于n件的物品任意放到n个抽屈中，<br>那么至少有一个抽屉中的物品件数不少于2个<br>(也可以理解为至少有2件物品在同一个抽屋里)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;抽屉原理2&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;将多于(mxn)件的物品任意放到几个抽屉中，<br>那么至少有一个抽屉中的物品的件数不少于(m+1)，<br>也可以理解为至少有(m+1)件物品在同个抽屉里&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;最不利原则：考虑问题发生的最不利情况，然后就最不利情况进行分析&quot;}]}"></svg></div><h3 id="时钟问题">时钟问题</h3><h4 id="钟面问题">钟面问题</h4><ul><li>钟面问题主要研究钟面上时针与分针的关系，通常围绕时针与分针重合、垂直、成直线、呈多少度角提出问题。</li><li>钟面的1圈为60格，时针每小时走 5 格，即 30°，每分钟走 $\frac {1}{12} $ 一格，即 0.5°。</li><li>分针每小时走 1 圈，即 360°；每分钟走 1 格，即 6°。</li><li>时针与分针的速度之差为 5.5 度/分。<br><strong>解题关键:</strong> 确定分针与时针的初始位置，得出两者的路程差</li></ul><h4 id="坏钟问题">坏钟问题</h4><ul><li>涉及坏钟时间与标准时间的问题，统称为坏钟问题。</li><li>坏钟问题的本质是比例问题，解题时只需我出坏钟时间与标淮时间的倍比关系即可。每小时快 N 分钟，则标淮时间的 1 小时即 60 分钟里，快钟走(60+N)分钟，快钟时间:标淮时同=(60+N):60。</li></ul><h3 id="分段计价问题">分段计价问题</h3><p>分段计价是指按照不同的等级标淮，收取费用或进行利润分配。</p><p><strong>解题关键：</strong> 解决分段计价问题，关键是要弄清分界点，而后再分区间进行计算。情况复杂时可考虑 边界情况，帮助分析。解题过程中一般需要利用不定方程和数的特性，对选项进行合理地判断以提高计算效率。</p><h3 id="年龄问题">年龄问题</h3><p>年龄问题主要考查多人之间的年龄变化情况，其核心是“年龄差不变”。</p><h4 id="年龄问题的三大规律">年龄问题的三大规律</h4><p>年龄问题的三大规律为：①两人的年龄差是不变的；②两人年龄的倍数关系是变化的；③随着时间的推移，两人年龄的增加量相等</p><h4 id="常用解题方法">常用解题方法</h4><p>年龄问题常用解题方法包括：①方程法；②利用和差倍关系；③代入排除法。</p><h3 id="日期问题">日期问题</h3><p>日期问题是指根据已知条件求具体日期或者星期的一类问题。其主要知识点如下所示：</p><table><thead><tr><th style="text-align:center">知识点</th><th style="text-align:center">判断方法</th><th style="text-align:center">一年总天数</th><th style="text-align:center">2月天数</th></tr></thead><tbody><tr><td style="text-align:center">闰年</td><td style="text-align:center">非100的倍数，能被 4整除<br>100的倍效，能被 400整除</td><td style="text-align:center">366</td><td style="text-align:center">29</td></tr><tr><td style="text-align:center">平年</td><td style="text-align:center">不是闰年，则为平年</td><td style="text-align:center">365</td><td style="text-align:center">28</td></tr></tbody></table><p>星期每7天一循环。平年星期数加1，闰年星期数加 2(其间包含2月29日)</p><h3 id="植树问题">植树问题</h3><p>在给定的一段路线上等距离植树，同时给出植树的方式、相邻两树之间的距离或路的总长度等，要求求出共需要种至少多少棵树。这是植树问题常见的提问方式。</p><p>植树问题中经常涉及的概念有总路长、间距和棵数。</p><h4 id="基本类型">基本类型</h4><p>植树问题基本类型及其公式如下所示：</p><table><thead><tr><th style="text-align:center">问题类型</th><th style="text-align:center">公式</th></tr></thead><tbody><tr><td style="text-align:center">路不封闭且两端都植树</td><td style="text-align:center">棵数=总路长÷间距+1</td></tr><tr><td style="text-align:center">路不封闭且有一端植树</td><td style="text-align:center">棵数=总路长÷间距</td></tr><tr><td style="text-align:center">封闭道路植树(闭合曲线)</td><td style="text-align:center">棵数=总路长÷间距</td></tr><tr><td style="text-align:center">路不封闭且两端都不植树</td><td style="text-align:center">棵数=总路长÷间距-1</td></tr></tbody></table><h4 id="典型变形">典型变形</h4><p>围绕植树问题的核心概念———— 总路长、间距和棵数之间的相互关系，还可以对植树问题的题目背景进行拓展变形，衍生出下面四种题型</p><h5 id="锯木头问题">锯木头问题</h5><p>一根木料有两个端点，n 段有 2n 个端点，每锯一次增加两个端点。故一根木料要锯成 x 段，需要增加(2x-2)个端点，即只需锯(x-1)次，相当于两端不植树的不封闭植树问题</p><h5 id="爬楼梯问题">爬楼梯问题</h5><p>一幢 n 层的高楼，从底层到顶层需要走(n-1)层的楼梯，相当于两端都植树的不封闭植树问题。若爬完一层休息一次，则从底层到顶层需要休息(n-2)次。</p><h5 id="打木桩问题">打木桩问题</h5><p>一段路打了 n 个木桩，每一根木桩就相当于一棵树，一般来说，木桩要求在路的两端都要打上一根，因此，打木桩问题就相当于两端都植树的不封闭植树问题。</p><h5 id="队列问题">队列问题</h5><p>一列队伍中，每列(行)有 n 人，则中间有(n-1)个间距。若间距为 a 米，则队伍长为 a(n-1) 米，相当于两端都植树的不封闭植树问题。</p><h3 id="方阵问题">方阵问题</h3><p>方阵问题是指许多人或物按一定条件排成正方形(方阵)，需要根据方阵找出规律，进而解决问题。在解决问题时，首先要搞清方阵中的一些量(如层数、最外层人数、最里层人数、总人数)之间的关系，再选择方阵问题中常用的公式及性质。</p><p><strong>方阵问题的四个规律：</strong></p><p>方阵相邻两层人数相差8(此处需注意一种特殊情况，当实心方阵的最外层每边人数为奇数时，从内到外每层人数依次是 1、8、16、24……)。</p><p>实心方阵总人数=最外层每边人数的平方(核心公式)；空心方阵总人数利用等差数列求和公式求解(首项为最外层总人数，公差为-8)。</p><p>方阵每层总人数=方阵每层每边人数x4-4。</p><p>在方阵中若去掉一行一列，去掉的人数 = 原来每行人数x2-1； 在方阵中若去掉二行二列，去掉的人数 = 原来每行人数×4 - 2x2。</p><h3 id="盈亏问题">盈亏问题</h3><p>盈亏问题的常见形式为给出某物体的两种分配标准和结果，求物体和分配对象的数量。由于每次分配可能出现刚好分完、多余或不足三种情况，所以会出现多种结果的组合。</p><p>盈亏问题常见问题类型及其公式如下所示：</p><table><thead><tr><th style="text-align:center">问题类型</th><th style="text-align:center">公式</th></tr></thead><tbody><tr><td style="text-align:center">一盈一尽型</td><td style="text-align:center">盈数÷两次分配个数的差=对象数</td></tr><tr><td style="text-align:center">一亏一尽型</td><td style="text-align:center">亏数÷两次分配个数的差=对象数</td></tr><tr><td style="text-align:center">一盈一亏型</td><td style="text-align:center">(盈数＋亏数) ÷ 两次分配个数的差=对象数</td></tr><tr><td style="text-align:center">两次皆盈型</td><td style="text-align:center">(大盈数-小盈数) ÷ 两次分配个数的差=对象数</td></tr><tr><td style="text-align:center">两次皆亏型</td><td style="text-align:center">(大亏数-小亏数) ÷ 两次分配个数的差=对象数</td></tr></tbody></table><p>由上述公式可知，解决盈亏问题的关键是利用公式求出分配的对象数，再求出物资数。</p><p>公务员考试中常出现的是一盈一亏型。</p><h3 id="鸡兔同笼问题">鸡兔同笼问题</h3><p>在鸡兔同笼问题中，如果要求其中一种物品的数量，一般采用假设法，即“设鸡求免”。<br>在公考员考试中经常出现的“得失“问题，也可看作鸡兔同笼问题，利用假设法求解。具体解题方法如下所示：</p><table><thead><tr><th style="text-align:center">标准鸡兔同笼问题</th><th style="text-align:center">鸡免同笼问题变形题</th></tr></thead><tbody><tr><td style="text-align:center">设鸡求兔</td><td style="text-align:center">设得求失</td></tr><tr><td style="text-align:center">兔头数=(总脚数-2x总头数)÷2<br>鸡头数=总头数-免头数</td><td style="text-align:center">损失数=(每件应得x总件数-实得数)-(每件应得+每件损赔)</td></tr></tbody></table><p>除此之外，也可以用方程法解决此类问题。只需分别设出两种物品的数量，列二元一次方程组即可。</p><h3 id="牛吃草问题">牛吃草问题</h3><p>解牛吃草问题的一般流程如下：</p><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;设每头牛每天所吃的草量为 1&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;根据不同头数的牛吃光草所花的天数，<br>计算出草地每天新长的草量&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;草地每天新长的草量=(较多的天数x对应牛的头数-较少的天数x对应牛的头数)÷(较多的天数-较少的天数)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;计算草地原有的总草量&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;原有的总草量=(所有牛每天吃的草量-草地每天新长的草量)x天数&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;计算所求的牛吃草的天数&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;牛吃草的天数=原有的总草量÷(牛每天吃的草量-草地每天新长的草量)&quot;}]}]}"></svg></div><h3 id="几何问题">几何问题</h3><p>几何问题一般涉及几何图形的周长、面积、角度、表面积与体积等。最常见的形式是给出一个具体图形，直接计算某一个量。一般来说，几何图形的基本公式是解决几何问题的关键。</p><h4 id="1-几何问题核心公式">1. 几何问题核心公式</h4><h5 id="1-n-边形内角和公式">(1) n 边形内角和公式</h5><p>n 边形内角和为(n-2)×180°。</p><h5 id="2-平面图形">(2)平面图形</h5><p>常见平面图形的周长及面积公式如下所示：</p><table><thead><tr><th style="text-align:center">图形</th><th style="text-align:center">图例</th><th style="text-align:left">周长</th><th style="text-align:left">面积</th></tr></thead><tbody><tr><td style="text-align:center">三角形</td><td style="text-align:center">?</td><td style="text-align:left">$C=a+b+c$</td><td style="text-align:left">$S_{\triangle ABC}= \frac 12 ah \\ S_{\triangle ABC}=\frac 12ab \sin C = \frac 12 ac \sin B = \frac 12 bc\sin A$</td></tr><tr><td style="text-align:center">正方形</td><td style="text-align:center">?</td><td style="text-align:left">$C=4a$</td><td style="text-align:left">$S=a^2$</td></tr><tr><td style="text-align:center">长方形</td><td style="text-align:center">?</td><td style="text-align:left">$C=2 (a+b)$</td><td style="text-align:left">$S=ab$</td></tr><tr><td style="text-align:center">梯形</td><td style="text-align:center">?</td><td style="text-align:left">-</td><td style="text-align:left">$S= \frac 12(a+b)h$</td></tr><tr><td style="text-align:center">平行四边形</td><td style="text-align:center">?</td><td style="text-align:left">-</td><td style="text-align:left">$S=ah$</td></tr><tr><td style="text-align:center">圆形</td><td style="text-align:center">?</td><td style="text-align:left">$C=2 \pi r= \pi d$</td><td style="text-align:left">$S= \pi r^2 = \frac 14 \pi d^2 $</td></tr><tr><td style="text-align:center">扇形</td><td style="text-align:center">?</td><td style="text-align:left">$C=( 2 + \frac {n°} {180°} \pi )r$</td><td style="text-align:left">$ S = \frac {n°} {360°} \pi r^2$</td></tr></tbody></table><h5 id="3-立体图形">(3)立体图形</h5><p>常见立体图形的表面积及体积公式如下所示：</p><table><thead><tr><th style="text-align:center">图形</th><th style="text-align:center">图例</th><th style="text-align:left">表面积</th><th style="text-align:left">体积</th></tr></thead><tbody><tr><td style="text-align:center">长方体</td><td style="text-align:center">?</td><td style="text-align:left">$S=2 (ab+bc+ac)$</td><td style="text-align:left">$V=abc$</td></tr><tr><td style="text-align:center">正方体</td><td style="text-align:center">?</td><td style="text-align:left">$S=6a^2$</td><td style="text-align:left">$V=a^3$</td></tr><tr><td style="text-align:center">球体</td><td style="text-align:center">?</td><td style="text-align:left">$S=4 \pi r^2$</td><td style="text-align:left">$V= \frac 43 \pi r^3$</td></tr><tr><td style="text-align:center">圆柱体</td><td style="text-align:center">?</td><td style="text-align:left">$S=2 \pi r^2 +2 \pi rh$</td><td style="text-align:left">$V=Sh=\pi r^2h \\ (S为圆柱底面积)$</td></tr><tr><td style="text-align:center">圆锥体</td><td style="text-align:center">?</td><td style="text-align:left">-</td><td style="text-align:left">$V=\frac 13Sh=\frac 13 \pi r^2h \\ (S为圆锥底面积)$</td></tr></tbody></table><h4 id="2-一般解题过程中的常用结论">2.一般解题过程中的常用结论</h4><h5 id="1-极限理论">(1)极限理论</h5><ul><li>平面图形：①周长一定，越趋近于圆，面积越大；②面积一定，越趋近于圆，周长越小。</li><li>立体图形：①表面积一定，越趋近于球，体积越大；②体积一定，越趋近于球，表面积越小。</li></ul><h5 id="2-三角形的常见考点">(2)三角形的常见考点</h5><p>三角形的常见考点包括，①两边之和大于第三边，两边之差小于第三边；②较小的角对应边也较小。</p><h3 id="排列组合与概率问题">排列组合与概率问题</h3><h4 id="1-排列组合">1.排列组合</h4><h5 id="1-两个基本原理">(1)两个基本原理</h5><p>排列组合的两个基本原理如下所示：</p><ul><li>分类用加法原理：$m_1 + m_2 + \dots + m_n$</li><li>分步用乘法原理：$m_1 × m_2 × \dots × m_n$</li></ul><h5 id="2-三个原则">(2)三个原则</h5><p>排列组合的三个原则包括：①特殊元素优先考虑；②复杂问题从对立面考虑；③环形问题转化为直线问题</p><h5 id="3-四个方法">(3)四个方法</h5><ul><li>捆绑法：n 个不同元素排成一列，要求 m 个元素必须相邻，可以把 m 个元素看成一个整体，此时有 $A_{n-m+1}^{n-m+1}A_m^m$ 种排法。</li><li>插空法：n 个不同元素排成一列，要求 m 个元素互不相邻，可以先排好其余的(n-m)个元素，然后将 m 个元素插到(n-m)个元素形成的(n-m+1)个空之间，有 $A_{n-m}^{n-m}A_{n-m+1}^m$ 种排法。</li><li>插板法：将 n 个相同元素分成 m 堆，每堆至少一个，相当于将 (m-1) 个木板插到 n 个元素形成的(n-1) 个“空”中，有 $C_{n-1}^{m-1}$ 种分法。</li><li>归一法：n 个不同元素排成一列，其中 m 个元素的位置相对确定，如甲必须在乙前面等，此时将所有元素正常全排列，然后除以 m 个元素的全排列数即可，此时有 $\frac {A_n^n} {A_m^m} = \frac {n!} {m!}$ 种排法。</li></ul><p>以上几种方法的针对性很强，只能够解决某一种排列组合问题，但是这些问题正好就是公务员考试中的重点题型。</p><h5 id="4-两个经典模型">(4)两个经典模型</h5><ul><li>错位重排：错位重排问题是指把 n 个元素的位置重新排列，使每个元素都不在原来的位置上的排列问题。记 n 个元素错位重排数为 $D_n$ ，则 $D_n=(n-1)(D_{n-1}+D_{n-2})，D_1=0，D_2=1，D_3=2$。</li><li>环线排列：环线上的排列问题没有前后与首尾之分，任取一个元素作为队首，环线排列问题便转化为剩下 (n-1) 个元素的直线排列问题，不同的排列方式有 $A_{n-1}^{n-1} = (n-1)!$ 种</li></ul><h4 id="2-概率问题">2. 概率问题</h4><p>常见的概念问题类型及其概念、公式如下所示：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:left">概念及公式</th></tr></thead><tbody><tr><td style="text-align:center">古典概率</td><td style="text-align:left">将所有情况分成 n 个等可能的情形，其中事件 A 包括了 m 个情形，那么事件 A 发生的概率为 $\frac mn，记为 P(A)$</td></tr><tr><td style="text-align:center">条件概率</td><td style="text-align:left">事件 A 在另外一个事件 B 己经发生的条件下的发生概率，记为 P(A | B) <br>P(A | B)=$\frac {P(A B)}{P(B)}$ P(AB)为AB同时发生的概率，P(B) 为 B 发生的概率</td></tr><tr><td style="text-align:center">独立重复试验概率</td><td style="text-align:left">如果在一次试验中事件 A 发生的概率为p，在 n 次独立重复试验中，事件 A 发生 k 次的概率为 P(k) = $C_n^kp^k(1-p)^{n-k}$</td></tr></tbody></table><h3 id="统筹问题">统筹问题</h3><p>统筹问题的本质就是在众多利用人力、物力资源的方案中，选择一个最优的万案，使工作效率达到最高。此类问题是最为贴近实际生活的，需要具体问题具体分析。题型主要可分为以下几类：</p><table><thead><tr><th style="text-align:center">题型分类</th><th style="text-align:left">解题方法</th></tr></thead><tbody><tr><td style="text-align:center">时间安排问题</td><td style="text-align:left">关键：找出能同时进行的任务，缩短工作时间</td></tr><tr><td style="text-align:center">排队问题</td><td style="text-align:left">关键：找出能同时进行的任务，缩短工作时间</td></tr><tr><td style="text-align:center">空瓶换酒问题</td><td style="text-align:left">核心公式：$C= /frac {B}{A-1}，A 代表 A 个空瓶可以换 1 瓶酒，B =空瓶数，C 代表通过空瓶换酒能喝到多少瓶酒</td></tr><tr><td style="text-align:center">物资集中问题</td><td style="text-align:left">本质:判断货物流通的方向。常用方法为判断每条“路”两侧的货物总重量，在这条“路”上一定是从轻的一侧流向重的一侧(只适用于非闭合路径中)</td></tr><tr><td style="text-align:center">货物装卸问题</td><td style="text-align:left">结论：如果有 M 辆车和 N(N&gt;M) 个工厂，所需装卸工的总数就是需要装卸工人数最多的M个工厂所需装卸工人数之和(若 M $\geqslant$ N ，则跟车人数为 0，各点需要工人数之和即答案)</td></tr><tr><td style="text-align:center">策略制定问题</td><td style="text-align:left">实质：利用数学工具或数学思维有规划地安排工作内容及流程，使人力、物力、时间、金钱等得到合理的利用，确保使用最少的资源达到最高的效率</td></tr></tbody></table><h3 id="推理问题">推理问题</h3><p>推理问题主要考查应试者的基本逻辑推理能力。考生依据题干条件进行步骤推理，以而对数学运算中的数量关系进行限定，最终得出结论。随着公务员考试对考生思维过程考查的力度加大，推理问题出现的频率越来越高，难度也有所加大。常见的推理问题题型及解题思路如下所示：</p><table><thead><tr><th style="text-align:center">题型</th><th style="text-align:left">解题思路</th></tr></thead><tbody><tr><td style="text-align:center">利用逻辑知识推理</td><td style="text-align:left">考生需具备清哳的推理思维能力，与逻辑判断题类似，但需要进行简单的计算</td></tr><tr><td style="text-align:center">利用整数性质推理</td><td style="text-align:left">题干通常给出若干个不同的整数，利用整数的相关性质(如奇偶性、整除性)，结合题干中的信息进行推理分析</td></tr><tr><td style="text-align:center">利用最值思想推理</td><td style="text-align:left">通过计算，从最差或最好的情况出发，进行推理</td></tr><tr><td style="text-align:center">利用不定方程推理</td><td style="text-align:left">根据题干的数量关系列出不定方程，再通过限制条件求解</td></tr></tbody></table><h2 id="数学推理">数学推理</h2><h3 id="等差数列及其变式">等差数列及其变式</h3><p>如果一个数列从第二项起，每一项与前一项的差等于同一个常数，那么，该数列就叫作<strong>等差数列</strong>。等差数列的变化形式如下图所示</p><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;等差数列&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;一次作差&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;得到常数 =&amp;gt; 等差数列&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;得到等差数列 =&amp;gt; 二级等差数列&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,6]},&quot;v&quot;:&quot;作差后得到其他基本数列或变式(如等比数列、多次方数列、和数列、循环数列、质数列_) =&amp;gt; 二级<strong>等差数列变式</strong><br>\n二级等差数列变式&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;两次作差&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;得到等差数列 =&amp;gt; 三级等差数列&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;两次作差后得到其他数列或变式 =&amp;gt; 三级<strong>等差数列变式</strong>&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;三次或以上做差&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;得到等差数列 =&amp;gt; 多级等差数列&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;三次或以上做差后得到其他数列或变式 =&amp;gt; 多级<strong>等差数列变式</strong>&quot;}]}]}"></svg></div><h3 id="等比数列及其变式">等比数列及其变式</h3><p>如果一个数列从第二项起，每一项与它前面一项的比等于同一个非0常数，那么该数列就叫作<strong>等比数列</strong>。等比数列的主要变化形式如下图所示：</p><ul><li>基本等比数列 (后一项÷前一项)<ul><li>常数</li></ul></li><li>等比数列变式 (后一项÷前一项)<ul><li>等比数列、等差数列、多次方数列、和数列、质数列、循环数列……</li><li>前一项x常数+常数=后一项 <br> 前一项x常数+基本数列=后一项 <br> 前一项x基本数列+常数=后一项 <br> 前一项x基本数列+基本数列=后一项 <br> _</li></ul></li></ul><h3 id="和数列及其变式">和数列及其变式</h3><p><strong>和数列及其变式</strong>指通过作和寻求规律的数列。</p><h4 id="1-典型和数列">1.典型和数列</h4><ul><li>两项和数列：从第三项起，每一项等于它前面两项之和。</li><li>三项和数列：从第四项起，每一项等于它前面三项之和。</li><li><strong>拓展</strong>：每一项等于它前面所有项之和。</li></ul><h4 id="2-和数列变式">2.和数列变式</h4><p>和数列变式根据变化方式的不同，主要分成以下三类。</p><ul><li>和数列变式分类<ul><li>相邻两项依次求和，得到基本数列或变式<ul><li>求和得到等差数列、等比数列、多次方数列、质数列。</li></ul></li><li>相邻两项求和后经过简单变化，得到第三项。<ul><li>第一项+第二项+常数=第三项<br>第一项+第二项+基本数列=第三项<br>(第一项+第三项)x常数=第三项<br>(第一项+第二项)x基本数列=第三项<br>_</li></ul></li><li>相邻两项简单变化后求和。得到第三项<ul><li>第一项+第二项x常数=第三项<br>第一项x常数+第二项=第三项<br>第一项x常数＋第二项x常数=第三项<br>第一项x基本数列+第二项x基本数列=第三项<br>_</li></ul></li></ul></li></ul><h3 id="积数列及其变式">积数列及其变式</h3><p><strong>积数列及其变式</strong>是指项与项间通过作积呈现出一定规律的数列。其主要变化形式如下图所示：</p><ul><li>积数列基本形式<ul><li>三项积数列<ul><li>每一项等于前三项相乘</li></ul></li><li>两项积数列<ul><li>每一项等于前两项相爽</li></ul></li></ul></li><li>积数列变式<ul><li>相邻两项依次求积，得到基本数列</li><li>相邻两项求积之后，经过简单变化得到第三项</li></ul></li></ul><h3 id="多次方数列及其变式">多次方数列及其变式</h3><p>数列呈现多次方数，且底数、指数各自具有规律，称为<strong>多次方数列</strong>；在此基础上经过简单运算得到的数列，为<strong>多次方数列变式</strong>。它们的主要规律如下表所示：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:left">规律</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:center">多次方数列基本形式</td><td style="text-align:left">平方数列：数列逐项可以改写为平方数，底数呈现规律</td><td style="text-align:left">数列 1，4，9，16，可以改写为 $1^2，2^2，3^2，4^2$</td></tr><tr><td style="text-align:center">多次方数列基本形式</td><td style="text-align:left">立方数列：数列逐项可以改写为立方数，底数呈现规律</td><td style="text-align:left">数列 1，8，27，64，可以改写为 $1^3，2^3，3^3，4^3$</td></tr><tr><td style="text-align:center">多次方数列基本形式</td><td style="text-align:left">多次方数列：数列各项可改写成指数、底数均不相同的数列，底数和指数分别具有规律</td><td style="text-align:left">数列 0，1，8，81，可以改写为 $0^1，1^2，2^3，3^4$</td></tr><tr><td style="text-align:center">多次方数列变式</td><td style="text-align:left">对数列各项进行多次方改写，并加入常数做简单运算得到原数列</td><td style="text-align:left">数列 2，5，10，17，经过换算后为 $1^2+1，2^2+1，3^2+1，4^2+1$</td></tr><tr><td style="text-align:center">多次方数列变式</td><td style="text-align:left">数列各项之间通过幂次运算形成递推规律</td><td style="text-align:left">数列 2，3，11，38，规律为第一项的立方+第一项=第三项即 $2^3+3=11，3^3+11=38$</td></tr></tbody></table><h3 id="分式数列">分式数列</h3><p>  <strong>分式数列</strong>是指题干以分数为主的数列。由于分数本身可以进行通分和约分，所以分子、分母具有多变性，这也是分式数列规律难以寻找的主要原因。<br>  分式数列最基本的表现形式是数列本身可以构成基本数列或其变式。<br>  在公务员考试中，分式数列的考查重点是按其内在变化规律分为两类：一种是分子分母分别变化型；另一种是分子分母关联变化型。其具体变化规律如下表所示：</p><table><thead><tr><th style="text-align:center">规律变化类型</th><th style="text-align:left">                   举例说明                   </th></tr></thead><tbody><tr><td style="text-align:center">分子分母分别变化型</td><td style="text-align:left">$数列各项的分子、分母分别组成基本数列或其变式 \\ 例如： \frac 21，\frac 64，\frac {10}{9}，\frac {14}{16}，\frac {18}{25}$</td></tr><tr><td style="text-align:center">分子分母关联变化型</td><td style="text-align:left">$依次变化型：将数列各项的分子分母依次排列，得到一个基本数列或其变式 \\ 例如：数列\frac 12，\frac 34，\frac 56，\frac 78 分子分母依次排列得到自然然数列1，2，3，4，5，6，7，8$</td></tr><tr><td style="text-align:center">分子分母关联变化型</td><td style="text-align:left">$交错变化型：两个基本数列在各项分子、分母位置交错排列 \\ 例如：数列 \frac 11，\frac 34，\frac 95，\frac {7}{16}，\frac {25}{9}，\frac {11}{36} \begin{cases} 公差为2的等差数列 \\ 平方数列 \end{cases}$</td></tr><tr><td style="text-align:center">分子分母关联变化型</td><td style="text-align:left">$递推变化型：数列各项的分子(或分母)都是前一项分子、分母简单运算的结果，\\ 有时也涉及本项的分母(或分子) \\ 例如：数列各项依次是 \frac 11，\frac 24，\frac {6}{11}，\frac{17}{29}，\frac{46}{76}，\frac {122}{199} \\ 每一项的分子等于前一项的分子与分母的和，46+76=(122) \\ 每一项的分母等于该项的分子加前一项的分母再加 1，76+122+1=(199)。\\  或分母依次是 1，4，11，29，76，(199)，满足第二项x3-第一项=第三项，\\ 依此类推，所填分数的分母为 76×3-29=(199)$</td></tr></tbody></table><h3 id="组合数列">组合数列</h3><p>与之前所讲的等差数列、等比数列、和数列、积数列不同，组合数列的侧重点是考查数列结构特征，只要考生发现了数列的结构特征，就能找到推理规律，组合数列主要分为以下三类：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:left">特点</th></tr></thead><tbody><tr><td style="text-align:center">间隔组合数列</td><td style="text-align:left">数列的奇数项和偶数项分别构成某个基本数列或其变式</td></tr><tr><td style="text-align:center">分组组合数列</td><td style="text-align:left">数列相邻数宇可分成独立的几组，组内数字或组间数字在运算关系上存在一定的联系</td></tr><tr><td style="text-align:center">数位组合数列</td><td style="text-align:left">数位对应型数列：各项相同数位上的数字组成一个简单数列</td></tr><tr><td style="text-align:center">数位组合数列</td><td style="text-align:left">数位关系型数列：每项分成几个部分，构成运算关系，各项彼此之间存相同或相似的联系</td></tr></tbody></table><h3 id="创新数列">创新数列</h3><p>除去以上介绍的数字推理中各类常考的基本数列及其变式，随着数字推理题型的发展和创新。又出现了很多新颖的数字推理规律。归纳总结，大致可按以下几个方面分类：</p><ul><li>创新数列<ul><li>质数列<ul><li>质数(或合数)按某种规律排列位置</li></ul></li><li>数字和(数字积)<ul><li>各项数字和(或数字积)相等或组成简单基本数列</li></ul></li><li>数字排序<ul><li>数项各位数字按一定规律排列</li></ul></li><li>运算关系<ul><li>类似于递推数字规律，但运算方式更加新颖、复杂</li></ul></li><li>其他形式</li></ul></li></ul><h3 id="图形形式数字推理">图形形式数字推理</h3><p><strong>图形形式数字推理</strong>是指数字分布在图形中，由于位置不同而具有相应的运算关系。按图形形状可分为以下几类：9</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:left">表现形式</th><th style="text-align:left">核心本质</th></tr></thead><tbody><tr><td style="text-align:center">圆圈形式</td><td style="text-align:left">四个数字分布在一个被四等分的圆中</td><td style="text-align:left">按纵、横、斜向(对角线)三种方式对数字进行分组，通过运算使两组数的结果相等</td></tr><tr><td style="text-align:center">圆圈形式</td><td style="text-align:left">在简单圆圈形式的基础上在中心增加一个数字</td><td style="text-align:left">四周的数字通过简单运算得到中间的数字</td></tr><tr><td style="text-align:center">表格形式</td><td style="text-align:left">数字在表格之中，多为九宫格样式</td><td style="text-align:left">同九宫格形式的图形推理类似，运算规律多，集中在行列间，有时也表现为整体规律</td></tr><tr><td style="text-align:center">表格形式</td><td style="text-align:left">带中心数宇圆圈形式数字推理的变形</td><td style="text-align:left">同带中心数字的圆圈形式数字推理一致</td></tr><tr><td style="text-align:center">三角形式</td><td style="text-align:left">带中心数字圆圈形式的简化，三角形的三个角各有一个数字，中间有一个数字</td><td style="text-align:left">三个角的数字通过运算得到中间数宇</td></tr><tr><td style="text-align:center">其他图形形式</td><td style="text-align:left">各种图形的变形、简化</td><td style="text-align:left">均需要通过构造运算规律，得到等量关系</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 国家公务员招录考试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows常见问题</title>
      <link href="/windows-chang-jian-wen-ti/"/>
      <url>/windows-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="提示你的家庭版-Windows-11-不支持远程桌面">提示<code>你的家庭版 Windows 11 不支持远程桌面</code></h2><h3 id="安装-RDP-wrap">安装 <code>RDP wrap</code></h3><p><a href="https://github.com/stascorp/rdpwrap/releases">下载地址</a><br><a href="http://www.taodudu.cc/news/show-6137332.html?action=onClick">安装地址</a><br><a href="https://blog.csdn.net/NXY666/article/details/121152969">listening</a></p>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 远程桌面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用快捷键</title>
      <link href="/windows-chang-yong-kuai-jie-jian/"/>
      <url>/windows-chang-yong-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows常用快捷键">Windows常用快捷键</h2><table><thead><tr><th style="text-align:center">命令</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">Alt+Tab</td><td>切换窗口</td><td></td></tr><tr><td style="text-align:center">Win+D</td><td>收起/打开所有当前窗口</td><td></td></tr><tr><td style="text-align:center">Alt+Esc</td><td>最小化当前窗口</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+A</strong></td><td>全选</td><td></td></tr><tr><td style="text-align:center">Ctrl+B</td><td>字体加粗</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+C</strong></td><td>复制</td><td></td></tr><tr><td style="text-align:center">Ctrl+D</td><td>向下填充</td><td></td></tr><tr><td style="text-align:center">Ctrl+E</td><td>居中</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+F</strong></td><td>查找</td><td></td></tr><tr><td style="text-align:center">Ctrl+G</td><td>定位</td><td></td></tr><tr><td style="text-align:center">Ctrl+H</td><td>替换</td><td></td></tr><tr><td style="text-align:center">Ctrl+I</td><td>字体倾斜</td><td></td></tr><tr><td style="text-align:center">Ctrl+J</td><td>换行符</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+K</td><td>超链接</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+L</td><td>创建表</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+M</td><td>合井单元格</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+N</td><td>新建</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+O</td><td>打开</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+P</td><td>打印</td><td></td></tr><tr><td style="text-align:center">Ctrl+Q</td><td>快速分析</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+R</td><td>向右填充</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+S</td><td>保存文件</td><td></td></tr><tr><td style="text-align:center">Ctrl+T</td><td>超级表格</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+U</td><td>下划线</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+V</strong></td><td>粘贴</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+W</strong></td><td>关闭文件</td><td>可关闭浏览器窗口</td></tr><tr><td style="text-align:center"><strong>Ctrl+X</strong></td><td>剪切</td><td></td></tr><tr><td style="text-align:center">Ctrl+Y</td><td>恢复上一步</td><td></td></tr><tr><td style="text-align:center"><strong>Ctrl+Z</strong></td><td>撤销</td><td></td></tr><tr><td style="text-align:center">Ctrl+0</td><td>隐藏列</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+1</td><td>设置单元格格式</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+2</td><td>添加/取消字体加粗</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+3</td><td>添加/取消字体项斜</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+4</td><td>添加/取消下划线</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+5</td><td>添加/取消删除线</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+6</td><td>隐藏/显示图形</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+7</td><td>隐藏工具栏</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+8</td><td>隐藏/显示大纲符号</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+9</td><td>隐藏行</td><td>?</td></tr><tr><td style="text-align:center">Ctrl±</td><td>删除行/列</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+;</td><td>显示当前日期</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+⬇</td><td>格动列数据区城最后-行</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+➡</td><td>移动列数据区城最后一列</td><td>?</td></tr><tr><td style="text-align:center">Ctrl+Enter</td><td>向选定单元格填充相同的数据</td><td>?</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows常用快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Svn</title>
      <link href="/svn/"/>
      <url>/svn/</url>
      
        <content type="html"><![CDATA[<h2 id="复制svn代码仓库">复制svn代码仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成仓库可导出文件</span>svnadmin dump /var/svnrepos/10bjq <span class="token operator">&gt;</span> bjq.dump<span class="token comment"># 创建新的仓库</span>svnadmin create /var/svnrepos/10bjq-ssww<span class="token comment"># 导入仓库备份</span>svnadmin load /var/svnrepos/10bjq-ssww  <span class="token operator">&lt;</span> bjq.dump<span class="token comment"># 给新仓库用户授权</span><span class="token function">vim</span> /var/svnrepos/conf/authz<span class="token comment"># 删除仓库(不可逆)</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/svnrepos/10bjq-ssww<span class="token comment"># 任何配置项修改需要重启svn服务器</span><span class="token function">service</span> svnserve restart<span class="token comment"># 检查svn服务运行状态</span><span class="token function">service</span> svnserve status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码仓库 </tag>
            
            <tag> Svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP理论与实战</title>
      <link href="/aop/"/>
      <url>/aop/</url>
      
        <content type="html"><![CDATA[<h3 id="父类的切面继承类重写后失效的问题">父类的切面继承类重写后失效的问题</h3><ul><li>项目上开启切面继承类有效</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>子类调用不使用super, 从切面上下文中获取</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// return super.plusImportExcel(viewId, file, listenerBuilder);</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PublicServiceImpl</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusImportExcel</span><span class="token punctuation">(</span>viewId<span class="token punctuation">,</span> file<span class="token punctuation">,</span> listenerBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/typescript/"/>
      <url>/typescript/</url>
      
        <content type="html"><![CDATA[<p>官方文档 <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#object-types">https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#object-types</a></p><p>在线运行 <a href="https://www.typescriptlang.org/play">https://www.typescriptlang.org/play</a></p><p>学习手册1 <a href="https://www.wenjiangs.com/doc/typescript-typeguard">https://www.wenjiangs.com/doc/typescript-typeguard</a></p><h2 id="语法介绍">语法介绍</h2><h3 id="基础介绍">基础介绍</h3><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">名称</th><th style="text-align:left">解释</th><th style="text-align:left">用例</th></tr></thead><tbody><tr><td style="text-align:center">boolean</td><td style="text-align:center">布尔值</td><td style="text-align:left">最基本的数据类型就是简单的值</td><td style="text-align:left">let isDone: boolean = false;</td></tr><tr><td style="text-align:center">number</td><td style="text-align:center">数字</td><td style="text-align:left">和JavaScript一样，TypeScript里的所有数字都是浮点数。<br>这些浮点数的类型是 number。<br>除了支持十进制和十六进制字面量，<br>TypeScript还支持ECMAScript 2015中引入的二进制和八进制字面量。</td><td style="text-align:left">let decLiteral: number = 6;<br>let hexLiteral: number = 0xf00d;<br>let binaryLiteral: number = 0b1010;<br>let octalLiteral: number = 0o744;</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">字符串</td><td style="text-align:left">我们使用 string表示文本数据类型。<br>和JavaScript一样，可以使用双引号（ "）或单引号（'）表示字符串。<br>还可以使用模板字符串<br>这种字符串是被反引号包围（ `），并且以${ expr }这种形式嵌入表达式。</td><td style="text-align:left">let myName: string = 'bob';<br>myName = 'smith';<br>let sentence: string = `Hello, my name is ${ myName }.`;<br>console.log(sentence);</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">数组</td><td style="text-align:left">有两种方式可以定义数组。<br>第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组<br>第二种方式是使用数组泛型，Array&lt;元素类型&gt;</td><td style="text-align:left">let myList1: number[] = [1, 2, 3];<br>console.log(myList1);<br>let myList2: Array&lt;number&gt; = [1, 2, 3];<br>console.log(myList2);</td></tr><tr><td style="text-align:center">Tuple</td><td style="text-align:center">元组</td><td style="text-align:left">元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。<br>当访问一个已知索引的元素，会得到正确的类型<br>当访问一个越界的元素，会使用联合类型替代<br><a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types">扩展使用</a></td><td style="text-align:left">let x: [string, number];<br>let x: [boolean, …string, number];<br></td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">枚举</td><td style="text-align:left">使用枚举类型可以为一组数值赋予友好的名字。<br>使用枚举可以更简单的表明意图或创建一组特殊意义的集合<br>枚举支持数字类型和字符串类型<br><a href="https://www.typescriptlang.org/docs/handbook/enums.html">扩展使用</a></td><td style="text-align:left">enum Color {RAD = ‘red’, BLUD = 0}<br>console.log(Color.RAD) // red<br>console.log(Color[0]) // BLUD</td></tr><tr><td style="text-align:center">any</td><td style="text-align:center">Any</td><td style="text-align:left">编程阶段还不清楚类型的变量指定一个类型</td><td style="text-align:left">let notSure: any = 4;<br>notSure = “maybe a string instead”;<br>notSure = false; // okay, definitely a boolean</td></tr><tr><td style="text-align:center">void<br>null<br>undefined</td><td style="text-align:center">Void<br>Null<br>Undefined</td><td style="text-align:left">void类型像是与any类型相反，它表示没有任何类型。<br>当一个函数没有返回值时，你通常会见到其返回值类型是 void.<br>声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null.<br>undefined和null两者各自有自己的类型分别叫做undefined和null.<br>默认情况下null和undefined是所有类型的子类型.</td><td style="text-align:left">let unusable: void = undefined;<br>// Not much else we can assign to these variables!<br>let u: undefined = undefined;<br>let n: null = null;</td></tr><tr><td style="text-align:center">never</td><td style="text-align:center">Never</td><td style="text-align:left">never类型表示的是那些永不存在的值的类型<br>never类型是任何类型的子类型，也可以赋值给任何类型</td><td style="text-align:left">// 返回never的函数必须存在无法达到的终点<br>function error(message: string): never {<br>    throw new Error(message);<br>}</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">Object</td><td style="text-align:left">指任何带有属性的JavaScript值-非基础类型<br>对象类型也可以指定其部分或全部属性是可选的。</td><td style="text-align:left">function printName(obj: { first: string; last?: string }) {<br>  // …<br>}<br>// Both OK<br>printName({ first: “Bob” });<br>printName({ first: “Alice”, last: “Alisson” });</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center">Type Aliases</td><td style="text-align:left">多次使用同一个类型并以一个名字来引用它是很常见的。</td><td style="text-align:left">type Point = {<br>  x: number;<br>  y: number;<br>};<br>// Exactly the same as the earlier example<br>function printCoord(pt: Point) {<br>  console.log("The coordinate’s x value is " + pt.x);<br>  console.log("The coordinate’s y value is " + pt.y);<br>}<br>printCoord({ x: 100, y: 100 });</td></tr><tr><td style="text-align:center">interface</td><td style="text-align:center">Interfaces</td><td style="text-align:left">接口声明是命名一个对象类型的另一种方式。</td><td style="text-align:left">interface Point {<br>  x: number;<br>  y: number;<br>}<br>function printCoord(pt: Point) {<br>  console.log("The coordinate’s x value is " + pt.x);<br>  console.log("The coordinate’s y value is " + pt.y);<br>}<br>printCoord({ x: 100, y: 100 });</td></tr><tr><td style="text-align:center">class</td><td style="text-align:center">Class</td><td style="text-align:left">TypeScript实现了 <code>class</code> 关键字 <br> <a href="https://www.typescriptlang.org/docs/handbook/2/classes.html#class-members">扩展使用</a></td><td style="text-align:left"></td></tr></tbody></table><h4 id="元组使用详情">元组使用详情</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Declare a tuple type</span><span class="token comment">// Initialize it</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token comment">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Error</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error, 'number' does not have 'substr'</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span> <span class="token comment">// OK, 字符串可以赋值给(string | number)类型</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, 'string' 和 'number' 都有 toString</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Error, 布尔不是(string | number)类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="元组的进阶使用">元组的进阶使用</h5><p>Tuples can also have rest elements, which have to be an array/tuple type.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">StringNumberBooleans</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">StringBooleansNumber</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">BooleansStringNumber</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>StringNumberBooleans</code> describes a tuple whose first two elements are <code>string</code> and <code>number</code> respectively, but which may have any number of <code>boolean</code>s following.</li><li><code>StringBooleansNumber</code> describes a tuple whose first element is <code>string</code> and then any number of <code>boolean</code>s and ending with a <code>number</code>.</li><li><code>BooleansStringNumber</code> describes a tuple whose starting elements are any number of <code>boolean</code>s and ending with a <code>string</code> then a <code>number</code>.</li></ul><p>A tuple with a rest element has no set “length” - it only has a set of well-known elements in different positions.</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> a<span class="token operator">:</span> StringNumberBooleans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b<span class="token operator">:</span> StringNumberBooleans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"beautiful"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> c<span class="token operator">:</span> StringNumberBooleans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Why might optional and rest elements be useful? Well, it allows TypeScript to correspond tuples with parameter lists. Tuples types can be used in <a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments">rest parameters and arguments</a>, so that the following:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">readButtonInput</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> version<span class="token punctuation">,</span> <span class="token operator">...</span>input<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>is basically equivalent to:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">readButtonInput</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>input<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This is handy when you want to take a variable number of arguments with a rest parameter, and you need a minimum number of elements, but you don’t want to introduce intermediate variables.</p><h4 id="枚举的使用详情">枚举的使用详情</h4><ul><li><p>The enum member is initialized with a constant enum expression. A constant enum expression is a subset of TypeScript expressions that can be fully evaluated at compile time. An expression is a constant enum expression if it is:</p><ol><li>a literal enum expression (basically a string literal or a numeric literal)</li><li>a reference to previously defined constant enum member (which can originate from a different enum)</li><li>a parenthesized constant enum expression</li><li>one of the <code>+</code>, <code>-</code>, <code>~</code> unary operators applied to constant enum expression</li><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> binary operators with constant enum expressions as operands</li></ol><p>It is a compile time error for constant enum expressions to be evaluated to <code>NaN</code> or <code>Infinity</code>.</p></li></ul><p>In all other cases enum member is considered computed.</p><pre class="line-numbers language-none"><code class="language-none">enum FileAccess {  // constant members  None,  Read = 1 &lt;&lt; 1,  Write = 1 &lt;&lt; 2,  ReadWrite = Read | Write,  // computed member  G = "123".length,}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> LogLevel <span class="token punctuation">{</span>    <span class="token constant">ERROR</span><span class="token punctuation">,</span>    <span class="token constant">WARN</span><span class="token punctuation">,</span>    <span class="token constant">INFO</span><span class="token punctuation">,</span>    <span class="token constant">DEBUG</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">/** * This is equivalent to: * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG'; */</span><span class="token keyword">type</span> <span class="token class-name">LogLevelStrings</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> LogLevel<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printImportant</span><span class="token punctuation">(</span>key<span class="token operator">:</span> LogLevelStrings<span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> num <span class="token operator">=</span> LogLevel<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> LogLevel<span class="token punctuation">.</span><span class="token constant">WARN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Log level key is:"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Log level value is:"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Log level message is:"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printImportant</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">,</span> <span class="token string">"This is a message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对象的使用详情">对象的使用详情</h4><p>In JavaScript, the fundamental way that we group and pass around data is through objects. In TypeScript, we represent those through <em>object types</em>.</p><p>As we’ve seen, they can be anonymous:</p><pre class="line-numbers language-none"><code class="language-none">function greet(person: { name: string; age: number }) {  return "Hello " + person.name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>or they can be named by using either an interface</p><pre class="line-numbers language-none"><code class="language-none">interface Person {  name: string;  age: number;} function greet(person: Person) {  return "Hello " + person.name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>or a type alias.</p><pre class="line-numbers language-none"><code class="language-none">type Person = {  name: string;  age: number;}; function greet(person: Person) {  return "Hello " + person.name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In all three examples above, we’ve written functions that take objects that contain the property <code>name</code> (which must be a <code>string</code>) and <code>age</code> (which must be a <code>number</code>).</p><h4 id="类型别名和接口的区别">类型别名和接口的区别</h4><p>类型别名和接口非常相似，在很多情况下你可以在它们之间自由选择。几乎所有接口的功能都可以在类型中使用，关键的区别在于，类型不能被重新打开以添加新的属性，而接口则总是可以扩展的。</p><p>You’ll learn more about these concepts in later chapters, so don’t worry if you don’t understand all of these right away.</p><ul><li>Prior to TypeScript version 4.2, type alias names <a href="https://www.typescriptlang.org/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWZWhfYAjABMAMwALA+gbsVjoADqgjKESytQPxCHghAByXigYgBfr8LAsYj8aQMUASbDQcRSExCeCwFiIQh+AKfAYyBiQFgOPyIaikSGLQo0Zj-aazaY+dSaXjLDgAGXgAC9CKhDqAALxJaw2Ib2RzOISuDycLw+ImBYKQflCkWRRD2LXCw6JCxS1JCdJZHJ5RAFIbFJU8ADKC3WzEcnVZaGYE1ABpFnFOmsFhsil2uoHuzwArO9SmAAEIsSFrZB-GgAjjA5gtVN8VCEc1o1C4Q4AGlR2AwO1EsBQoAAbvB-gJ4HhPgB5aDwem-Ph1TCV3AEEirTp4ELtRbTPD4vwKjOfAuioSQHuDXBcnmgACC+eCONFEs73YAPGGZVT5cRyyhiHh7AAON7lsG3vBggB8XGV3l8-nVISOgghxoLq9i7io-AHsayRWGaFrlFauq2rg9qaIGQHwCBqChtKdgRo8TxRjeyB3o+7xAA"><em>may</em> appear in error messages</a>, sometimes in place of the equivalent anonymous type (which may or may not be desirable). Interfaces will always be named in error messages.</li><li>Type aliases may not participate <a href="https://www.typescriptlang.org/play?#code/PTAEEEDtQS0gXApgJwGYEMDGjSfdAIx2UQFoB7AB0UkQBMAoEUfO0Wgd1ADd0AbAK6IAzizp16ALgYM4SNFhwBZdAFtV-UAG8GoPaADmNAcMmhh8ZHAMMAvjLkoM2UCvWad+0ARL0A-GYWVpA29gyY5JAWLJAwGnxmbvGgALzauvpGkCZmAEQAjABMAMwALLkANBl6zABi6DB8okR4Jjg+iPSgABboovDk3jjo5pbW1d6+dGb5djLwAJ7UoABKiJTwjThpnpnGpqPBoTLMAJrkArj4kOTwYmycPOhW6AR8IrDQ8N04wmo4HHQCwYi2Waw2W1S6S8HX8gTGITsQA">in declaration merging, but interfaces can</a>.</li><li>Interfaces may only be used to <a href="https://www.typescriptlang.org/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA">declare the shapes of objects, not rename primitives</a>.</li><li>Interface names will <a href="https://www.typescriptlang.org/play?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA"><em>always</em> appear in their original form</a> in error messages, but <em>only</em> when they are used by name.</li></ul><p>For the most part, you can choose based on personal preference, and TypeScript will tell you if it needs something to be the other kind of declaration. If you would like a heuristic, use <code>interface</code> until you need to use features from <code>type</code>.</p><h2 id="应用实例">应用实例</h2><h3 id="根据不同后端环境切换接口集">根据不同后端环境切换接口集</h3><h4 id="应用场景">应用场景</h4><ul><li>前端使用同样的代码, 接口区分单体/微服务, 故需要根据配置使用不用的接口文档</li><li>vue2 升级到 vue3 保证语法规范且尽量少的修改</li></ul><h4 id="vue2使用样例">vue2使用样例</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 全局参数</span><span class="token keyword">const</span> path <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_SERVER_TYPE</span><span class="token keyword">const</span> system <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@api/api-'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> system<span class="token comment">// import { demoUrl } from '@/api/api'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="require-exports和import-export的区别">require/exports和import/export的区别</h4><p>require/exports和import/export <a href="https://blog.csdn.net/xiaoxiaoluckylucky/article/details/118437651">https://blog.csdn.net/xiaoxiaoluckylucky/article/details/118437651</a><br>require/exports与import/export，有啥不一样的 <a href="https://blog.51cto.com/u_15089765/2600897">https://blog.51cto.com/u_15089765/2600897</a></p><h1>方式1: 定义所有接口, 根据变量动态加载</h1><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 需要导出default才能被外部直接用 {使用}</span><span class="token comment">// export const defaultApi: PlatformApi = import.meta.env.VITE_GLOB_APP_SERVER_TYPE === 'vue' ? apiVue : apiCloud;</span><span class="token keyword">const</span> defaultApi<span class="token operator">:</span> PlatformApi <span class="token operator">=</span>    <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_GLOB_APP_SERVER_TYPE</span> <span class="token operator">===</span> <span class="token string">'vue'</span> <span class="token operator">?</span> apiVue <span class="token operator">:</span> apiCloud<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> defaultApi<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformApi</span> <span class="token punctuation">{</span>    demoUrl<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// ROORO: No matching export in "src/api/api.ts" for import "demoUrl"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>demoUrl<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/api/api'</span><span class="token punctuation">;</span><span class="token keyword">import</span> defaultApi <span class="token keyword">from</span> <span class="token string">'/@/api/api'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>demoUrl<span class="token punctuation">}</span> <span class="token operator">=</span> defaultApi<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defaultApi<span class="token punctuation">.</span>demoUrl<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用时需要通过<code>defaultApi</code>对象二次导入</li></ul><h1>方式2 替换构建路径</h1><p>vite.config.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>command<span class="token punctuation">,</span> mode<span class="token punctuation">}</span><span class="token operator">:</span> ConfigEnv<span class="token punctuation">)</span><span class="token operator">:</span> UserConfig <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token constant">VITE_GLOB_APP_SERVER_TYPE</span><span class="token punctuation">}</span> <span class="token operator">=</span> viteEnv<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        resolve<span class="token operator">:</span> <span class="token punctuation">{</span>            alias<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token comment">// '/@/api/api' 该路径过于常用, 会覆盖别的匹配模式</span>                    find<span class="token operator">:</span> <span class="token string">'/@/api/api-zh'</span><span class="token punctuation">,</span>                    replacement<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">pathResolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/api/api-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">VITE_GLOB_APP_SERVER_TYPE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span>demoUrl<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'api-zh'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>方法名有写错的风险</li></ul><h1>方式3 moduleSuffixes</h1><p>moduleSuffixes <a href="https://www.typescriptlang.org/tsconfig#moduleSuffixes">https://www.typescriptlang.org/tsconfig#moduleSuffixes</a></p><p>tsconfig.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"moduleSuffixes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">".service-vue"</span><span class="token punctuation">,</span>      <span class="token string">".service-cloud"</span><span class="token punctuation">,</span>      <span class="token string">""</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原来的文件改名为 api.service-vue&amp;api.service-cloud</li><li>引用正常引用即可 <code>官方提示需要 import * as Api from '/@/api/api';</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>demoUrl<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'/@/api/api'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>版本 typescript 4.7.0+ &amp; node16+ ; 舍弃</li></ul>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark</title>
      <link href="/spark/"/>
      <url>/spark/</url>
      
        <content type="html"><![CDATA[<p>官网 <a href="https://spark.apache.org/">https://spark.apache.org/</a></p><p>RDD算子列表 <a href="http://homepage.cs.latrobe.edu.au/zhe/ZhenHeSparkRDDAPIExamples.html">http://homepage.cs.latrobe.edu.au/zhe/ZhenHeSparkRDDAPIExamples.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Big-Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用注解</title>
      <link href="/spring-chang-yong-zhu-jie/"/>
      <url>/spring-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Import">@Import</h2><p>针对程序包需要提供一个默认实现的bean, 但是用户可选注入</p><p>可以在不被扫码的包下实现配置</p><p>用户使用 @Import 自动注入</p><p>…待补充</p>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka部署及spring集成</title>
      <link href="/kafka/"/>
      <url>/kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="基础介绍">基础介绍</h2><h3 id="kafka入门及其使用">kafka入门及其使用</h3><p>Kafka是由LinkedIn开发的一个分布式基于发布/订阅的消息系统，使用Scala编写，它以可水平扩展和高吞吐率而被广泛使用。</p><p><a href="http://kafka.apachecn.org/">kafka中文文档</a></p><p><a href="http://orchome.com/kafka/index">简单说明什么是kafka</a></p><h3 id="关于kafka背景">关于kafka背景</h3><p>最初是LinkedIn的一个内部基础设施系统，发现数据库难以处理持续数据流，因此产生了kafka，一开始用于社交网络的实时应用和数据流中。</p><pre class="line-numbers language-none"><code class="language-none">可以认为kafka是一个流平台:在这个平台可以发布和订阅流.并将它保存、处理可以作为消息系统、有点像实时版的hadoop，支持集群、高性能拥有诸多优点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="消息中间件是干啥用的，有啥好处">消息中间件是干啥用的，有啥好处</h5><p>通过消息队列达到将业务异步解耦，设计变得更简单可以分布式，通过消息一致性【只要不丢失消息】保证数据最终到用户。增加业务系统异步能力，较小并发问题。比如验证码发送到用户。</p><pre class="line-numbers language-none"><code class="language-none">【生产】和【消费】速度或稳定性不一致是使用消息中间件的重要原因<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="kafka原理">kafka原理</h3><h5 id="几个基本术语">几个基本术语</h5><h5 id="Topic">Topic</h5><p>Kafka将消息种子(Feed)分门别类，每一类的消息称之为一个主题(Topic).kafka集群存储消息是以top为类别记录的</p><h5 id="Producer">Producer</h5><p>发布消息的对象称之为主题生产者(Kafka topic producer)</p><h5 id="Consumer">Consumer</h5><p>订阅消息并处理发布的消息的种子的对象称之为主题消费者(consumers)</p><h5 id="Broker">Broker</h5><p>已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理(Broker). 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p><h4 id="4个核心API">4个核心API</h4><p>应用程序使用 <code>Producer API</code> 发布消息到1个或多个topic（主题）。</p><p>应用程序使用 <code>Consumer API</code> 来订阅一个或多个topic，并处理产生的消息。</p><p>应用程序使用 <code>Streams API</code> 充当一个流处理器，从1个或多个topic消费输入流，并生产一个输出流到1个或多个输出topic，有效地将输入流转换到输出流。</p><p><code>Connector API</code>允许构建或运行可重复使用的生产者或消费者，将topic连接到现有的应用程序或数据系统。例如，一个关系数据库的连接器可捕获每一个变化。</p><h2 id="应用部署">应用部署</h2><h3 id="部署-kafka">部署 kafka</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dlcdn.apache.org/kafka/3.9.0/kafka-3.9.0-src.tgz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> kafka-3.9.0-src.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置kafka-SASL验证">配置kafka SASL验证</h3><h2 id="Spring集成kafka">Spring集成kafka</h2><h3 id="方式1-spring-cloud-stream-binder-kafka">方式1: spring-cloud-stream-binder-kafka</h3><p>引入依赖包</p><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-stream-binder-kafka&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置(无SASL验证)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">kafka</span><span class="token punctuation">:</span>        <span class="token key atrule">binder</span><span class="token punctuation">:</span>          <span class="token key atrule">brokers</span><span class="token punctuation">:</span> ip<span class="token punctuation">:</span>port        <span class="token key atrule">output</span><span class="token punctuation">:</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> websocketMsg          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json        <span class="token key atrule">input</span><span class="token punctuation">:</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> websocketMsg          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置(SASL验证)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">kafka</span><span class="token punctuation">:</span>        <span class="token key atrule">binder</span><span class="token punctuation">:</span>          <span class="token key atrule">brokers</span><span class="token punctuation">:</span> ip<span class="token punctuation">:</span>port          <span class="token key atrule">configuration</span><span class="token punctuation">:</span>            <span class="token key atrule">sasl.mechanism</span><span class="token punctuation">:</span> PLAIN            <span class="token key atrule">security.protocol</span><span class="token punctuation">:</span> SASL_PLAINTEXT            <span class="token key atrule">sasl.jaas.config</span><span class="token punctuation">:</span> <span class="token string">'org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password="password";'</span>      <span class="token key atrule">bindings</span><span class="token punctuation">:</span>        <span class="token key atrule">output</span><span class="token punctuation">:</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> websocketMsg          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json        <span class="token key atrule">input</span><span class="token punctuation">:</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> websocketMsg          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二-在config下新建文件jaas-conf">方式二 在config下新建文件jaas.conf</h3><pre class="line-numbers language-none"><code class="language-none">KafkaServer {    org.apache.kafka.common.security.plain.PlainLoginModule required    username="admin"    password="admin"    user_admin="admin";};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置优先级规则</title>
      <link href="/externalized-configuration/"/>
      <url>/externalized-configuration/</url>
      
        <content type="html"><![CDATA[<p>官网解释: <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config</a></p><h2 id="Spring优先级规则">Spring优先级规则</h2><p>Spring Boot lets you externalize your configuration so that you can work with the same application code in different environments. You can use a variety of external configuration sources, include Java properties files, YAML files, environment variables, and command-line arguments.</p><p>Property values can be injected directly into your beans by using the <code>@Value</code> annotation, accessed through Spring’s <code>Environment</code> abstraction, or be <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.typesafe-configuration-properties">bound to structured objects</a> through <code>@ConfigurationProperties</code>.</p><p>Spring Boot uses a very particular <code>PropertySource</code> order that is designed to allow sensible overriding of values. Properties are considered in the following order (with values from lower items overriding earlier ones):</p><ol><li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.23/javadoc-api/org/springframework/context/annotation/PropertySource.html"><code>@PropertySource</code></a> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li>Config data (such as <code>application.properties</code> files).</li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li><li><code>properties</code> attribute on your tests. Available on <a href="https://docs.spring.io/spring-boot/docs/2.7.4/api/org/springframework/boot/test/context/SpringBootTest.html"><code>@SpringBootTest</code></a> and the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.autoconfigured-tests">test annotations for testing a particular slice of your application</a>.</li><li><a href="https://docs.spring.io/spring-framework/docs/5.3.23/javadoc-api/org/springframework/test/context/TestPropertySource.html"><code>@TestPropertySource</code></a> annotations on your tests.</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools.globalsettings">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</li></ol><p>Config data files are considered in the following order:</p><ol><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files">Application properties</a> packaged inside your jar (<code>application.properties</code> and YAML variants).</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.profile-specific">Profile-specific application properties</a> packaged inside your jar (<code>application-{profile}.properties</code> and YAML variants).</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files">Application properties</a> outside of your packaged jar (<code>application.properties</code> and YAML variants).</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config.files.profile-specific">Profile-specific application properties</a> outside of your packaged jar (<code>application-{profile}.properties</code> and YAML variants).</li></ol><h2 id="PropertySource-无法读取yml配置文件处理">@PropertySource 无法读取yml配置文件处理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:server-api-name.yml"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> factory <span class="token operator">=</span> <span class="token class-name">YamlPropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplication</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlPropertySourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultPropertySourceFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertySource</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertySourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome</title>
      <link href="/chrome/"/>
      <url>/chrome/</url>
      
        <content type="html"><![CDATA[<h2 id="chrome好用的功能">chrome好用的功能</h2><p>F12 &gt; ctrl+shift+p</p><table><thead><tr><th>功能点</th><th>关键字</th></tr></thead><tbody><tr><td>chrome截全屏</td><td>screen</td></tr><tr><td>chrome 临时存储当前变量</td><td>store as global varible</td></tr><tr><td>dom上设置断点</td><td>break on</td></tr><tr><td>查看当前页面对 css js 使用覆盖率</td><td>coverage</td></tr></tbody></table><ul><li><a href="https://www.cnblogs.com/alice-fee/p/8038367.html">谷歌浏览器chrome的vuejs devtools 插件的安装</a></li></ul><h2 id="windows-配置-Chrome-每个tab页签打开开发者工具">windows 配置 Chrome 每个tab页签打开开发者工具</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Google<span class="token punctuation">\</span>Chrome<span class="token punctuation">\</span>Application <span class="token comment"># 进入系统命令目录</span>chrome.exe --auto-open-devtools-for-tabs <span class="token comment"># 关闭所有浏览器窗口后用命令启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/python/"/>
      <url>/python/</url>
      
        <content type="html"><![CDATA[<h2 id="Python安装">Python安装</h2><ul><li><a href="https://www.python.org/">官网地址</a></li></ul><h2 id="Python基础知识">Python基础知识</h2><p>标识符 英文/数字/下划线</p><p>单下划线开头</p><p>_foo 不能直接访问的类属性(private)需提供接口 不能用 from xxx import * 导入</p><p>双下划线开头</p><p>__foo 私有成员</p><p>双下划线开头结尾</p><p><strong>foo</strong> 特殊方法专用标识 <strong>init</strong>() 构造函数</p><p>成员属性(字段)/实例属性(map)/类属性(静态公有变量)</p><img src="/python/Python%E5%B1%9E%E6%80%A7%E8%A7%A3%E9%87%8A.png" class="" title="图片"><p>关键字</p><img src="/python/Python%E5%85%B3%E9%94%AE%E5%AD%97.png" class="" title="图片"><p>数据类型(5)</p><p>Number(数字) String(字符串) List(列表) Tuple(元组) Dictionatry(字典)</p><h2 id="Python函数">Python函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func_name</span><span class="token punctuation">(</span>param_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>param_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装包">安装包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">{</span>安装路径<span class="token punctuation">}</span>/Scriptspip <span class="token function">install</span> <span class="token punctuation">{</span>package<span class="token punctuation">}</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> <span class="token punctuation">{</span>package<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="conda">conda</h3><p>conda是一种可用于python的包管理工具<br>如果系统没有安装python环境，也可以使用 conda 内置的python安装包</p><ul><li><a href="https://docs.conda.io/en/latest/miniconda.html#windows-installers">官方文档</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># linux安装 miniconda</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh<span class="token function">chmod</span> <span class="token number">777</span> Miniconda3-latest-Linux-x86_64.sh<span class="token function">sh</span> Miniconda3-latest-Linux-x86_64.sh <span class="token comment"># 是否初始化 miniconda3 选择 yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://baijiahao.baidu.com/s?id=1677257712310498702&amp;wfr=spider&amp;for=pc">conda 简单介绍</a></li></ul><p>windows 安装成功后使用对应的控制面板 &gt;&gt;&gt; <code>Anaconda Prompt</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果找不到控制面板，进入安装目录</span>python .<span class="token punctuation">\</span>Lib<span class="token punctuation">\</span>_nsis.py mkmenusconda <span class="token parameter variable">--version</span>python <span class="token parameter variable">--version</span>pip <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置阿里数据源"><a href="https://developer.aliyun.com/mirror/anaconda">配置阿里数据源</a></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span> <span class="token comment"># windows 生成 .condarc 文件配置</span>conda clean <span class="token parameter variable">-i</span> <span class="token comment"># 配置完成后，清理索引缓存</span>conda config <span class="token parameter variable">--show</span> channels <span class="token comment"># 展示所有镜像源</span>conda clean <span class="token parameter variable">--all</span>  <span class="token comment"># 清理所有缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户目录下 .condarc 文件配置</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">channels:  - defaultsshow_channel_urls: truedefault_channels:  - http://mirrors.aliyun.com/anaconda/pkgs/main  - http://mirrors.aliyun.com/anaconda/pkgs/r  - http://mirrors.aliyun.com/anaconda/pkgs/msys2custom_channels:  conda-forge: http://mirrors.aliyun.com/anaconda/cloud  msys2: http://mirrors.aliyun.com/anaconda/cloud  bioconda: http://mirrors.aliyun.com/anaconda/cloud  menpo: http://mirrors.aliyun.com/anaconda/cloud  pytorch: http://mirrors.aliyun.com/anaconda/cloud  simpleitk: http://mirrors.aliyun.com/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">envs_dirs:  - E:/data/miniconda3/envschannels:  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/default_channels:  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rshow_channel_urls: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置默认下载的镜像地址">设置默认下载的镜像地址</h4><p>注意: 可以先安装包、如果包下载异常才考虑用镜像 或者 考虑用 pip 下载工具</p><p><a href="https://www.python100.com/html/T3QF9436G2NX.html">使用conda添加镜像源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</span>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ <span class="token comment"># 增加清华大学镜像源</span>conda config <span class="token parameter variable">--remove</span> channels <span class="token operator">&lt;</span>镜像源<span class="token operator">&gt;</span>  <span class="token comment"># 删除指定镜像源镜像</span>conda config --remove-key channels <span class="token comment"># 删除全部镜像源</span>conda config <span class="token parameter variable">--write</span> <span class="token comment"># 保存配置</span>conda config --default-channel <span class="token comment"># windows环境无法使用该命令设置默认镜像源</span>conda config --set-default-channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free <span class="token comment"># 将某镜像设置为默认通道</span>conda config <span class="token parameter variable">--show</span> channels <span class="token comment"># 展示所有镜像源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加常用的镜像源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="conda创建环境">conda创建环境</h4><ul><li>conda是为了解决不同python项目依赖差异的问题, 可以创建多个环境处理这个问题</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update <span class="token parameter variable">-n</span> base <span class="token parameter variable">-c</span> defaults conda <span class="token comment"># 版本升级</span>conda <span class="token function">env</span> list <span class="token comment"># 查看所有已经传教的环境</span>conda create <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>envname<span class="token operator">&gt;</span> <span class="token comment"># 创建一个新的conda环境</span>conda create <span class="token parameter variable">-n</span> chatglm <span class="token parameter variable">--clone</span> base <span class="token comment"># 创建一个克隆环境</span>conda create <span class="token parameter variable">--prefix</span><span class="token operator">=</span>E:/data/miniconda3/envs/chatGLM <span class="token comment"># 显式的指定路径，激活也需要指定路径，比较麻烦，可以直接更改环境地址</span>conda config <span class="token parameter variable">--append</span> envs_dirs E:/data/miniconda3/envs <span class="token comment"># 配置环境所在的默认路径</span>conda create <span class="token parameter variable">--name</span> snapshot <span class="token parameter variable">--clone</span> myenv <span class="token comment"># 从已有的环境克隆配置新环境</span>conda activate <span class="token operator">&lt;</span>envname<span class="token operator">&gt;</span> <span class="token comment"># 激活新的环境</span>conda deactivate <span class="token comment"># 退出环境</span>conda <span class="token function">env</span> remove <span class="token parameter variable">--name</span> <span class="token operator">&lt;</span>envname<span class="token operator">&gt;</span> <span class="token comment"># 删除环境</span>conda <span class="token function">install</span> <span class="token parameter variable">--file</span> requirements.txt <span class="token comment"># 安装项目要求的环境依赖项</span>conda list <span class="token comment"># 验证所有依赖项是否已经安装正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="conda简单命令">conda简单命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update conda <span class="token comment"># 更新最新版本 conda</span>conda <span class="token function">install</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.13</span> <span class="token comment"># https://www.python.org/getit/</span>conda <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 安装包</span>conda <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> <span class="token comment"># 安装指定版本包</span>conda update <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 更新包</span>conda remove <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 卸载包</span>conda search <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 搜索包</span>conda list <span class="token punctuation">[</span>-n <span class="token punctuation">[</span>env_name<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># 展示当前环境安装的所有包 -n 指定环境名称</span>conda list <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 查看指定包版本信息</span>conda info <span class="token parameter variable">--envs</span> <span class="token comment"># 查看环境中的安装包版本</span>conda clean <span class="token parameter variable">--all</span> <span class="token comment"># 清理不再使用的包</span>conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">&gt;</span> environment.yml <span class="token comment"># 导出环境配置</span>conda list <span class="token parameter variable">-e</span> <span class="token operator">&gt;</span> requirements.txt <span class="token comment"># 导出当前环境版本</span>conda <span class="token function">env</span> create <span class="token parameter variable">--file</span> environment.yml <span class="token comment"># 导入环境配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="uv">uv</h3><ul><li>uv 凭借其极速和现代化设计，正在成为 Python 开发者的新宠</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 安装uv (windows如何安装?)</span><span class="token comment"># 使用 curl</span><span class="token function">curl</span> <span class="token parameter variable">-LsSf</span> https://astral.sh/uv/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 或使用 wget</span><span class="token function">wget</span> -qO- https://astral.sh/uv/install.sh <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 安装完成后，按提示符将uv添加到环境变量</span><span class="token builtin class-name">source</span> ~/.bashrc  <span class="token comment"># 或 source ~/.zshrc（使用 Zsh 时）</span><span class="token comment"># 验证安装</span>uv <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>windows安装uv</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方案一：通过PowerShell一键安装</span><span class="token comment"># 使用官方安装脚本（需科学上网或网络畅通）</span>irm https://astral.sh/uv/install.ps1 <span class="token operator">|</span> iex<span class="token comment"># 将 uv 添加到当前会话的环境变量</span><span class="token variable">$env</span>:Path <span class="token operator">+=</span> <span class="token string">";<span class="token variable">$env</span>:USERPROFILE\.cargo<span class="token entity" title="\b">\b</span>in"</span><span class="token comment"># 安装完成后，将uv添加到系统环境变量，永久生效（可选）</span><span class="token punctuation">[</span>System.Environment<span class="token punctuation">]</span>::SetEnvironmentVariable<span class="token punctuation">(</span><span class="token string">"Path"</span>, <span class="token punctuation">[</span>System.Environment<span class="token punctuation">]</span>::GetEnvironmentVariable<span class="token punctuation">(</span><span class="token string">"Path"</span>, <span class="token punctuation">[</span>System.EnvironmentVariableTarget<span class="token punctuation">]</span>::User<span class="token punctuation">)</span> + <span class="token string">";<span class="token variable">$env</span>:USERPROFILE\.cargo<span class="token entity" title="\b">\b</span>in"</span>, <span class="token punctuation">[</span>System.EnvironmentVariableTarget<span class="token punctuation">]</span>::User<span class="token punctuation">)</span><span class="token comment"># 方案二：通过pipx安装（废弃：高版本可以一键安装）</span>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--user</span> pipx<span class="token comment"># 卸载 pipx</span>python <span class="token parameter variable">-m</span> pip uninstall pipxpython <span class="token parameter variable">-m</span> pipx ensurepath<span class="token comment"># 查看系统缓存路径</span>pipx environment<span class="token comment"># pipx更改缓存路径；更改系统缓存变量</span>PIPX_HOME <span class="token operator">=</span> E:<span class="token punctuation">\</span>python<span class="token punctuation">\</span>pipxPIPX_BIN_DIR <span class="token operator">=</span> %PIPX_HOME%<span class="token punctuation">\</span>binPIPX_MAN_DIR <span class="token operator">=</span> %PIPX_HOME%<span class="token punctuation">\</span>share<span class="token punctuation">\</span>manPIPX_CACHE_DIR <span class="token operator">=</span> %PIPX_HOME%<span class="token punctuation">\</span>.cache<span class="token comment"># 安装uv</span>pipx <span class="token function">install</span> uv<span class="token comment"># 方案三： pip 安装；不建议：环境较复杂</span>pip <span class="token function">install</span> uv <span class="token parameter variable">--user</span><span class="token comment"># 方案四：二进制安装或cargo编辑安装</span><span class="token comment"># uv官网： https://docs.astral.sh/uv/getting-started/installation/#cargo</span><span class="token comment"># 验证安装 </span>uv <span class="token parameter variable">--version</span><span class="token comment"># uv查看默认缓存路径</span>uv cache <span class="token function">dir</span><span class="token comment"># 更改默认缓存路径：永久更改在系统环境变量中进行</span><span class="token comment"># 临时设置（仅当前终端会话生效）</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">UV_CACHE_DIR</span><span class="token operator">=</span>/path/to/custom_cache<span class="token comment"># Windows（PowerShell）: 临时设置</span><span class="token variable">$env</span>:UV_CACHE_DIR <span class="token operator">=</span> <span class="token string">"E:\data\uv<span class="token entity" title="\c">\c</span>ache"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基本使用 <a href="https://hellowac.github.io/uv-zh-cn/getting-started/installation/">https://hellowac.github.io/uv-zh-cn/getting-started/installation/</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建虚拟环境</span>uv venv myenv  <span class="token comment"># 创建名为 myenv 的虚拟环境</span><span class="token comment"># 激活虚拟环境</span><span class="token builtin class-name">source</span> myenv/bin/activate<span class="token comment"># 激活虚拟环境 windows</span>.<span class="token punctuation">\</span>myenv<span class="token punctuation">\</span>Scripts<span class="token punctuation">\</span>activate<span class="token comment"># 查看可用的python环境</span>uv python list<span class="token comment"># 指定python环境创建虚拟环境</span>uv venv <span class="token parameter variable">--python</span> <span class="token number">3.11</span>.6 <span class="token comment"># https://zhuanlan.zhihu.com/p/689976933</span><span class="token comment">## 设置当前实用的python环境</span>uv python pin <span class="token number">3.13</span><span class="token comment"># 安装依赖包</span>uv pip <span class="token function">install</span> numpy pandas  <span class="token comment"># 单包或多包安装</span>uv pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt  <span class="token comment"># 从文件安装</span><span class="token comment"># 生成锁定文件</span>uv pip compile requirements.in <span class="token parameter variable">-o</span> requirements.txt  <span class="token comment"># 生成精确依赖版本</span><span class="token comment"># 运行python脚本</span>uv run main.py  <span class="token comment"># 自动解析依赖并运行（实验性功能）</span><span class="token comment"># 退出虚拟环境</span>deactivate<span class="token comment"># 替代pip命令</span>uv pip list       <span class="token comment"># 查看已安装包</span>uv pip uninstall <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span>  <span class="token comment"># 卸载包</span>uv pip freeze    <span class="token comment"># 导出依赖列表</span><span class="token comment"># 依赖解析加速</span>uv pip <span class="token function">install</span> <span class="token parameter variable">--resolution</span><span class="token operator">=</span>fast  <span class="token comment"># 快速解析模式（忽略次要版本冲突）</span><span class="token comment"># 配置镜像源(国内加速)</span>uv pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span class="token comment"># windows更改环境变量</span><span class="token assign-left variable">UV_DEFAULT_INDEX</span><span class="token operator">=</span>https://pypi.tuna.tsinghua.edu.cn/simple<span class="token comment">## 处理 toml 管理的项目</span><span class="token comment"># 安装项目依赖（普通模式）</span>uv pip <span class="token function">install</span> <span class="token builtin class-name">.</span><span class="token comment"># 或者以可编辑模式安装（开发时推荐）</span>uv pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span><span class="token comment"># 如果项目中定义了开发依赖[tool.poetry.dev-dependencies] 可使用 -d 参数安装</span>uv pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-E</span> dev <span class="token comment"># -d 命令是 pip 执行的命令</span><span class="token comment"># 启动项目</span>python main.py<span class="token comment"># 如果项目定义了命令行工具，可以使用提示的命令行工具启动</span><span class="token comment"># pyproject.toml 示例</span><span class="token punctuation">[</span>tool.poetry.scripts<span class="token punctuation">]</span>mycli <span class="token operator">=</span> <span class="token string">"mypackage:main"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串转json">字符串转json</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># len(str) &gt; 0</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="发送HTTP请求">发送HTTP请求</h2><h3 id="引入-requests-包">引入 requests 包</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>发送请求(包括请求行、方法类型、头、体) &amp; 常见的请求方式有get、post、put、delete</li></ul><h3 id="发送get请求">发送get请求</h3><p>格式：requests.get() (内容： url必填； params选填：url参数字典)</p><h4 id="无参数的get请求">无参数的get请求</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://yz.chsi.com.cn/zsml/pages/getMl.jsp'</span><span class="token punctuation">)</span><span class="token comment"># 打印响应主体内容，字符串格式</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="有参数的get请求">有参数的get请求</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://yz.chsi.com.cn/zsml/code/zy.do'</span><span class="token punctuation">,</span>                   params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> <span class="token string">'0101'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 打印响应主体内容，字符串格式</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送post请求">发送post请求</h3><blockquote><p>知识扩展</p></blockquote><ul><li>requests.post() post请求分为5种，常用的有三种，如下<ul><li>① application/x-www-form-urlencod (form表单)；</li><li>② raw (纯文本格式)：有5种格式，分别为json/xml/Html/Text/JavaScrip</li><li>③ multipart/form-data (复合式表单)</li></ul></li></ul><h4 id="有正文体的post请求">有正文体的post请求</h4><h5 id="form表单-application-x-www-form-urlencod-data-后跟字典">form表单(application/x-www-form-urlencod) ----data 后跟字典</h5><blockquote><p>eg.1: 带参数的查询接口</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://ws.webxml.com.cn/WebServices/WeatherWS.asmx/getSupportCityString'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"theRegionCode"</span><span class="token punctuation">:</span> <span class="token number">3113</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>eg.2: 带账号名密码的登录接口</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://123.56.99.53:9000/event/api/admin/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"MTIzYWRtaW4="</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="纯文本格式-raw">纯文本格式(raw)</h5><blockquote><p>~ xml格式    ----data    后跟字符串</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://ws.webxml.com.cn/WebServices/WeatherWS.asmx'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"text/xml; charset=utf-8"</span><span class="token punctuation">,</span><span class="token string">"SOAPAction"</span><span class="token punctuation">:</span> <span class="token string">"http://WebXml.com.cn/getSupportCityString"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt;&lt;soap:Body&gt;&lt;getSupportCityString xmlns="http://WebXml.com.cn/"&gt;&lt;theRegionCode&gt;string&lt;/theRegionCode&gt;&lt;/getSupportCityString&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;'''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>~json格式     ----- json  后跟字典(常用)， or ----data  后跟json字符串</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://123.56.99.53:5000/event/weather/getWeather/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"theCityCode"</span><span class="token punctuation">:</span> <span class="token string">"1001"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>json后面跟的是字典即json={“theCityCode”: “1001”})，可改成 data=‘{“theCityCode”: “1001”})’；字典能自动转为json字符串，所以一般用字典表示；建议纯json正文的接口使用第一种方式，除非是较长的字符串</p><blockquote><p>复合式表单(multipart/form-data ) ------上传二进制文件    ---- key value (接口名称：文件名）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'http://123.56.99.53:9001/api/uploadFile/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"uid=1;token=44c972f05d76fdd93c31f9c2b65bb098f308cdfc"</span><span class="token comment">#"Content-Type": "multipart/form-data"},</span><span class="token comment">#有的接口不需要写正文体格式，老服务器一般需要写</span>              files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"myfile1"</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:\全力以富\1.docx'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>                     <span class="token comment">#"myfile2: open(上传多个文件)"})</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传接口 files={‘文件路径’,‘rb’}  rb表示</p><h2 id="问题解决">问题解决</h2><h3 id="pycharm提示ModuleNotFoundError-No-module-named-requests">pycharm提示ModuleNotFoundError: No module named <code>requests</code></h3><p>File &gt; Settings &gt; Project: {project-name} &gt; Python Interpreter</p>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos</title>
      <link href="/nacos/"/>
      <url>/nacos/</url>
      
        <content type="html"><![CDATA[<p>官方文档 <a href="https://nacos.io/zh-cn/docs/architecture.html">https://nacos.io/zh-cn/docs/architecture.html</a></p><p>restTemplate 中 <a href="http://server-name/api">http://server-name/api</a><br>和自带的 lb://server-name/api 有什么区别?</p><h2 id="部署">部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/alibaba/nacos/releases/download/2.1.2/nacos-server-2.1.2.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nacos-server-2.1.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Spring-Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<p>官方文档 <a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><h2 id="完整命令">完整命令</h2><p><a href="https://git-scm.com/docs/git#_git_commands">Complete list of all commands</a></p><h3 id="Setup-and-Config">Setup and Config</h3><ul><li><p><a href="https://git-scm.com/docs/git">git</a></p></li><li><p><a href="https://git-scm.com/docs/git-config">config</a></p></li><li><p><a href="https://git-scm.com/docs/git-help">help</a></p></li><li><p><a href="https://git-scm.com/docs/git-bugreport">bugreport</a></p></li></ul><h3 id="Getting-and-Creating-Projects">Getting and Creating Projects</h3><ul><li><a href="https://git-scm.com/docs/git-init">init</a></li><li><a href="https://git-scm.com/docs/git-clone">clone</a></li></ul><h3 id="Basic-Snapshotting">Basic Snapshotting</h3><ul><li><a href="https://git-scm.com/docs/git-add">add</a></li><li><a href="https://git-scm.com/docs/git-status">status</a></li><li><a href="https://git-scm.com/docs/git-diff">diff</a></li><li><a href="https://git-scm.com/docs/git-commit">commit</a></li><li><a href="https://git-scm.com/docs/git-notes">notes</a></li><li><a href="https://git-scm.com/docs/git-restore">restore</a></li><li><a href="https://git-scm.com/docs/git-reset">reset</a></li><li><a href="https://git-scm.com/docs/git-rm">rm</a></li><li><a href="https://git-scm.com/docs/git-mv">mv</a></li></ul><h3 id="Branching-and-Merging">Branching and Merging</h3><ul><li><a href="https://git-scm.com/docs/git-branch">branch</a></li><li><a href="https://git-scm.com/docs/git-checkout">checkout</a></li><li><a href="https://git-scm.com/docs/git-switch">switch</a></li><li><a href="https://git-scm.com/docs/git-merge">merge</a></li><li><a href="https://git-scm.com/docs/git-mergetool">mergetool</a></li><li><a href="https://git-scm.com/docs/git-log">log</a></li><li><a href="https://git-scm.com/docs/git-stash">stash</a></li><li><a href="https://git-scm.com/docs/git-tag">tag</a></li><li><a href="https://git-scm.com/docs/git-worktree">worktree</a></li></ul><h3 id="Sharing-and-Updating-Projects">Sharing and Updating Projects</h3><ul><li><a href="https://git-scm.com/docs/git-fetch">fetch</a></li><li><a href="https://git-scm.com/docs/git-pull">pull</a></li><li><a href="https://git-scm.com/docs/git-push">push</a></li><li><a href="https://git-scm.com/docs/git-remote">remote</a></li><li><a href="https://git-scm.com/docs/git-submodule">submodule</a></li></ul><h3 id="Inspection-and-Comparison">Inspection and Comparison</h3><ul><li><a href="https://git-scm.com/docs/git-show">show</a></li><li><a href="https://git-scm.com/docs/git-log">log</a></li><li><a href="https://git-scm.com/docs/git-diff">diff</a></li><li><a href="https://git-scm.com/docs/git-difftool">difftool</a></li><li><a href="https://git-scm.com/docs/git-range-diff">range-diff</a></li><li><a href="https://git-scm.com/docs/git-shortlog">shortlog</a></li><li><a href="https://git-scm.com/docs/git-describe">describe</a></li></ul><h3 id="Patching">Patching</h3><ul><li><a href="https://git-scm.com/docs/git-apply">apply</a></li><li><a href="https://git-scm.com/docs/git-cherry-pick">cherry-pick</a></li><li><a href="https://git-scm.com/docs/git-diff">diff</a></li><li><a href="https://git-scm.com/docs/git-rebase">rebase</a></li><li><a href="https://git-scm.com/docs/git-revert">revert</a></li></ul><h3 id="Debugging">Debugging</h3><ul><li><a href="https://git-scm.com/docs/git-bisect">bisect</a></li><li><a href="https://git-scm.com/docs/git-blame">blame</a></li><li><a href="https://git-scm.com/docs/git-grep">grep</a></li></ul><h3 id="Guides">Guides</h3><ul><li><a href="https://git-scm.com/docs/gitattributes">gitattributes</a></li><li><a href="https://git-scm.com/docs/gitcli">Command-line interface conventions</a></li><li><a href="https://git-scm.com/docs/giteveryday">Everyday Git</a></li><li><a href="https://git-scm.com/docs/gitfaq">Frequently Asked Questions (FAQ)</a></li><li><a href="https://git-scm.com/docs/gitglossary">Glossary</a></li><li><a href="https://git-scm.com/docs/githooks">Hooks</a></li><li><a href="https://git-scm.com/docs/gitignore">gitignore</a></li><li><a href="https://git-scm.com/docs/gitmodules">gitmodules</a></li><li><a href="https://git-scm.com/docs/gitrevisions">Revisions</a></li><li><a href="https://git-scm.com/docs/gitsubmodules">Submodules</a></li><li><a href="https://git-scm.com/docs/gittutorial">Tutorial</a></li><li><a href="https://git-scm.com/docs/gitworkflows">Workflows</a></li><li><a href="https://git-scm.com/docs/git#_guides">All guides…</a></li></ul><h3 id="Email">Email</h3><ul><li><a href="https://git-scm.com/docs/git-am">am</a></li><li><a href="https://git-scm.com/docs/git-apply">apply</a></li><li><a href="https://git-scm.com/docs/git-format-patch">format-patch</a></li><li><a href="https://git-scm.com/docs/git-send-email">send-email</a></li><li><a href="https://git-scm.com/docs/git-request-pull">request-pull</a></li></ul><h3 id="External-Systems">External Systems</h3><ul><li><a href="https://git-scm.com/docs/git-svn">svn</a></li><li><a href="https://git-scm.com/docs/git-fast-import">fast-import</a></li></ul><h3 id="Administration">Administration</h3><ul><li><a href="https://git-scm.com/docs/git-clean">clean</a></li><li><a href="https://git-scm.com/docs/git-gc">gc</a></li><li><a href="https://git-scm.com/docs/git-fsck">fsck</a></li><li><a href="https://git-scm.com/docs/git-reflog">reflog</a></li><li><a href="https://git-scm.com/docs/git-filter-branch">filter-branch</a></li><li><a href="https://git-scm.com/docs/git-instaweb">instaweb</a></li><li><a href="https://git-scm.com/docs/git-archive">archive</a></li><li><a href="https://git-scm.com/docs/git-bundle">bundle</a></li></ul><h3 id="Server-Admin">Server Admin</h3><ul><li><a href="https://git-scm.com/docs/git-daemon">daemon</a></li><li><a href="https://git-scm.com/docs/git-update-server-info">update-server-info</a></li></ul><h3 id="Plumbing-Commands">Plumbing Commands</h3><ul><li><a href="https://git-scm.com/docs/git-cat-file">cat-file</a></li><li><a href="https://git-scm.com/docs/git-check-ignore">check-ignore</a></li><li><a href="https://git-scm.com/docs/git-checkout-index">checkout-index</a></li><li><a href="https://git-scm.com/docs/git-commit-tree">commit-tree</a></li><li><a href="https://git-scm.com/docs/git-count-objects">count-objects</a></li><li><a href="https://git-scm.com/docs/git-diff-index">diff-index</a></li><li><a href="https://git-scm.com/docs/git-for-each-ref">for-each-ref</a></li><li><a href="https://git-scm.com/docs/git-hash-object">hash-object</a></li><li><a href="https://git-scm.com/docs/git-ls-files">ls-files</a></li><li><a href="https://git-scm.com/docs/git-ls-tree">ls-tree</a></li><li><a href="https://git-scm.com/docs/git-merge-base">merge-base</a></li><li><a href="https://git-scm.com/docs/git-read-tree">read-tree</a></li><li><a href="https://git-scm.com/docs/git-rev-list">rev-list</a></li><li><a href="https://git-scm.com/docs/git-rev-parse">rev-parse</a></li><li><a href="https://git-scm.com/docs/git-show-ref">show-ref</a></li><li><a href="https://git-scm.com/docs/git-symbolic-ref">symbolic-ref</a></li><li><a href="https://git-scm.com/docs/git-update-index">update-index</a></li><li><a href="https://git-scm.com/docs/git-update-ref">update-ref</a></li><li><a href="https://git-scm.com/docs/git-verify-pack">verify-pack</a></li><li><a href="https://git-scm.com/docs/git-write-tree">write-tree</a></li></ul><h2 id="常用命令">常用命令</h2><h3 id="服务器安装">服务器安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> git-core<span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="绑定git地址">绑定git地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> remote <span class="token function">add</span> origin http://github.com/example.git<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">":tada: init"</span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/master master<span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拉取分支">拉取分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span class="token function">git</span> clean <span class="token parameter variable">-d</span> <span class="token parameter variable">-fx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>-n</code> 显示将要删除的文件和目录</li><li><code>-x</code> 删除忽略文件已经对git来说不识别的文件</li><li><code>-d</code> 删除未被添加到git的路径中的文件</li><li><code>-f</code> 强制运行</li></ul><h3 id="忽略本地历史提交冲突强制合并">忽略本地历史提交冲突强制合并</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> platform https://192.168.100.49:8081/zhcloud/zh-web.git<span class="token function">git</span> fetch platform<span class="token function">git</span> merge platform/master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="切换分支">切换分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> project<span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="回退数据库版本">回退数据库版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本信息SHA<span class="token function">git</span> push <span class="token parameter variable">-f</span> <span class="token parameter variable">-u</span> origin prod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="标签">标签</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token comment"># 打印所有标签</span><span class="token function">git</span> tag <span class="token parameter variable">-l</span> <span class="token number">1</span>.*.* <span class="token comment"># 打印所有标签</span><span class="token function">git</span> checkout <span class="token number">1.0</span>.0 <span class="token comment"># 查看对应标签状态</span><span class="token function">git</span> tag <span class="token number">1.0</span>.0-light <span class="token comment"># 创建轻量标签</span><span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token number">1.0</span>.0 <span class="token parameter variable">-m</span> <span class="token string">"这是备注信息"</span> <span class="token comment"># 创建带备注标签(推荐)</span><span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token number">1.0</span>.0 0c3b62d <span class="token parameter variable">-m</span> <span class="token string">"这是备注信息"</span> <span class="token comment"># 针对特定commit版本SHA创建标签</span><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token number">1.0</span>.0 <span class="token comment"># 删除标签(本地)</span><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span> <span class="token comment"># 将本地标签发布到远程仓库</span><span class="token function">git</span> push origin <span class="token number">1.0</span>.0 <span class="token comment"># 指定版本发送</span><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token number">1.0</span>.0 <span class="token comment"># 删除远程仓库对应标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局信息查看">全局信息查看</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote show origin <span class="token comment"># 代码源</span><span class="token function">git</span> remote remove origin <span class="token comment"># 删除代码源</span><span class="token function">git</span> config <span class="token parameter variable">-l</span> <span class="token comment"># 全局级配置，如果没有仓库级别的特殊配置，默认读取这个配置; 仓库级配置，一般一个项目配置一次</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"name"</span><span class="token function">git</span> config <span class="token parameter variable">--system</span> <span class="token parameter variable">--unset</span> credential.helper <span class="token comment"># 用户密码更改后重新设置</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token boolean">false</span> <span class="token comment"># 解决SSL验证的问题</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy <span class="token comment"># 解决SSL验证的问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子模块">子模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加子模块</span><span class="token function">git</span> submodule <span class="token function">add</span> git@github.com:WANGJUEYA/hexo-theme-christmas-tree.git ./themes/christmas-tree<span class="token comment"># 删除子模块缓存(用于手动删除子模块后提示仍然存在的问题)</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> themes/christmas-tree<span class="token comment"># 首次拉取包含子模块的代码(windows子模块ssh验证有问题, 试用git的命令行客户端 git-bash 处理)</span><span class="token function">git</span> clone git@github.com:WANGJUEYA/B612-Factory.git <span class="token parameter variable">--recursive</span><span class="token comment"># 第一次初始化所有子模块子模块</span><span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span><span class="token comment"># 更新所有子模块到最新版本</span><span class="token function">git</span> submodule update <span class="token parameter variable">--remote</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="http://t.zoukankan.com/ibingshan-p-10238469.html">更多方式</a></li></ul><h2 id="使用ssh协议拉取代码">使用ssh协议拉取代码</h2><ul><li>配置全局配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"GitHub用户名"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"GitHub绑定邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>输入命令, 一直回车生成文件</p></li><li><p>注意: 如果我们<code>Enter passphrase</code>传入了值, 会遇到一系列问题, 建议直接回车不传值</p><ul><li>拉取带子模块的仓库时失败, 需要用 <code>git-bash</code> 客户端构建</li><li>GitHub Action 构建时无法传入key(暂未找到解决方案)</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"{注册邮箱地址}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 <code>C:\Users\用户名\.ssh\id_rsa.pub</code>, 复制内容</li><li>在gitee及github设置中新增ssh</li><li>之后设置remote代码源时需要指定为ssh协议 <code>git@github.com:username</code></li></ul><h3 id="异常解决">异常解决</h3><h4 id="Load-key-“-home-runner-ssh-id-rsa”-invalid-format">Load key “/home/runner/.ssh/id_rsa”: invalid format</h4><p>GitHub Action构建时出现</p><ul><li>应当使用 <code>-m PEM</code> 参数</li></ul><h4 id="ssh-connect-to-host-github-com-port-22-Connection-timed-out">ssh:connect to host <a href="http://github.com">github.com</a> port 22: Connection timed out</h4><ul><li>更改端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> C:/user/.ssh/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检测配置是否成功</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Gitmoji">Gitmoji</h2><p><a href="https://gitmoji.dev/">An emoji guide for your commit messages</a></p><table><thead><tr><th style="text-align:center">icon</th><th style="text-align:center">show</th><th style="text-align:center">key</th><th style="text-align:left">remark</th></tr></thead><tbody><tr><td style="text-align:center">🎨</td><td style="text-align:center"><span class="github-emoji"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">art</td><td style="text-align:left">Improve structure / format of the code.</td></tr><tr><td style="text-align:center">⚡️</td><td style="text-align:center"><span class="github-emoji"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">zap</td><td style="text-align:left">Improve performance.</td></tr><tr><td style="text-align:center">🔥</td><td style="text-align:center"><span class="github-emoji"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">fire</td><td style="text-align:left">Remove code or files.</td></tr><tr><td style="text-align:center">🐛</td><td style="text-align:center"><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">bug</td><td style="text-align:left">Fix a bug.</td></tr><tr><td style="text-align:center">🚑️</td><td style="text-align:center"><span class="github-emoji"><span>🚑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">ambulance</td><td style="text-align:left">Critical hotfix.</td></tr><tr><td style="text-align:center">✨</td><td style="text-align:center"><span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">sparkles</td><td style="text-align:left">Introduce new features.</td></tr><tr><td style="text-align:center">📝</td><td style="text-align:center"><span class="github-emoji"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">memo</td><td style="text-align:left">Add or update documentation.</td></tr><tr><td style="text-align:center">🚀</td><td style="text-align:center"><span class="github-emoji"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">rocket</td><td style="text-align:left">Deploy stuff.</td></tr><tr><td style="text-align:center">💄</td><td style="text-align:center"><span class="github-emoji"><span>💄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">lipstick</td><td style="text-align:left">Add or update the UI and style files.</td></tr><tr><td style="text-align:center">🎉</td><td style="text-align:center"><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">tada</td><td style="text-align:left">Begin a project.</td></tr><tr><td style="text-align:center">✅</td><td style="text-align:center"><span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">white_check_mark</td><td style="text-align:left">Add, update, or pass tests.</td></tr><tr><td style="text-align:center">🔒️</td><td style="text-align:center"><span class="github-emoji"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">lock</td><td style="text-align:left">Fix security issues.</td></tr><tr><td style="text-align:center">🔐</td><td style="text-align:center"><span class="github-emoji"><span>🔐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">closed_lock_with_key</td><td style="text-align:left">Add or update secrets.</td></tr><tr><td style="text-align:center">🔖</td><td style="text-align:center"><span class="github-emoji"><span>🔖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">bookmark</td><td style="text-align:left">Release / Version tags.</td></tr><tr><td style="text-align:center">🚨</td><td style="text-align:center"><span class="github-emoji"><span>🚨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">rotating_light</td><td style="text-align:left">Fix compiler / linter warnings.</td></tr><tr><td style="text-align:center">🚧</td><td style="text-align:center"><span class="github-emoji"><span>🚧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">construction</td><td style="text-align:left">Work in progress.</td></tr><tr><td style="text-align:center">💚</td><td style="text-align:center"><span class="github-emoji"><span>💚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">green_heart</td><td style="text-align:left">Fix CI Build.</td></tr><tr><td style="text-align:center">⬇️</td><td style="text-align:center"><span class="github-emoji"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">arrow_down</td><td style="text-align:left">Downgrade dependencies.</td></tr><tr><td style="text-align:center">⬆️</td><td style="text-align:center"><span class="github-emoji"><span>⬆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">arrow_up</td><td style="text-align:left">Upgrade dependencies.</td></tr><tr><td style="text-align:center">📌</td><td style="text-align:center"><span class="github-emoji"><span>📌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">pushpin</td><td style="text-align:left">Pin dependencies to specific versions.</td></tr><tr><td style="text-align:center">👷</td><td style="text-align:center"><span class="github-emoji"><span>👷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">construction_worker</td><td style="text-align:left">Add or update CI build system.</td></tr><tr><td style="text-align:center">📈</td><td style="text-align:center"><span class="github-emoji"><span>📈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">chart_with_upwards_trend</td><td style="text-align:left">Add or update analytics or track code.</td></tr><tr><td style="text-align:center">♻️</td><td style="text-align:center"><span class="github-emoji"><span>♻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">recycle</td><td style="text-align:left">Refactor code.</td></tr><tr><td style="text-align:center">➕</td><td style="text-align:center"><span class="github-emoji"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">heavy_plus_sign</td><td style="text-align:left">Add a dependency.</td></tr><tr><td style="text-align:center">➖</td><td style="text-align:center"><span class="github-emoji"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">heavy_minus_sign</td><td style="text-align:left">Remove a dependency.</td></tr><tr><td style="text-align:center">🔧</td><td style="text-align:center"><span class="github-emoji"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">wrench</td><td style="text-align:left">Add or update configuration files.</td></tr><tr><td style="text-align:center">🔨</td><td style="text-align:center"><span class="github-emoji"><span>🔨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">hammer</td><td style="text-align:left">Add or update development scripts.</td></tr><tr><td style="text-align:center">🌐</td><td style="text-align:center"><span class="github-emoji"><span>🌐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">globe_with_meridians</td><td style="text-align:left">Internationalization and localization.</td></tr><tr><td style="text-align:center">✏️</td><td style="text-align:center"><span class="github-emoji"><span>✏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">pencil2</td><td style="text-align:left">Fix typos.</td></tr><tr><td style="text-align:center">💩</td><td style="text-align:center"><span class="github-emoji"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">poop</td><td style="text-align:left">Write bad code that needs to be improved.</td></tr><tr><td style="text-align:center">⏪️</td><td style="text-align:center"><span class="github-emoji"><span>⏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">rewind</td><td style="text-align:left">Revert changes.</td></tr><tr><td style="text-align:center">🔀</td><td style="text-align:center"><span class="github-emoji"><span>🔀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">twisted_rightwards_arrows</td><td style="text-align:left">Merge branches.</td></tr><tr><td style="text-align:center">📦️</td><td style="text-align:center"><span class="github-emoji"><span>📦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">package</td><td style="text-align:left">Add or update compiled files or packages.</td></tr><tr><td style="text-align:center">👽️</td><td style="text-align:center"><span class="github-emoji"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">alien</td><td style="text-align:left">Update code due to external API changes.</td></tr><tr><td style="text-align:center">🚚</td><td style="text-align:center"><span class="github-emoji"><span>🚚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">truck</td><td style="text-align:left">Move or rename resources (e.g.: files, paths, routes).</td></tr><tr><td style="text-align:center">📄</td><td style="text-align:center"><span class="github-emoji"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">page_facing_up</td><td style="text-align:left">Add or update license.</td></tr><tr><td style="text-align:center">💥</td><td style="text-align:center"><span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">boom</td><td style="text-align:left">Introduce breaking changes.</td></tr><tr><td style="text-align:center">🍱</td><td style="text-align:center"><span class="github-emoji"><span>🍱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">bento</td><td style="text-align:left">Add or update assets.</td></tr><tr><td style="text-align:center">♿️</td><td style="text-align:center"><span class="github-emoji"><span>♿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">wheelchair</td><td style="text-align:left">Improve accessibility.</td></tr><tr><td style="text-align:center">💡</td><td style="text-align:center"><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">bulb</td><td style="text-align:left">Add or update comments in source code.</td></tr><tr><td style="text-align:center">🍻</td><td style="text-align:center"><span class="github-emoji"><span>🍻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">beers</td><td style="text-align:left">Write code drunkenly.</td></tr><tr><td style="text-align:center">💬</td><td style="text-align:center"><span class="github-emoji"><span>💬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">speech_balloon</td><td style="text-align:left">Add or update text and literals.</td></tr><tr><td style="text-align:center">🗃️</td><td style="text-align:center"><span class="github-emoji"><span>🗃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">card_file_box</td><td style="text-align:left">Perform database related changes.</td></tr><tr><td style="text-align:center">🔊</td><td style="text-align:center"><span class="github-emoji"><span>🔊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">loud_sound</td><td style="text-align:left">Add or update logs.</td></tr><tr><td style="text-align:center">🔇</td><td style="text-align:center"><span class="github-emoji"><span>🔇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">mute</td><td style="text-align:left">Remove logs.</td></tr><tr><td style="text-align:center">👥</td><td style="text-align:center"><span class="github-emoji"><span>👥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">busts_in_silhouette</td><td style="text-align:left">Add or update contributor(s).</td></tr><tr><td style="text-align:center">🚸</td><td style="text-align:center"><span class="github-emoji"><span>🚸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">children_crossing</td><td style="text-align:left">Improve user experience / usability.</td></tr><tr><td style="text-align:center">🏗️</td><td style="text-align:center"><span class="github-emoji"><span>🏗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3d7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">building_construction</td><td style="text-align:left">Make architectural changes.</td></tr><tr><td style="text-align:center">📱</td><td style="text-align:center"><span class="github-emoji"><span>📱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">iphone</td><td style="text-align:left">Work on responsive design.</td></tr><tr><td style="text-align:center">🤡</td><td style="text-align:center"><span class="github-emoji"><span>🤡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f921.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">clown_face</td><td style="text-align:left">Mock things.</td></tr><tr><td style="text-align:center">🥚</td><td style="text-align:center"><span class="github-emoji"><span>🥚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">egg</td><td style="text-align:left">Add or update an easter egg.</td></tr><tr><td style="text-align:center">🙈</td><td style="text-align:center"><span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">see_no_evil</td><td style="text-align:left">Add or update a .gitignore file.</td></tr><tr><td style="text-align:center">📸</td><td style="text-align:center"><span class="github-emoji"><span>📸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">camera_flash</td><td style="text-align:left">Add or update snapshots.</td></tr><tr><td style="text-align:center">⚗️</td><td style="text-align:center"><span class="github-emoji"><span>⚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">alembic</td><td style="text-align:left">Perform experiments.</td></tr><tr><td style="text-align:center">🔍️</td><td style="text-align:center"><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">mag</td><td style="text-align:left">Improve SEO.</td></tr><tr><td style="text-align:center">🏷️</td><td style="text-align:center"><span class="github-emoji"><span>🏷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">label</td><td style="text-align:left">Add or update types.</td></tr><tr><td style="text-align:center">🌱</td><td style="text-align:center"><span class="github-emoji"><span>🌱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">seedling</td><td style="text-align:left">Add or update seed files.</td></tr><tr><td style="text-align:center">🚩</td><td style="text-align:center"><span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">triangular_flag_on_post</td><td style="text-align:left">Add, update, or remove feature flags.</td></tr><tr><td style="text-align:center">🥅</td><td style="text-align:center"><span class="github-emoji"><span>🥅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f945.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">goal_net</td><td style="text-align:left">Catch errors.</td></tr><tr><td style="text-align:center">💫</td><td style="text-align:center"><span class="github-emoji"><span>💫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">dizzy</td><td style="text-align:left">Add or update animations and transitions.</td></tr><tr><td style="text-align:center">🗑️</td><td style="text-align:center"><span class="github-emoji"><span>🗑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5d1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">wastebasket</td><td style="text-align:left">Deprecate code that needs to be cleaned up.</td></tr><tr><td style="text-align:center">🛂</td><td style="text-align:center"><span class="github-emoji"><span>🛂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">passport_control</td><td style="text-align:left">Work on code related to authorization, roles and permissions.</td></tr><tr><td style="text-align:center">🩹</td><td style="text-align:center"><span class="github-emoji"><span>🩹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1fa79.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">adhesive_bandage</td><td style="text-align:left">Simple fix for a non-critical issue.</td></tr><tr><td style="text-align:center">🧐</td><td style="text-align:center"><span class="github-emoji"><span>🧐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f9d0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">monocle_face</td><td style="text-align:left">Data exploration/inspection.</td></tr><tr><td style="text-align:center">⚰️</td><td style="text-align:center"><span class="github-emoji"><span>⚰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">coffin</td><td style="text-align:left">Remove dead code.</td></tr><tr><td style="text-align:center">🧪</td><td style="text-align:center"><span class="github-emoji"><span>🧪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f9ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">test_tube</td><td style="text-align:left">Add a failing test.</td></tr><tr><td style="text-align:center">👔</td><td style="text-align:center"><span class="github-emoji"><span>👔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">necktie</td><td style="text-align:left">Add or update business logic</td></tr><tr><td style="text-align:center">🩺</td><td style="text-align:center"><span class="github-emoji"><span>🩺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1fa7a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">stethoscope</td><td style="text-align:left">Add or update healthcheck.</td></tr><tr><td style="text-align:center">🧱</td><td style="text-align:center"><span class="github-emoji"><span>🧱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f9f1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">bricks</td><td style="text-align:left">Infrastructure related changes.</td></tr><tr><td style="text-align:center">🧑‍💻</td><td style="text-align:center"><span class="github-emoji"><span>🧑💻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f9d1-1f4bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">technologist</td><td style="text-align:left">Improve developer experience</td></tr><tr><td style="text-align:center">💸</td><td style="text-align:center"><span class="github-emoji"><span>💸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">money_with_wings</td><td style="text-align:left">Add sponsorships or money related infrastructure.</td></tr><tr><td style="text-align:center">🧵</td><td style="text-align:center"><span class="github-emoji"><span>🧵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f9f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></td><td style="text-align:center">thread</td><td style="text-align:left">Add or update code related to multithreading or concurrency.</td></tr></tbody></table><h2 id="github">github</h2><h3 id="GitHub-Action">GitHub Action</h3><p>官方文档: <a href="https://docs.github.com/en/actions/quickstart">https://docs.github.com/en/actions/quickstart</a></p><h4 id="利用-GitHub-Action-实现仓库同步">利用 GitHub Action 实现仓库同步</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Sync To Parent Repository<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> push<span class="token punctuation">,</span> delete<span class="token punctuation">,</span> create <span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">git-mirror</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configure Private Key        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh          echo "${{ secrets.SSH_PRIVATE_KEY }}" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          echo "StrictHostKeyChecking no" &gt;&gt; ~/.ssh/config</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push Mirror        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">PARENT_REPOSITORY</span><span class="token punctuation">:</span> <span class="token string">'git@github.com:WANGJUEYA/B612-Factory.git'</span>          <span class="token key atrule">USER_NAME</span><span class="token punctuation">:</span> <span class="token string">'wangjueya_ci'</span>          <span class="token key atrule">USER_EMAIL</span><span class="token punctuation">:</span> <span class="token string">'573711282@qq.com'</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global user.name "$USER_NAME"          git config --global user.email "$USER_EMAIL"          git clone "$PARENT_REPOSITORY" Repository --recursive          cd Repository          git submodule update --remote          git add *          git commit -m ":construction_worker: Auto Sync"          git push</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用-GitHub-Action-实现网站发布">利用 GitHub Action 实现网站发布</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Sync To Parent Repository<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> push<span class="token punctuation">,</span> delete<span class="token punctuation">,</span> create <span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">hexo-deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configure Private Key        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          mkdir -p ~/.ssh          echo "${{ secrets.SSH_PRIVATE_KEY }}" &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          echo "StrictHostKeyChecking no" &gt;&gt; ~/.ssh/config</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> git config        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token key atrule">USER_NAME</span><span class="token punctuation">:</span> <span class="token string">'wangjueya_ci'</span>          <span class="token key atrule">USER_EMAIL</span><span class="token punctuation">:</span> <span class="token string">'573711282@qq.com'</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git config --global user.name "$USER_NAME"          git config --global user.email "$USER_EMAIL"          git config --global core.quotepath false</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> 16.x      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Git commit        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git submodule update --init --recursive          git submodule update --remote          echo "构建时提交一份最新的代码"          git add *          git commit -m ":construction_worker: [skip ci] Auto Update" | if [[ $? == 0 ]]; then          git push origin master          fi</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> c<span class="token punctuation">-</span>hive/gha<span class="token punctuation">-</span>yarn<span class="token punctuation">-</span>cache@v1      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Yarn install        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          echo "修复自动构建时所有文章更新时间为当前时间问题 | 取git提交时间"          cd source/_posts # 子模块更新失败问题          git ls-tree -r --name-only HEAD | while read filename; do          echo $filename;          unixtime=$(git log -1 --format="%at" -- "${filename}");          touchtime=$(date -d @$unixtime +'%Y%m%d%H%M.%S');          echo "${filename} --- ${touchtime}"          touch -t ${touchtime} "${filename}";          done          cd ../../          yarn install</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          yarn run clean          yarn run deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: <code>secrets.SSH_PRIVATE_KEY</code> 在 每个仓库下 setting &gt; secrets 设置</p><h4 id="某次提交不触发构建">某次提交不触发构建</h4><p><a href="https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs">https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs</a></p><p>Workflows that would otherwise be triggered using <code>on: push</code> or <code>on: pull_request</code> won’t be triggered if you add any of the following strings to the commit message in a push, or the HEAD commit of a pull request:</p><p>提交中包含以下文本会跳过对应的触发</p><ul><li><code>[skip ci]</code></li><li><code>[ci skip]</code></li><li><code>[no ci]</code></li><li><code>[skip actions]</code></li><li><code>[actions skip]</code></li></ul><p>Alternatively, you can end the commit message with two empty lines followed by either:</p><ul><li><code>skip-checks:true</code></li><li><code>skip-checks: true</code></li></ul><h2 id="gitee">gitee</h2><p>开发者文档 <a href="https://gitee.com/api/v5/swagger#/postV5UserRepos">https://gitee.com/api/v5/swagger#/postV5UserRepos</a></p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码仓库 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/node/"/>
      <url>/node/</url>
      
        <content type="html"><![CDATA[<h2 id="npm常用包">npm常用包</h2><h3 id="全局安装组件">全局安装组件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">{</span>package<span class="token punctuation">}</span> <span class="token parameter variable">-g</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快速完全删除-node-modules">快速完全删除 node_modules</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> rimraf <span class="token parameter variable">-g</span> <span class="token comment"># 全局安装</span>rimraf node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行打包好的代码">运行打包好的代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> dist <span class="token comment"># 进入打包好的文件</span>npx serve <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="yarn">yarn</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token punctuation">[</span>global<span class="token punctuation">]</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span> <span class="token comment"># 安装包</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package <span class="token operator">|</span> package@tag <span class="token operator">|</span> package@version <span class="token operator">|</span> @scope/<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>--ignore-engines<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pattern<span class="token punctuation">]</span> <span class="token comment"># 更新包</span><span class="token function">yarn</span> remove <span class="token operator">&lt;</span>package<span class="token punctuation">..</span>.<span class="token operator">&gt;</span> <span class="token comment"># 删除包</span><span class="token function">yarn</span> list <span class="token punctuation">[</span>--depth<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pattern<span class="token punctuation">]</span> <span class="token comment"># 列出所有包和它们的依赖</span><span class="token function">yarn</span> run <span class="token punctuation">[</span>script<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>args<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token comment"># 运行脚本</span><span class="token function">yarn</span> upgrade <span class="token parameter variable">--latest</span> <span class="token comment"># 升级所有过时的包版本</span><span class="token comment"># npm install -g yarn-upgrade-all # 全局升级</span>npx yarn-upgrade-all <span class="token comment"># 所有文件升级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="npm与yarn基本命令对比">npm与yarn基本命令对比</h4><table><thead><tr><th style="text-align:left">npm</th><th style="text-align:left">yarn</th></tr></thead><tbody><tr><td style="text-align:left">npm install react --save</td><td style="text-align:left">yarn add react</td></tr><tr><td style="text-align:left">npm uninstall react --save</td><td style="text-align:left">yarn remove react</td></tr><tr><td style="text-align:left">npm install react --save-dev</td><td style="text-align:left">yarn add react --dev</td></tr><tr><td style="text-align:left">npm update --save</td><td style="text-align:left">yarn upgrade</td></tr></tbody></table><h2 id="使用本地依赖">使用本地依赖</h2><ul><li><a href="https://www.cnblogs.com/blacklsle/p/14787684.html">Node.js使用本地依赖</a></li></ul><h2 id="vue-cli-3-0-脚手架cli-service配置说明">vue-cli 3.0 脚手架cli-service配置说明</h2><p>官方文档 <a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">https://cli.vuejs.org/zh/guide/mode-and-env.html</a></p><p>在<code>package.json</code>使用默认预设的项目中看到的内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve --open"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>serve配置</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">--open    服务器启动时打开浏览器--copy    将URL复制到服务器启动时的剪贴板 (直接到浏览器去粘贴就OK了 http://localhost:8080/)--mode    指定环境模式 (默认: development)--host    host 地址 (default: 0.0.0.0)--port    端口号 (default: 8080)--https   使用https (default: false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>build配置</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">--mode        指定环境模式 (default: production)--dest        指定输出目录 (default: dist)--modern      构建两个版本的 js 包：一个面向支持现代浏览器的原生 ES2015+ 包，以及一个针对其他旧浏览器的包。--target      允许您以项目库或Web组件的形式在项目内部构建任何组件 app | lib | wc | wc-async (default: app) ???--name        lib或者web组件库的名称 (default: "name" in package.json or entry filename)--no-clean    在构建项目之前不要删除输出目录(dist)--report      生成report.html以帮助分析包内容--report-json 生成report.json来帮助分析包内容--watch       监听 - 当有改变时 自动重新打包~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="node-sass-冲突问题">node-sass 冲突问题</h2><p><a href="https://www.npmjs.com/package/node-sass">node-sass 版本对应关系</a></p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/maven/"/>
      <url>/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="将不在官方仓库中的jar包手动安装在本地">将不在官方仓库中的jar包手动安装在本地</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.oracle <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>ojdbc14 <span class="token parameter variable">-Dversion</span><span class="token operator">=</span><span class="token number">10.2</span>.0.2.0 <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>E:<span class="token punctuation">\</span>oracle<span class="token punctuation">\</span>ojdbc14-10.2.0.2.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将不在官方仓库中的jar包手动发布到仓库">将不在官方仓库中的jar包手动发布到仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn source:jar <span class="token function">install</span> <span class="token comment"># 打包时增加源码包</span>mvn deploy:deploy-file <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>jar包文件地址,绝对路径 <span class="token parameter variable">-Dsources</span><span class="token operator">=</span>源码包地址 <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>组名 <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>项目名称 <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>版本号 <span class="token parameter variable">-DrepositoryId</span><span class="token operator">=</span>私库id <span class="token parameter variable">-Durl</span><span class="token operator">=</span>私仓地址mvn deploy:deploy-file <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>pom <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>pom.xml            <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>组名 <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>项目名称 <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>版本号 <span class="token parameter variable">-DrepositoryId</span><span class="token operator">=</span>私库id <span class="token parameter variable">-Durl</span><span class="token operator">=</span>私仓地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查找依赖">查找依赖</h2><ul><li><a href="https://maven.apache.org/plugins/maven-dependency-plugin/tree-mojo.html">https://maven.apache.org/plugins/maven-dependency-plugin/tree-mojo.html</a></li><li><a href="https://maven.apache.org/plugins/maven-dependency-plugin/examples/filtering-the-dependency-tree.html">https://maven.apache.org/plugins/maven-dependency-plugin/examples/filtering-the-dependency-tree.html</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn dependency:tree <span class="token operator">&gt;&gt;</span> tree.txt <span class="token comment"># 将依赖数存储到文本</span>mvn dependency:tree <span class="token parameter variable">-Dincludes</span><span class="token operator">=</span><span class="token string">'com.alibaba'</span> <span class="token comment"># 查看依赖树中包含某个groupId的依赖链（-Dincludes后面跟上groupId）</span>mvn dependency:tree <span class="token parameter variable">-Dincludes</span><span class="token operator">=</span><span class="token string">'com.alibaba'</span>:fastjson: <span class="token comment"># 查看依赖树中包含某个groupId和artifactId的依赖链（注意-Dincludes后面是等于号）</span>mvn dependency:tree <span class="token parameter variable">-Dincludes</span><span class="token operator">=</span>:fastjson: <span class="token comment"># 查看依赖树中包含某个artifactId的依赖链（artifactId前面加上冒号）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令">常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-v</span> <span class="token comment"># 显示 nginx 的版本</span>start nginx <span class="token comment"># 开启nginx</span>nginx <span class="token parameter variable">-s</span> stop <span class="token comment"># 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。</span>nginx <span class="token parameter variable">-s</span> quit <span class="token comment"># 平稳关闭Nginx，保存相关信息，有安排的结束web服务。</span>nginx <span class="token parameter variable">-s</span> reload <span class="token comment"># 因改变了Nginx相关配置，需要重新加载配置而重载。</span>nginx <span class="token parameter variable">-s</span> reopen <span class="token comment"># 重新打开日志文件。</span>nginx <span class="token parameter variable">-c</span> filename <span class="token comment"># 为 Nginx 指定一个配置文件，来代替缺省的。</span>nginx <span class="token parameter variable">-t</span> <span class="token comment"># 不运行，而仅仅测试配置文件; nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CentOS7下安装Nginx">CentOS7下安装Nginx</h2><h3 id="1-安装所需环境">1. 安装所需环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> <span class="token parameter variable">-y</span> pcre pcre-develyum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-develyum <span class="token function">install</span> <span class="token parameter variable">-y</span> openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-下载">2. 下载</h3><ul><li>直接下载 .tar.gz 安装包，地址：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://nginx.org/download/nginx-1.26.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装">3. 安装</h3><ul><li><a href="https://blog.csdn.net/u011066470/article/details/118321392">同一主机安装多个nginx</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu安装nginx https://blog.csdn.net/m0_52985087/article/details/132063280</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssl<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.26.2.tar.gz<span class="token builtin class-name">cd</span> nginx-1.26.2<span class="token comment"># 使用默认配置</span><span class="token comment"># ./configure</span><span class="token comment"># 指定安装路径(安装多个nginx需要配置不同安装路径)</span><span class="token comment"># ./configure --prefix=/usr/local/nginx</span><span class="token comment"># 指定安装路径并开启ssh  # --原来有的模块（如果有的话）</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span class="token comment"># 编译安装[nginx.conf](..%2F..%2F..%2F..%2F..%2F..%2F%5B0002%5D%C0%A9%D5%B9%CF%EE%C4%BF%2F%5B2024%5D-002%20%D0%F1%D2%AB%D6%C7%BB%DB%C4%DC%D4%B4%B9%DC%C0%ED%C6%BD%CC%A8%2F%CA%B5%CA%A9%D4%CB%CE%AC%2Fnginx.conf)</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 查找安装路径</span><span class="token function">whereis</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动">4. 启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/./nginx <span class="token comment"># 此方式相当于先查出 nginx 进程 id 再使用 kill 命令强制杀掉进程。</span>./nginx <span class="token parameter variable">-s</span> stop<span class="token comment"># 此方式是待 nginx 进程处理任务完毕后停止</span>./nginx <span class="token parameter variable">-s</span> quit<span class="token comment"># 重新加载配置文件</span>./nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nginx升级websocket">Nginx升级websocket</h3><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">worker_processes  1;events {    worker_connections  1024;}http {    include       mime.types;    default_type  application/octet-stream;    sendfile        on;    keepalive_timeout  65;    map $http_upgrade $connection_upgrade {        default upgrade;        ''      close;    }        # 开启nginx压缩    gzip on;    gzip_min_length 1k;    gzip_comp_level 9;    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;    gzip_vary on;    gzip_disable "MSIE [1-6]\.";            server {        listen       9096;        server_name  localhost;        # 请求头参数允许下划线        underscores_in_headers on;        proxy_pass_request_headers on;        location /dev-api/ {            # 请求服务器升级协议为 WebSocket            proxy_http_version 1.1;            proxy_set_header Upgrade $http_upgrade;            proxy_set_header Connection $connection_upgrade;            # proxy_set_header Upgrade $http_upgrade;            # proxy_set_header Connection "upgrade";            # proxy_http_version 1.1;                        # 设置读写超时时间，默认 60s 无数据连接将会断开            proxy_read_timeout 300s;            proxy_send_timeout 300s;            proxy_set_header Host 127.0.0.1;            proxy_set_header X-Real-IP $remote_addr;            proxy_set_header REMOTE-HOST $remote_addr;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;            proxy_pass http://127.0.0.1:8880/api/;        }                location / {            root html;            index index.html index.htm;            if (!-e $request_filename) {                rewrite ^(.*)$ /index.html?s=$1 last;                break;            }        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由一个端口代理到另外一个端口">由一个端口代理到另外一个端口</h3><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">server {listen 9003;server_name redirectV3;        location / {        proxy_pass_request_headers on;        proxy_pass       http://127.0.0.1:9010;        proxy_set_header Host 127.0.0.1;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection "upgrade";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="给同一端口配置多个上下文【应当有更优雅的方式】">给同一端口配置多个上下文【应当有更优雅的方式】</h3><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">server {    location /vs {alias   D:/workspace/web-project/dist;try_files $uri $uri/ /vs/index.html;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开启https">开启https</h3><pre class="line-numbers language-nginx.conf" data-language="nginx.conf"><code class="language-nginx.conf">  # https://www.cnblogs.com/aerfazhe/p/15773667.html  server {      listen       9090 ssl;      server_name  wechat;      ssl_certificate     /usr/local/nginx/tanpeifang/tanpeifang.pem;      ssl_certificate_key  /usr/local/nginx/tanpeifang/tanpeifang.key;      ssl_session_cache    shared:SSL:1m;      ssl_session_timeout  5m;      ssl_ciphers  HIGH:!aNULL:!MD5;      ssl_prefer_server_ciphers  on;#后台服务配置   location ^~ /api {proxy_pass              http://127.0.0.1:8080/zh-mental/;         # 请求服务器升级协议为 WebSocket          proxy_http_version 1.1;          proxy_set_header Upgrade $http_upgrade;          proxy_set_header Connection $connection_upgrade;proxy_set_header        Host 127.0.0.1;proxy_set_header        X-Real-IP $remote_addr;proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;          # 设置读写超时时间，默认 60s 无数据连接将会断开          proxy_read_timeout 600s;          proxy_send_timeout 600s;}     location / {root   html;index  index.html index.htm;if (!-e $request_filename) {rewrite ^(.*)$ /index.html?s=$1 last;break;}}  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
          <category> Proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch</title>
      <link href="/elasticsearch/"/>
      <url>/elasticsearch/</url>
      
        <content type="html"><![CDATA[<h2 id="常用查询命令">常用查询命令</h2><h3 id="查询版本号-7-6-2">查询版本号 (7.6.2)</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://192.168.100.38:9200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询健康情况">查询健康情况</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://192.168.100.38:9200/_cluster/health?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询所有节点数">查询所有节点数</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://192.168.100.38:9200/_cat/nodes?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询所有节点信息">查询所有节点信息</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://192.168.100.38:9200/_cat/allocation?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询所有索引">查询所有索引</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://192.168.100.38:9200/_cat/indices?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET http://192.168.100.38:9200/_cat/indices?v&amp;pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除索引-可通配符">删除索引[可通配符]</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-XDELETE</span> http://192.168.100.38:9200/kms_knowledge*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询数据结构">查询数据结构</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET kms_knowledge_check/_mapping?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询索引的所有数据">查询索引的所有数据</h3><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET kms_knowledge_check/_search?pretty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="attachment">attachment</h4><ul><li>查询</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET _ingest/pipeline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">DELETE _ingest/pipeline/simple_attachment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>新增</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">PUT _ingest/pipeline/my_attachment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Extract attachment for knowledge"</span><span class="token punctuation">,</span>  <span class="token property">"processors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"attachment"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"knowContent"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>关联数据</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">PUT kms_knowledge/_doc/my_id?pipeline=my_attachment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"knowContent"</span><span class="token operator">:</span> <span class="token string">"e1xydGYxXGFuc2kNCkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0DQpccGFyIH0="</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查询数据</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET kms_knowledge/_doc/my_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">GET kms_knowledge_test/_search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"attachment.content"</span><span class="token operator">:</span> <span class="token string">"测试"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新数据</li></ul><pre class="line-numbers language-http" data-language="http"><div class="caption"><span>request</span></div><code class="language-http">POST kms_knowledge/_update/string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"script"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source"</span><span class="token operator">:</span> <span class="token string">"TemporalAccessor tem = DateTimeFormatter.ofPattern('yyyy-MM-dd HH:mm:ss', Locale.CHINA).parse(ctx._source['sysCreateTime']); ctx._source['countHot'] = 1 + tem.getLong(ChronoField.EPOCH_DAY);"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/vue/"/>
      <url>/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE手动挂载节点">VUE手动挂载节点</h2><p>业务场景: 不想更改框架中的源码, 手动用新节点替换旧节点 <code>$mount</code>; 针对旧节点是在给定条件下展示, 使用watch去挂载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> i18n <span class="token keyword">from</span> <span class="token string">'@/locales'</span><span class="token keyword">export</span> <span class="token keyword">const</span> ZVueBusinessListPageMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">operatorList</span> <span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> importExcelUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataConfig<span class="token punctuation">.</span>sysVarietyView<span class="token punctuation">.</span>servicePrefix <span class="token operator">||</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/base/tool/public/importPlus/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentViewId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?enableInsertOrUpdate=false</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">const</span> MyImportExcelProgress <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>ImportExcelProgress<span class="token punctuation">)</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newValue <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>buttonCode <span class="token operator">===</span> <span class="token string">'disableImportOrUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">MyImportExcelProgress</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">i18n</span><span class="token operator">:</span> i18n<span class="token punctuation">,</span>            <span class="token literal-property property">propsData</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">importExcelUrl</span><span class="token operator">:</span> importExcelUrl<span class="token punctuation">,</span> <span class="token literal-property property">buttonName</span><span class="token operator">:</span> that<span class="token punctuation">.</span><span class="token function">$t</span><span class="token punctuation">(</span><span class="token string">'导入不启用覆盖'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#ListButton-disableImportOrUpdate'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yaml</title>
      <link href="/yaml/"/>
      <url>/yaml/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json</title>
      <link href="/json/"/>
      <url>/json/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/nvm/"/>
      <url>/nvm/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令">常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm list available <span class="token comment"># 查看所有可用node版本</span>nvm <span class="token function">install</span> <span class="token number">20.16</span>.0 <span class="token comment"># 安装node版本</span>nvm use <span class="token number">20.16</span>.0 <span class="token comment"># 切换node版本</span><span class="token function">pnpm</span> config <span class="token builtin class-name">set</span> store-dir <span class="token operator">&lt;</span>new path<span class="token operator">&gt;</span> <span class="token comment"># pnpm设置缓存路径</span><span class="token function">pnpm</span> store path <span class="token comment"># pnpm查看缓存路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://gitcode.csdn.net/65e6e9c81a836825ed787ccc.html">nvm介绍原文地址</a></p><h2 id="前言">前言</h2><p>文章基于 <code>windows环境</code> 使用nvm安装多版本nodejs。mac可能不适用。<br>最近公司有的项目比较老需要降低node版本才能运行，由于来回进行卸载不同版本的node比较麻烦；所以需要使用node工程多版本管理，后面自己就简单捯饬了一下nvm来管理node，顺便记录一下自己的使用过程以便于后续查找。</p><p><strong>注意：安装nvm时不能安装任何node版本（如存在请删除后再安装nvm），再检查环境变量，如果还有node.js相关也删掉，保证系统无任何node.js 残留。</strong><br><strong>卸载完之后cmd命令行输入 node -v 查看是否还能查到node信息，无的话表示删除干净。</strong></p><h2 id="一、卸载node">一、卸载node</h2><p>如果已经安装了node，那么在安装nvm之前，需要先卸载node，如果没有安装可以直接跳过这一步到下一步了。</p><p><strong>删除前可查当前使用的node版本，方便后续决定使用哪个版本的node。</strong></p><ul><li>控制面板 -&gt; 卸载程序 -&gt; 卸载nodejs</li><li>为了确保彻底删除node，看下node安装目录中还有没有node文件夹，有的话一起删除。</li><li>删除以下文件夹（如果存在的话）</li><li>C:\Program Files (x86)\Nodejs</li><li>C:\Program Files\Nodejs</li><li>C:\Users{User}\AppData\Roaming\npm</li><li>C:\Users{User}\AppData\Roaming\npm-cache</li><li>删除C:\Users\用户名 下的 <code>.npmrc</code>文件以及 <code>.yarnrc</code> 文件</li><li>环境变量中npm、node的所有相关统统删掉</li></ul><h2 id="二、nvm是什么？">二、nvm是什么？</h2><p>nvm（node.js version management），是一个nodejs的版本管理工具。nvm和n都是node.js版本管理工具，为了解决node.js <strong>各种版本存在不兼容现象</strong> 可以通过它可以安装和切换不同版本的node.js。【可同时在一个环境中安装多个node.js版本（和配套的npm）】</p><h2 id="三、nvm安装">三、nvm安装</h2><h3 id="1-官网下载-nvm-包">1. 官网下载 nvm 包</h3><p><a href="https://link.csdn.net/?target=https%3A%2F%2Fgithub.com%2Fcoreybutler%2Fnvm-windows%2Freleases%3Flogin%3Dfrom_csdn">https://github.com/coreybutler/nvm-windows/releases</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fc49a4e08d6d2876812dbb0683db67eb.png" alt="在这里插入图片描述"></p><h3 id="2-安装-nvm-setup-exe">2. 安装 nvm-setup.exe</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c4070c75ab0ded466c41a43a2655313a.png" alt="在这里插入图片描述"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/69616b85e591cdc159b3e3f9cadc72a8.png" alt="在这里插入图片描述"></p><p><strong>注意安装路径的文件夹名称不要出现中文，空格等，否则后期npm使用的时候会出现符号格式不正确问题。</strong></p><p>继续点击 Next 就行。</p><h3 id="3-配置路径和下载镜像">3. 配置路径和下载镜像</h3><p>安装完nvm后先不要着急安装node版本。</p><p><strong>找到nvm安装路径 =》找到 setting.txt 文件 =》新增两行信息，配置下载源</strong></p><pre class="line-numbers language-none"><code class="language-none">node_mirror: https://npmmirror.com/mirrors/node/npm_mirror: https://npmmirror.com/mirrors/npm/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i-blog.csdnimg.cn/blog_migrate/dd8bdda9b92ae12b4440896c0e95c21c.png" alt="在这里插入图片描述"></p><p>增加后如下，然后保存退出。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/86759639c57a93f4d31023c2b0131c5f.png" alt="在这里插入图片描述"></p><blockquote><p><strong>第一行是 nvm安装路径</strong><br><strong>第二行是 nodejs路径</strong><br><strong>第三行是 node下载镜像</strong><br><strong>第四行是 npm下载镜像</strong></p></blockquote><p><strong>注意：因为淘宝的镜像域名更换，由于 <a href="http://npm.taobao.org">npm.taobao.org</a> 域名HTTPS证书到期更换为 <a href="http://npmmirror.com">npmmirror.com</a>，那么就会导致之前使用该镜像域名下载依赖的安装包会出现问题。</strong><br>执行报错信息如下：</p><pre class="line-numbers language-none"><code class="language-none">&gt;nvm ls availableCould not retrieve https://npm.taobao.org/mirrors/node/index.json.Get "https://npm.taobao.org/mirrors/node/index.json": x509: certificate has expired or is not yet valid:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-检查nvm是否安装完成">4. 检查nvm是否安装完成</h3><p>win + R，调用cmd，输入<code>nvm</code>，出现下面这一堆就表示安装成功了。</p><p>如果安装不成功，查看之前自己安装的 node.js 有没有彻底删除、安装nvm过程中有没有漏掉什么，可重新卸载再安装一次nvm包。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e5202b83df1e26d847dc5d209696f0c5.png" alt="在这里插入图片描述"></p><h2 id="四、使用nvm安装node版本">四、使用nvm安装node版本</h2><p>win + R，调用cmd</p><p>安装完成后开始插入nodejs首先使用 <code>nvm list available</code> 查询可插入版本号，LST表示可插入稳定版本。【如未指定版本，建议安装LTS下的版本】</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/175515ce295190fb6345817b591f6866.png" alt="在这里插入图片描述"></p><ol><li>安装指定node.js版本</li></ol><pre class="line-numbers language-none"><code class="language-none">nvm install 16.14.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>nvm use</code> 切换node版本。(如果报错，用管理员身份打开重新 <code>nvm use</code> 你指定的版本）</li></ol><pre class="line-numbers language-none"><code class="language-none">nvm use 16.14.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>安装完成后可以分别输入命令行 <code>node -v</code> 和 <code>npm -v</code>，检验node.js以及对应npm是否安装成功</li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bfba1a58e0119542b8bd7faa8a50283c.png" alt="在这里插入图片描述"></p><ol><li><code>nvm list</code> 查看当前已安装的node.js版本，带*号的是正在使用的</li></ol><pre class="line-numbers language-none"><code class="language-none">nvm list或者nvm ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i-blog.csdnimg.cn/blog_migrate/06221e0afb17eea501246f6270c53c37.png" alt="在这里插入图片描述"></p><ol><li>删除某node.js版本</li></ol><pre class="line-numbers language-none"><code class="language-none">nvm uninstall node版本号  //例如：nvm uninstall 16.14.0）即可删除对应版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>比如我现在安装的是 v16.14.0 版本。</li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e38c77af77e5b4d976ea51442243a9f6.png" alt="在这里插入图片描述"></p><p>v16.14.0 文件内部是</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/cfc4abf66666dabeee515548b2099528.png" alt="在这里插入图片描述"></p><p>node_modules内部是这样的</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bbd6cfe0a8ed17ab44965612a8b1de32.png" alt="在这里插入图片描述"></p><h2 id="五、修改npm默认镜像源为淘宝镜像">五、修改npm默认镜像源为淘宝镜像</h2><p>修改npm镜像源为淘宝镜像，加快npm包的下载速度，减少发生连接错误和超时的概率。</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查是否设置淘宝镜像成功（会返回这个地址表示成功：<a href="https://registry.npmmirror.com">https://registry.npmmirror.com</a>）</p><pre class="line-numbers language-none"><code class="language-none">npm config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于使用 淘宝镜像 <code>https://registry.npm.taobao.org</code> 报错的问题</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f6b06a9329cb422864b05d32809908a2.png" alt="在这里插入图片描述"></p><p>是因为从 2024 年1 月 22 日，淘宝原镜像域名（<a href="http://registry.npm.taobao.org">registry.npm.taobao.org</a>）的 HTTPS 证书正式到期，这就导致旧的 npm 淘宝镜像在使用时出错了，所以遇到上述问题，或者还在使用旧的 npm 淘宝镜像，直接将 npm 源切换到新的源即可，文章链接：<a href="https://link.csdn.net/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F679613901%3Flogin%3Dfrom_csdn">技术资讯：npm 淘宝镜像正式到期，赶紧更新！</a></p><pre class="line-numbers language-none"><code class="language-none">// 1. 清空缓存npm cache clean --force// 2. 切换新源npm config set registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、使用-nrm-来管理-npm-源">六、使用 nrm 来管理 npm 源</h2><p>这部分想管理npm源就下载一下，不下载只要上一步完成切换淘宝源镜像也可以，不会影响下面的其他操作，看个人意愿了。<br>我们可以使用 nrm 来管理 npm 源，特别是当需要在不同的网络环境之间切换时，它可以提供更好的包管理体验。</p><blockquote><p>nrm（npm registry manager）是一个用于管理和切换 npm 源的命令行工具。它允许您在不同的 npm 源之间进行切换，以加快包的下载速度，或者解决特定源无法访问的问题。nrm 提供了一组命令，可以列出可用的 npm 源、添加新源、测试源的响应速度，并切换当前使用的源。</p></blockquote><p>首先，通过以下命令来安装 nrm：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g nrm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下是一些常见的 nrm 命令：</p><p>1）列出可用的源：当前配置的所有可用 npm 源以及它们的名称和 URL。</p><pre class="line-numbers language-none"><code class="language-none">nrm ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/8b014536df0c615d206d1e0d112f9268.png" alt="在这里插入图片描述"></p><p>2）切换源：将当前的 npm 源切换为指定的源。可以使用源的名称或 URL 作为 参数。</p><pre class="line-numbers language-none"><code class="language-none">nrm use &lt;registry&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）添加源：添加一个新的 npm 源并指定其名称和 URL。</p><pre class="line-numbers language-none"><code class="language-none">nrm add &lt;registry&gt; &lt;url&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）删除源：删除指定的 npm 源，需要提供源的名称或 URL 作为 参数。</p><pre class="line-numbers language-none"><code class="language-none">nrm del &lt;registry&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）测试源的速度：测试指定源的响应速度，并显示测试结果。</p><pre class="line-numbers language-none"><code class="language-none">nrm test &lt;registry&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6）显示当前使用的源：当前正在使用的 npm 源的名称和 URL。</p><pre class="line-numbers language-none"><code class="language-none">nrm current<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、-环境变量配置">七、 环境变量配置</h2><h3 id="1-设置系统变量和用户变量的作用是什么呢？">1. 设置系统变量和用户变量的作用是什么呢？</h3><p>答：为了命令行安装包时，将包安装到自己设置的目录下。</p><h3 id="2-配置步骤">2. 配置步骤</h3><h4 id="1）新增俩文件夹">1）新增俩文件夹</h4><ol><li>首先创建<code>"node_global"</code> 和 <code>“node_cache”</code>两个文件夹进行全局安装的时候安装对应的库到这两个文件。<br>在nvm的 <code>nodejs</code> 安装路径 <code>C:\Program Files\nodejs</code> 新建两个文件夹命名为 <code>"node_global"</code> 和 <code>“node_cache”</code>。</li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/321c254cf21e0378bce6394f171dca20.png" alt="在这里插入图片描述"></p><ol><li>打开cmd命令行工具，输入以下两句操作（两个路径就是新建上面两个文件夹的路径，主要目的是方便后面window机器使用方便）</li></ol><pre class="line-numbers language-none"><code class="language-none">npm config set prefix "C:\Program Files\nodejs\node_global"npm config set cache "C:\Program Files\nodejs\node_cache"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行成功就无任何响应，没有异常的话，就在去到 环境变量设置处。</p><h4 id="2）设置环境变量">2）设置环境变量</h4><p>我的电脑右键 =》属性 =》高级系统设置 =》系统属性（高级）=》 环境变量，进入环境变量对话框。</p><p>如果环境变量未正确配置，输入<code>node -v</code> 会报错，系统将无法正确识别"node"命令。</p><p>需要我们设置的地方有两个：</p><blockquote><p><strong>1. 系统环境变量新增 NODE_PATH 变量</strong><br><strong>2. 用户变量修改 path 变量</strong></p></blockquote><ol><li>在【系统变量】新建环境变量 <code>NODE_PATH</code> 值为 <code>C:\Program Files\nodejs\node_global\node_modules</code>，<br>其中<code>C:\Program Files\nodejs\node_global\node_modules</code> 就是上面创建的全局模块安装路径文件夹。</li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f67863657503b8540173a8139917ec25.png" alt="在这里插入图片描述"></p><ol><li>修改 【用户变量】中的 <code>path</code> 变量<br>这里我其实没有修改或者增加什么变量，是安装时候默认添加的。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/d82b69602aed9879257bc48e961c433e.png" alt="在这里插入图片描述"><br><img src="https://i-blog.csdnimg.cn/blog_migrate/85f124092dff15bdd4363019d4895a34.png" alt="在这里插入图片描述"></li><li>另外下载完 nvm 之后，系统环境变量和用户环境变量会默认帮我们配置好 <code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code></li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/0d7dd9e26f23b220e97c238ee6b282eb.png" alt="在这里插入图片描述"></p><ol><li>点击确定后配置完成。</li></ol><h2 id="八、测试安装全局模块">八、测试安装全局模块</h2><p>测试是否环境变量是否配置成功，在cmd窗口中输入以下指定全局安装express模块，安装成功的话表示环境变量配置成功。</p><pre class="line-numbers language-none"><code class="language-none">npm install -g express<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i-blog.csdnimg.cn/blog_migrate/87bd94492cc23a7e362501960acdbecf.png" alt="在这里插入图片描述"></p><h2 id="九、卸载nvm">九、卸载nvm</h2><ol><li>先删除你当初所安装的nvm、nodejs的文件夹即可。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/526bca0a8cf493a749578e66aa2fe04d.png" alt="在这里插入图片描述"></li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/12063fecfb0d3fc27926fa475e2ddfd8.png" alt="在这里插入图片描述"></p><ol><li>桌面右键 此电脑 – 点击属性 – 找到高级系统设置 – 环境变量。</li><li>删除用户变量 和 系统变量中名为 <code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code> 两个变量。其他的不要改。</li></ol><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a4c9c0f9e7f8c64da6d3232ab43a3677.png" alt="在这里插入图片描述"></p><ol><li>删除用户变量和系统变量中path中的 %NVM_HOME%，%NVM_SYMLINK% 两个属性，还有c盘中的node_cache，node_global，其他的不要改。<br><img src="https://i-blog.csdnimg.cn/blog_migrate/914badf5a4e7922bd3a250c400a6351c.png" alt="在这里插入图片描述"></li></ol><h2 id="十、遇到的问题">十、遇到的问题</h2><blockquote><p><strong>1. 在安装 nvm 之前没有卸载掉 node，导致 nvm 安装完之后，node和npm都不可用。所以我们在拿到一个新电脑时候最好是先下载nvm，再安装node版本。</strong><br><strong>2. 在第一次使用nvm安装node后，记得使用 nvm use 切换下node版本，以及用 nvm on 打开nodejs版本控制，不然这时候node和npm也都不可用。</strong><br>3. <strong>使用 淘宝镜像 <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a> 报错的问题，因为淘宝原镜像域名（<a href="http://registry.npm.taobao.org">registry.npm.taobao.org</a>）的 HTTPS 证书正式到期； npm <a href="http://xn--registry-g00mv2qcxdcoz52h32gv3vdi2btj1d52ue.npmmirror.com">淘宝镜像已经切换到了registry.npmmirror.com</a>，使用命令行重新切换就可以了 npm config set registry <a href="https://registry.npmmirror.com">https://registry.npmmirror.com</a></strong>，文章链接：<a href="https://link.csdn.net/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F679613901%3Flogin%3Dfrom_csdn">技术资讯：npm 淘宝镜像正式到期，赶紧更新！</a></p></blockquote><p>可参考：<br><a href="https://link.csdn.net/?target=https%3A%2F%2Fblog.csdn.net%2Fpdd11997110103%2Farticle%2Fdetails%2F115981856%3Flogin%3Dfrom_csdn">使用nvm管理node.js版本以及更换npm淘宝镜像源</a><br><a href="https://link.csdn.net/?target=http%3A%2F%2F681314.com%2FA%2FpaXERvv5T8%3Flogin%3Dfrom_csdn">win10环境使用nvm安装多版本nodejs并配置环境变量</a><br><a href="https://link.csdn.net/?target=https%3A%2F%2Fblog.csdn.net%2FHuangsTing%2Farticle%2Fdetails%2F113857145%3Flogin%3Dfrom_csdn">window下安装并使用nvm（含卸载node、卸载nvm、全局安装npm）</a><br><a href="https://link.csdn.net/?target=https%3A%2F%2Fblog.csdn.net%2FyeahPeng11%2Farticle%2Fdetails%2F120606669%3Flogin%3Dfrom_csdn">安装并搭建Vue项目【安装node，设置npm镜像】</a></p>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/tomcat/"/>
      <url>/tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="安装部署">安装部署</h2><p><a href="https://blog.csdn.net/m0_52313753/article/details/122902768">安装教程</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 更新系统</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span><span class="token comment"># 安装jdk</span><span class="token function">apt</span> search jdk<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span class="token function">java</span> <span class="token parameter variable">-version</span> <span class="token comment"># /usr/lib/jvm/java-8-openjdk-amd64</span><span class="token comment">## 下载tomcat安装包</span><span class="token function">wget</span> https://mirrors.huaweicloud.com/apache/tomcat/tomcat-9/v9.0.97/bin/apache-tomcat-9.0.97.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxf</span> apache-tomcat-9.0.97.tar.gz./apache-tomcat-9.0.97/bin/startup.sh./apache-tomcat-9.0.97/bin/shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="停止及重启应用">停止及重启应用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> tomcat<span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> tomcat<span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token operator">&lt;</span>No<span class="token operator">&gt;</span>./bin/startup.sh<span class="token function">tail</span> <span class="token parameter variable">-f</span> logs/catalina.out<span class="token comment"># 查询关键字前后十行信息</span><span class="token function">grep</span> <span class="token parameter variable">-C</span> <span class="token number">10</span> <span class="token string">'key word'</span> /usr/local/apache-tomcat-9.0.65/logs/catalina.out<span class="token comment"># 匹配最后十条数据</span><span class="token function">grep</span> <span class="token parameter variable">-C</span> <span class="token number">10</span> <span class="token string">'key word'</span> /usr/local/apache-tomcat-9.0.65/logs/catalina.out <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-10</span><span class="token comment"># 导出十分钟内的日志</span><span class="token comment"># sed -n '/开始时间/,/结束时间/p' catalina.out &gt; 输出文件.log</span><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">'/2023-07-11 09:10*/,/2023-07-11 09:15*/p'</span> catalina.out <span class="token operator">&gt;</span> log0915.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加系统内存">增加系统内存</h3><p><code>TOMCAT_HOME/bin/catalina.sh</code>文件最前加入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CATALINA_OPTS</span> -server -Xms4096m -Xmx4096m -XX:MaxNewSize=1024m -XX:PermSize=512M -XX:MaxPermSize=1024m"</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$JAVA_OPTS</span> -server -Xms4096m -Xmx4096m -XX:MaxNewSize=1024m -XX:PermSize=512M -XX:MaxPermSize=1024m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看当前系统占用内存">查看当前系统占用内存</h3><ul><li><code>/conf/tomcat-users.xml</code>开启内存管理</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tomcat-users</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>role</span> <span class="token attr-name">rolename</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manager-gui<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>both<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span> <span class="token attr-name">roles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tomcat-users</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tomcat 管理页面查看 <code>Server Status</code> admin/admin</li></ul><h3 id="升级https">升级https</h3><h4 id="自己生成证书">自己生成证书</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keytool <span class="token parameter variable">-genkey</span> <span class="token parameter variable">-alias</span> mine <span class="token parameter variable">-keypass</span> password <span class="token parameter variable">-keyalg</span> RSA <span class="token parameter variable">-keysize</span> <span class="token number">1024</span> <span class="token parameter variable">-validity</span> <span class="token number">36500</span> <span class="token parameter variable">-keystore</span> mine.keystore <span class="token parameter variable">-storepass</span> password <span class="token parameter variable">-deststoretype</span> pkcs12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注: 自己生成的证书小程序无法使用, 需要去腾讯云平台下载ssl证书</p></blockquote><p><a href="https://console.cloud.tencent.com/ssl?source=DNSPod&amp;page=console&amp;from=productoverview">腾讯云ssl证书</a></p><h4 id="服务器配置">服务器配置</h4><p>tomcat/conf/server.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">acceptCount</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">disableUploadTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">enableLookups</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>           <span class="token attr-name">keystoreFile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的.keystore文件路径，这个文件名.keystore也要加上<span class="token punctuation">"</span></span>           <span class="token attr-name">keystorePass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你刚才设定的密钥库密码<span class="token punctuation">"</span></span>           <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.coyote.http11.Http11NioProtocol<span class="token punctuation">"</span></span>           <span class="token attr-name">maxThreads</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span> <span class="token attr-name">SSLEnabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span> <span class="token attr-name">secure</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>           <span class="token attr-name">clientAuth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sslProtocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TLS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tomcat日志分割">tomcat日志分割</h3><h4 id="安装cronolog">安装<code>cronolog</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 快捷安装</span>yum localinstall http://rpmfind.net/linux/epel/7/x86_64/Packages/c/cronolog-1.6.2-14.el7.x86_64.rpm<span class="token comment"># 安装成功版本查询</span>cronolog <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://blog.csdn.net/goudaozuihou/article/details/124896224">安装参考</a></li></ul><h4 id="配置-catalina-out">配置 <code>catalina.out</code></h4><pre class="line-numbers language-out" data-language="out"><code class="language-out"># 226行if [ -z "$CATALINA_OUT" ] ; then  CATALINA_OUT="$CATALINA_BASE"/logs/catalina.outfi# 修改为 =======&gt;if [ -z "$CATALINA_OUT" ] ; then  CATALINA_OUT="$CATALINA_BASE"/logs/catalinaLog.%Y-%m-%d.outfi# 460 行，删除或者注释掉 =======&gt; ps: tomcat9这行注释启动会报错, 不注释不影响使用# touch "$CATALINA_OUT"# 474行和484行两处修改org.apache.catalina.startup.Bootstrap "$@" start \  &gt;&gt; "$CATALINA_OUT" 2&gt;&amp;1 "&amp;"=======&gt;org.apache.catalina.startup.Bootstrap "$@" start 2&gt;&amp;1\  | /sbin/cronolog "$CATALINA_BASE"/logs/catalinaLog.%Y-%m-%d.out &gt;&gt; /dev/null &amp;# 重新启动tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://blog.51cto.com/u_15077537/4252000">配置参考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle</title>
      <link href="/oracle/"/>
      <url>/oracle/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/mysql/"/>
      <url>/mysql/</url>
      
        <content type="html"><![CDATA[<p>my.ini</p><pre class="line-numbers language-none"><code class="language-none">[client]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录basedir=E:\\Mysql# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错# datadir=C:\\web\\sqldata# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CentOS操作mysql">CentOS操作mysql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token comment"># 第一次进入数据库</span><span class="token builtin class-name">set</span> password <span class="token keyword">for</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'xxxxxxxx'</span><span class="token punctuation">)</span> <span class="token comment"># 进入后修改密码</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token comment"># 再次进入数据库</span>create database txsql<span class="token punctuation">;</span> <span class="token comment"># 创建数据库</span>use databasename<span class="token punctuation">;</span> <span class="token comment"># 进入某个数据库</span>show tables<span class="token punctuation">;</span> <span class="token comment"># use db; 显示指定数据库得所有表名</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span> <span class="token comment"># 退出mysql命令行</span>quit<span class="token punctuation">;</span> <span class="token comment"># 退出mysql命令行</span><span class="token keyword">select</span> * from information_schema.tables where table_schema <span class="token operator">=</span> <span class="token string">'databasename'</span><span class="token punctuation">;</span>SHOW DATABASES<span class="token punctuation">;</span> <span class="token comment"># 显示所有数据库</span>use databasename<span class="token punctuation">;</span> <span class="token comment"># 进入某个数据库</span>show tables<span class="token punctuation">;</span> <span class="token comment"># 显示数据库下所有表名</span>quit<span class="token punctuation">;</span> <span class="token comment"># 退出数据库, 执行导出程序</span>mysqldump <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> mydatabase <span class="token operator">&gt;</span> /tmp/mydatabase.sql<span class="token punctuation">;</span> <span class="token comment"># 导出数据库</span>mysqldump <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token parameter variable">--databases</span> mydatabase1 mydatabase2 <span class="token operator">&gt;</span> /tmp/mydatabase.sql<span class="token punctuation">;</span> <span class="token comment"># 导出多个数据库</span>mysql <span class="token parameter variable">-uroot</span> -p<span class="token string">"yourpassword"</span> mydatabase <span class="token operator">&lt;</span> /tmp/mydatabase.sql <span class="token operator">&gt;</span> /tmp/mydatabase.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span> <span class="token comment"># 导入数据, 写入到日志文件, 后台执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ubuntu安装MySQL客户端">Ubuntu安装MySQL客户端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token comment"># 第一次进入数据库</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-client <span class="token comment"># yum search mysql # centos</span><span class="token comment"># yum install mysql-community-client</span>mysql <span class="token parameter variable">--version</span>mysql <span class="token parameter variable">-h</span> <span class="token function">hostname</span> <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span><span class="token comment"># mysql -h 49.233.54.61 -u test -p energydb</span><span class="token comment"># 同一个用户授权多个ip</span>create user <span class="token string">'test'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'1qaz@WSX'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON energydb.* TO <span class="token string">'test'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span>create user <span class="token string">'test'</span>@<span class="token string">'62.234.8.147'</span> identified by <span class="token string">'1qaz@WSX'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'test'</span>@<span class="token string">'62.234.8.147'</span><span class="token punctuation">;</span>create user <span class="token string">'test'</span>@<span class="token string">'49.233.54.61'</span> identified by <span class="token string">'1qaz@WSX'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'test'</span>@<span class="token string">'49.233.54.61'</span><span class="token punctuation">;</span><span class="token comment"># 刷新权限立即生效</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql关联查询时字符集不匹配">mysql关联查询时字符集不匹配</h3><ul><li>如果使用数据库复制迁移且建表语句未设置统一字符集，可能会导致关联查询时出现字符集不匹配异常</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询建表语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> {TABLE_NAME}<span class="token punctuation">;</span><span class="token comment">-- 查询所有字段字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">FULL</span> <span class="token keyword">COLUMNS</span> <span class="token keyword">FROM</span> {TABLE_NAME}<span class="token punctuation">;</span><span class="token comment">-- 查看服务器设置</span><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'character_set_server'</span><span class="token punctuation">;</span><span class="token comment">-- 改变表或字段的字符集</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> {TABLE_NAME} <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span class="token comment">-- 改变某个具体字段的字符集</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> {TABLE_NAME} <span class="token keyword">MODIFY</span> {FIELD_NAME} {FIELD_TYPE} <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/sql/"/>
      <url>/sql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular expression</title>
      <link href="/regular-expression/"/>
      <url>/regular-expression/</url>
      
        <content type="html"><![CDATA[<p>在线练习网站 <a href="https://regexone.com/">https://regexone.com/</a></p><h2 id="常用实例">常用实例</h2><h3 id="匹配第10次出现的逗号">匹配第10次出现的逗号</h3><pre class="line-numbers language-none"><code class="language-none">(([^,]*,){10})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">VALUES ('0001PlatParent', '0001', NULL, '1', '0', '-1', NULL, 'plat', '/plat', 'PlatBasicLayout', NULL, 'N', '大屏菜单(固定位于首位)', 'home', NULL, 'N', 'N', NULL, NULL, NULL, NULL, NULL, NULL, NULL);VALUES (([^,]*,){12})(([^\']*\'){1})([^\']*)VALUES $1 '{"zh-CN":"$5","en-US":"welcome"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IDEA-下划线转驼峰-java不支持">IDEA 下划线转驼峰(java不支持)</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html</a></li><li><code>\w</code>范围为<code>_0-9a-zA-Z</code>包含下划线</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">_?([0-9a-zA-Z])([0-9a-zA-Z]*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">\U$1\E\L$2\E<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns</title>
      <link href="/design-patterns/"/>
      <url>/design-patterns/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 05-Program-Design </category>
          
          <category> Design-Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD常用命令</title>
      <link href="/cmd-chang-yong-ming-ling/"/>
      <url>/cmd-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令">常用命令</h2><h1>按类型合并文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dir</span><span class="token builtin class-name">type</span> *.sql <span class="token operator">&gt;&gt;</span> <span class="token punctuation">..</span>/init_database.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="关闭java进程">关闭java进程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -aon<span class="token operator">|</span>findstr <span class="token string">"8080"</span>taskkill <span class="token parameter variable">-PID</span> <span class="token number">8372</span> <span class="token parameter variable">-F</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="控制面板-卸载程序">控制面板-卸载程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appwiz.cpl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="刷新DNS缓存">刷新DNS缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipconfig /flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="批处理文件-bat">批处理文件 bat</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:: 注释内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打印目录树-tree">打印目录树 tree</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree <span class="token operator">&gt;&gt;</span> <span class="token punctuation">..</span>/tree.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除文件夹">删除文件夹</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rmdir</span> /s /q 文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP-Status-codes</title>
      <link href="/http-status-codes/"/>
      <url>/http-status-codes/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是HTTP状态码">什么是HTTP状态码</h2><p><strong>HTTP状态码</strong>是服务端返回给客户端（因为这里是web开发，这里的客户端指浏览器客户端）的<code>3位数字代码</code>。</p><p>这些状态码相当于浏览器和服务器之间的对话信息。它们相互沟通两者之间的事情是正常运行了还是运行失败了或者发生了一些其他的事情（如Continue）。了解状态码有助于你快速的诊断错误，减少网站的停机时间等等。</p><h2 id="状态码分类">状态码分类</h2><p>状态码共分为五类，以1-5数字开头进行标识，如下：</p><ul><li><strong>1xxs - 信息性</strong>：服务器正在处理请求。</li><li><strong>2xxs - 成功信息</strong>：请求已经完成，服务器向浏览器提供了预期的响应。</li><li><strong>3xxs –重定向</strong>：你的请求被重定向到了其他地方。服务器收到了请求，但是有某种重定向。</li><li><strong>4xxs – 客户端错误</strong>：客户端发生错误，导致服务器无法处理请求。</li><li><strong>5xxs – 服务端错误</strong>：客户端发出了有效的请求，但是服务器未能正确处理请求。</li></ul><h3 id="1xxs状态码">1xxs状态码</h3><h4 id="100-Continue：表明目前为止，所有的请求内容都是可行的，客户端应该继续请求，如果完成，则忽略它。"><strong>100 Continue</strong>：表明目前为止，所有的请求内容都是可行的，客户端应该继续请求，如果完成，则忽略它。</h4><h4 id="101-Switching-Protocol：该状态码是响应客户端Upgrade标头发送的，并且指示服务器也正在切换协议。"><strong>101 Switching Protocol</strong>：该状态码是响应客户端<code>Upgrade</code>标头发送的，并且指示服务器也正在切换协议。</h4><h4 id="103-Early-Hints：主要用于与Link链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。"><strong>103 Early Hints</strong>：主要用于与<code>Link</code>链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。</h4><h3 id="2xxs状态码">2xxs状态码</h3><h4 id="200-OK：请求成功。成功的含义取决于HTTP方法："><strong>200 OK</strong>：请求成功。成功的含义取决于HTTP方法：</h4><ul><li><code>GET</code>：资源已被提取并在消息正文中传输。</li><li><code>HEAD</code>：实体标头位于消息正文中。</li><li><code>POST</code>：描述动作结果的资源在消息体中传输。</li><li><code>TRACE</code>：消息正文包含服务器收到的请求信息。（方法不安全，一般不用）</li></ul><p>说到了HTTP的方法，可以戳<a href="https://link.zhihu.com/?target=https%3A//www.runoob.com/http/http-methods.html">HTTP请求方法</a>这个解析教程来了解一下。</p><h4 id="201-Created：请求已经成功，并因此创建了一个新的资源。这通常是在PUT或POST请求之后发送的响应。"><strong>201 Created</strong>：请求已经成功，并因此创建了一个新的资源。这通常是在<code>PUT</code>或<code>POST</code>请求之后发送的响应。</h4><h4 id="202-Accepted：请求已经接收到，但是没有响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。"><strong>202 Accepted</strong>：请求已经接收到，但是没有响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</h4><h4 id="204-No-Content：服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。遇到复杂请求时候，浏览器会发送一个OPTION方法进行预处理返回响应。"><strong>204 No Content</strong>：服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。遇到<code>复杂请求</code>时候，浏览器会发送一个<code>OPTION</code>方法进行预处理返回响应。</h4><p>关于复杂请求和简单请求，可以参考这篇文章<a href="https://link.zhihu.com/?target=https%3A//mabiao8023.github.io/2018/03/30/CORS%25E9%259D%259E%25E7%25AE%2580%25E5%258D%2595%25E8%25AF%25B7%25E6%25B1%2582/">CORS非简单请求</a>。</p><h4 id="205-Reset-Content：服务器已经成功处理了请求，但是没有返回任何内容。与204响应不同，返回此状态码的响应要求请求者重置文档视图。"><strong>205 Reset Content</strong>：服务器已经成功处理了请求，但是没有返回任何内容。与204响应不同，返回此状态码的响应要求请求者重置文档视图。</h4><h4 id="206-Partial-Content：表服务器已经成功处理了部分GET请求"><strong>206 Partial Content</strong>：表服务器已经成功处理了部分GET请求</h4><h5 id="基于206状态码实现断点续传">基于206状态码实现断点续传</h5><ul><li>视频预览时用户可以进行暂停、继续、拖动进度等操作(基于浏览器对206支持)</li><li>视频下载将在浏览器下载栏展示, 而非用户点击下载后, 大视频无响应很长时间才弹出存储框(基于浏览器对206支持)</li><li>上述优点基于nginx等代理服务转发也可以实现, 但nginx无权限控制, 且用户访问记录需要另外处理</li></ul><h5 id="java代码示例">java代码示例</h5><p>先返回请求头状态, 再通过<code>StreamingResponseBody</code>异步将文件流写入方法体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> myController <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"下载的id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"downloadIds"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> downloadIds<span class="token punctuation">,</span>                         <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> downloadList <span class="token operator">=</span> <span class="token class-name">BaseStringUtils</span><span class="token punctuation">.</span><span class="token function">strToList</span><span class="token punctuation">(</span>downloadIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 权限校验-下载权限</span>        fileAuthorityUtil<span class="token punctuation">.</span><span class="token function">checkAuthority</span><span class="token punctuation">(</span><span class="token class-name">KmsCloudAuthorityType</span><span class="token punctuation">.</span><span class="token constant">DOWNLOAD</span><span class="token punctuation">,</span> downloadList<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置文件类型及名称</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> kmsCloudFileManageService<span class="token punctuation">.</span><span class="token function">downloadFileName</span><span class="token punctuation">(</span>downloadList<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_DISPOSITION</span><span class="token punctuation">,</span>                <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MimetypesFileTypeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StreamingResponseBody</span> streamingResponseBody <span class="token operator">=</span> outputStream <span class="token operator">-&gt;</span>                myService<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> downloadList<span class="token punctuation">)</span><span class="token punctuation">;</span>        streamingResponseBody<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> outputStream<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> downloadList<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>downloadList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">KmsCloudFileManage</span> single <span class="token operator">=</span> <span class="token function">getById</span><span class="token punctuation">(</span>downloadList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单文件对象直接下载</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KmsCloudFileType</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>single<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ResponseInputStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GetObjectResponse</span><span class="token punctuation">&gt;</span></span> responseInputStream <span class="token operator">=</span>                        awsS3Option<span class="token punctuation">.</span><span class="token function">downloadInputStream</span><span class="token punctuation">(</span>single<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>responseInputStream<span class="token punctuation">,</span> outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">ZipOutputStream</span> zos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> downloadId <span class="token operator">:</span> downloadList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KmsCloudFileManage</span><span class="token punctuation">&gt;</span></span> kmsCloudFileManages <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KmsCloudFileManage</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">KmsCloudFileManage</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> <span class="token class-name">KmsCloudFileType</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">KmsCloudFileManage</span><span class="token operator">::</span><span class="token function">getPath</span><span class="token punctuation">,</span> downloadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取相对路径的名称</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">KmsCloudFileManage</span> kmsCloudFileManage <span class="token operator">:</span> kmsCloudFileManages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> path <span class="token operator">=</span> kmsCloudFileManage<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> relativePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>downloadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">transformPath</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                zos<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ResponseBytes</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GetObjectResponse</span><span class="token punctuation">&gt;</span></span> responseBytes <span class="token operator">=</span> awsS3Option<span class="token punctuation">.</span><span class="token function">downloadBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                zos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>responseBytes<span class="token punctuation">.</span><span class="token function">asByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zos<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        zos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：使用的最多的2xxs状态码是200和204，在遇到204状态码的时候，要注意一下自己发的请求是不是复杂请求。</p></blockquote><h3 id="3xxs状态码">3xxs状态码</h3><h4 id="301-Moved-Permanently：被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用响应返回的若干个URI之一。"><strong>301 Moved Permanently</strong>：被请求的资源已<code>永久</code>移动到新位置，并且将来任何对此资源的引用都应该使用响应返回的若干个URI之一。</h4><h4 id="302-Found-Previously-“Moved-temporarily”-：请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。"><strong>302 Found(Previously “Moved temporarily”)</strong>：请求的资源现在<code>临时</code>从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在<code>Cache-Control</code>或<code>Expires</code>中进行了指定的情况下，这个响应才是可缓存的。</h4><h4 id="303-See-Other：对当前的请求的响应可以在另一个URI上被找到，而且客户端应该采用GET的方式访问那个链接。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。"><strong>303 See Other</strong>：对当前的请求的响应可以在另一个URI上被找到，而且客户端应该采用<code>GET</code>的方式访问那个链接。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</h4><h4 id="304-Not-Modified：如果客户端发送了一个带条件的-GET-请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304-响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。请求的时候一般结合If-Modified-Since头部使用。"><strong>304 Not Modified</strong>：如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。请求的时候一般结合<code>If-Modified-Since</code>头部使用。</h4><h4 id="307-Temporary-Redirect：307的意义如上302。与历史上302不同的是在重新发出原始请求时不允许更改请求方法。比如，使用POST请求始终就该用POST请求。"><strong>307 Temporary Redirect</strong>：307的意义如上302。与历史上302不同的是<code>在重新发出原始请求时不允许更改请求方法</code>。比如，使用POST请求始终就该用POST请求。</h4><blockquote><p>备注：307和303已经替代了历史上的302状态码，现在看到的临时重定向的状态码是307。详细内容可到维基百科上查看。</p></blockquote><h3 id="4xxs状态码">4xxs状态码</h3><h4 id="401-Unauthorized：这意味着你的登录凭证无效。服务器不知道你是谁，这时，你需要尝试重新登录。"><strong>401 Unauthorized</strong>：这意味着你的登录凭证无效。服务器不知道你是谁，这时，你需要尝试重新登录。</h4><h4 id="403-Forbidden：服务器已经理解请求，但是拒绝执行它。与401不同，403知道是你登录了，但是还是拒绝了你。"><strong>403 Forbidden</strong>：服务器已经理解请求，但是拒绝执行它。与401不同，403知道是你登录了，但是还是拒绝了你。</h4><h4 id="404-Not-Found：请求失败，你请求所希望得到的资源未在服务器上发现。"><strong>404 Not Found</strong>：请求失败，你请求所希望得到的资源未在服务器上发现。</h4><h4 id="410-Gone：被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。"><strong>410 Gone</strong>：被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。</h4><h4 id="422-Unprocessable-Entity：请求格式良好，但是由于语义错误而无妨遵循。这时候要检查下自己的传参格式语义有没有正确了。"><strong>422 Unprocessable Entity</strong>：请求格式良好，但是由于语义错误而无妨遵循。这时候要检查下自己的传参格式语义有没有正确了。</h4><h4 id="429-Too-Many-Requests：用户在给定的时间内发送了太多请求（“限制请求速率”）。在DDOS攻击中就可以使用到了。"><strong>429 Too Many Requests</strong>：用户在给定的时间内发送了太多请求（“限制请求速率”）。在DDOS攻击中就可以使用到了。</h4><h3 id="5xxs状态码">5xxs状态码</h3><h4 id="500-Internal-Server-Error：服务器内部错误，服务器遇到了不知道如何处理的情况。常常因为后端代码逻辑异常或代码边界条件未处理。"><strong>500 Internal Server Error</strong>：服务器内部错误，服务器遇到了不知道如何处理的情况。常常因为后端代码逻辑异常或代码边界条件未处理。</h4><h4 id="503-Service-Unavailable：服务器没有准备好处理请求。常见的原因是服务器因维护或重载而停机。"><strong>503 Service Unavailable</strong>：服务器没有准备好处理请求。常见的原因是服务器因维护或重载而停机。</h4><h4 id="504-Gateway-Timeout：网关超时，服务器未能快速的做出反应。请求接口返回pedding时间过长基本就是这个问题。"><strong>504 Gateway Timeout</strong>：网关超时，服务器未能快速的做出反应。请求接口返回pedding时间过长基本就是这个问题。</h4><h2 id="参考链接">参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/65887537">小结HTTP状态码</a></p>]]></content>
      
      
      <categories>
          
          <category> 03-Computer-Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大视频在线预览 </tag>
            
            <tag> 断点续传(下载) </tag>
            
            <tag> java </tag>
            
            <tag> StreamingResponseBody </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minio</title>
      <link href="/minio/"/>
      <url>/minio/</url>
      
        <content type="html"><![CDATA[<h2 id="minio部署">minio部署</h2><h3 id="下载mc工具">下载mc工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.min.io/client/mc/release/linux-amd64/mc<span class="token comment"># windows</span>https://dl.min.io/client/mc/release/windows-amd64/mc.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mc-配置-minio服务端-使用默认local即可">mc 配置 minio服务端(使用默认local即可)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mc config <span class="token function">host</span> <span class="token function">ls</span>./mc config <span class="token function">host</span> <span class="token function">add</span> minio-server http://127.0.0.1:9000 minioadmin minioadmin./mc config <span class="token function">host</span> remove minio-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建bucket">创建bucket</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mc mb minio-server/my-bucket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看bucket">查看bucket</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mc <span class="token function">ls</span> minio-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传文件">上传文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 上传一个文件</span>./mc <span class="token function">cp</span> /ect/host minio-server/my-bucket<span class="token comment"># 上传一个文件夹</span>./mc <span class="token function">cp</span> /etc minio-server/my-bucket<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除文件">删除文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除文件</span>./mc <span class="token function">rm</span> minio-server/my-bucket/ect/host<span class="token comment"># 删除文件夹</span>./mc <span class="token function">rm</span> minio-server/my-bucket/ect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除bucket">删除bucket</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除没有文件的桶</span>./mc rb minio-server/my-bucket<span class="token comment"># 删除有文件的桶</span>./mc rb minio-server/my-bucket <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="minio使用">minio使用</h2><ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">aws分片上传接口</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/sdk-for-java/v1/developer-guide/examples-s3-transfermanager.html">使用aws接口操作minio</a></li><li><a href="https://min.io/docs/minio/linux/developers/java/minio-java.html">Minio官方文档</a></li><li><a href="http://docs.minio.org.cn/docs/master/java-client-api-reference">Minio官方文档-中文</a></li></ul><h3 id="minio实现分片上传-同时实现秒传">minio实现分片上传(同时实现秒传)</h3><h4 id="引入依赖">引入依赖</h4><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;!-- aws s3 --&gt;&lt;dependency&gt;    &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;    &lt;artifactId&gt;s3&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑">逻辑</h4><ul><li><p>根据前端传回的文件大小及md5比较文件是否已存在, 已存在则秒传, 未存在创建预上传链接</p></li><li><p>前端根据每个分片地址, 直连文件服务器上传每个分片(当然也可以经过后台转发)</p></li><li><p>前端所有分片上传完毕后通知后端进行文件合并</p></li><li><p><a href="https://zhuanlan.zhihu.com/p/509618221">https://zhuanlan.zhihu.com/p/509618221</a></p></li></ul><h4 id="后端代码">后端代码</h4><p>注意: 如果上传过程中发生异常应当使用 AbortMultiPartUpload 删除初始化的片(这些片不展示但是会占用内存)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AwsS3Option</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取分片上传的uploadId     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CreateMultipartUploadResponse</span> createMultipartUploadResponse <span class="token operator">=</span> awsS3Client<span class="token punctuation">.</span><span class="token function">createMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">CreateMultipartUploadRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>objectPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> createMultipartUploadResponse<span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建某一分片上传链接     */</span>    <span class="token keyword">public</span> <span class="token class-name">URL</span> <span class="token function">getUploadPartUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectPath<span class="token punctuation">,</span> <span class="token keyword">int</span> contentNumber<span class="token punctuation">,</span> <span class="token keyword">long</span> contentSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PresignedUploadPartRequest</span> partRequest <span class="token operator">=</span> awsS3Presigner<span class="token punctuation">.</span><span class="token function">presignUploadPart</span><span class="token punctuation">(</span><span class="token class-name">UploadPartPresignRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signatureDuration</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uploadPartRequest</span><span class="token punctuation">(</span><span class="token class-name">UploadPartRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>objectPath<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">partNumber</span><span class="token punctuation">(</span>contentNumber<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span>contentSize<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> partRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 合并上传流     *     * @param partMd5 &lt;partNumber, md5&gt;     * @return 返回最终结果的md5值     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> partMd5<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletedPart</span><span class="token punctuation">&gt;</span></span> completedPartList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> partMd5<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            completedPartList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CompletedPart</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partNumber</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eTag</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        awsS3Client<span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">CompleteMultipartUploadRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span>uploadId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>objectPath<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">multipartUpload</span><span class="token punctuation">(</span><span class="token class-name">CompletedMultipartUpload</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parts</span><span class="token punctuation">(</span>completedPartList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeadObjectResponse</span> headObjectResponse <span class="token operator">=</span> awsS3Client<span class="token punctuation">.</span><span class="token function">headObject</span><span class="token punctuation">(</span><span class="token class-name">HeadObjectRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>objectPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> headObjectResponse<span class="token punctuation">.</span><span class="token function">eTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端代码">前端代码</h4><p>mixin混入后使用 <code>that.uploadPartBefore(file).then(res =&gt; {})</code>调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> formData<span class="token punctuation">,</span> postAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/manage'</span><span class="token keyword">import</span> SparkMD5 <span class="token keyword">from</span> <span class="token string">'spark-md5'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> completeMultipartUpload<span class="token punctuation">,</span> createMultipartUpload<span class="token punctuation">,</span> preUploadPart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/api'</span><span class="token comment">/** * 一般共有方法 提取 */</span><span class="token keyword">export</span> <span class="token keyword">const</span> ZVueUploadPartMixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">createMultipartUploadUrl</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> createMultipartUpload    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">preUploadPartUrl</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> preUploadPart    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">completeMultipartUploadUrl</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> completeMultipartUpload    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">progressFormat</span><span class="token operator">:</span> <span class="token string">'Done'</span><span class="token punctuation">,</span>      <span class="token literal-property property">progressData</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 方法执行</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">hexStringMd5</span><span class="token punctuation">(</span><span class="token parameter">hex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> int32View <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>      <span class="token keyword">let</span> len <span class="token operator">=</span> hex<span class="token punctuation">.</span>length      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>      len <span class="token operator">/=</span> <span class="token number">2</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> pos <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        int32View<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">md5</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 上传前md5计算</span>    <span class="token function">uploadPartBefore</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'不允许上传空文件!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment">// 上传中(数据分片、计算md5-用于秒传)</span>        that<span class="token punctuation">.</span><span class="token function">createFilePart</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">fileMd5</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">// 准备预上传id</span>          <span class="token keyword">let</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span>webkitRelativePath          fileName <span class="token operator">=</span> fileName <span class="token operator">&amp;&amp;</span> fileName<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> fileName <span class="token operator">:</span> file<span class="token punctuation">.</span>name          <span class="token comment">// 解决[]被tomcat拦截的问题; 解决 &amp; # 无法上传的问题, 改用post方法</span>          <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">dataTable</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataTable<span class="token punctuation">,</span>            <span class="token literal-property property">dataId</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataId<span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span>            <span class="token literal-property property">fileSize</span><span class="token operator">:</span> file<span class="token punctuation">.</span>size<span class="token punctuation">,</span>            <span class="token literal-property property">fileMd5</span><span class="token operator">:</span> fileMd5<span class="token punctuation">,</span>            <span class="token literal-property property">fileName</span><span class="token operator">:</span> fileName          <span class="token punctuation">}</span>          <span class="token function">postAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>createMultipartUploadUrl<span class="token punctuation">,</span> <span class="token function">formData</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 预处理</span>              file<span class="token punctuation">.</span>preTreatment <span class="token operator">=</span> <span class="token boolean">true</span>              <span class="token comment">// 秒传</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>saveFlag <span class="token operator">===</span> <span class="token string">'TA'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span>progressFormat <span class="token operator">=</span> <span class="token string">'second!'</span>                that<span class="token punctuation">.</span>progressData <span class="token operator">=</span> <span class="token number">100</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 分片上传</span>                file<span class="token punctuation">.</span>requestData <span class="token operator">=</span> res<span class="token punctuation">.</span>result                that<span class="token punctuation">.</span>progressFormat <span class="token operator">=</span> <span class="token string">'Uploading!'</span>                that<span class="token punctuation">.</span><span class="token function">uploadPartProcess</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 生成文件切片, 计算md5值</span>    <span class="token function">createFilePart</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> partSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>partSize        <span class="token keyword">let</span> totalSize <span class="token operator">=</span> file<span class="token punctuation">.</span>size        <span class="token keyword">let</span> subSize <span class="token operator">=</span> totalSize <span class="token operator">%</span> partSize        <span class="token keyword">let</span> partNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>totalSize <span class="token operator">/</span> partSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>subSize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> partsMd5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>partNum<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> partNum<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> currentSize <span class="token operator">=</span> index <span class="token operator">===</span> partNum <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> subSize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> subSize <span class="token operator">:</span> partSize          <span class="token keyword">const</span> blob <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>partSize <span class="token operator">*</span> index<span class="token punctuation">,</span> partSize <span class="token operator">*</span> index <span class="token operator">+</span> currentSize<span class="token punctuation">)</span>          <span class="token comment">// 计算分片的md5值</span>          <span class="token keyword">let</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          fileReader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>          fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            partsMd5<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkMD5<span class="token punctuation">.</span>ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 最后一次计算总的大小</span>            <span class="token keyword">let</span> currentLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>partsMd5<span class="token punctuation">)</span><span class="token punctuation">.</span>length            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLength <span class="token operator">===</span> partNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>              file<span class="token punctuation">.</span>partTotal <span class="token operator">=</span> partNum              file<span class="token punctuation">.</span>partsMd5 <span class="token operator">=</span> partsMd5              <span class="token comment">// 返回总的md5值</span>              <span class="token keyword">let</span> fileMd5Hex <span class="token operator">=</span> <span class="token string">''</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> partNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fileMd5Hex <span class="token operator">=</span> fileMd5Hex <span class="token operator">+</span> partsMd5<span class="token punctuation">[</span>i<span class="token punctuation">]</span>              <span class="token punctuation">}</span>              file<span class="token punctuation">.</span>md5Counting <span class="token operator">=</span> <span class="token boolean">false</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">hexStringMd5</span><span class="token punctuation">(</span>fileMd5Hex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> partNum<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment">// md5增加提示信息, 防止md5时间过长用户以为发生意外</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLength <span class="token operator">&lt;</span> partNum <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                file<span class="token punctuation">.</span>md5Counting <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>progressData <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>progressFormat <span class="token operator">=</span> <span class="token string">'(计算md5: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>currentLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> partNum <span class="token operator">+</span> <span class="token string">')'</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 上传接口(启动分片上传)</span>    <span class="token function">uploadPartProcess</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> contentIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentIndex <span class="token operator">&gt;=</span> file<span class="token punctuation">.</span>partTotal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> that<span class="token punctuation">.</span><span class="token function">uploadPartAfter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用分片上传或合并</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> contentSize <span class="token operator">=</span> contentIndex <span class="token operator">===</span> file<span class="token punctuation">.</span>partTotal <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> file<span class="token punctuation">.</span>size <span class="token operator">%</span> that<span class="token punctuation">.</span>partSize <span class="token operator">:</span> that<span class="token punctuation">.</span>partSize          <span class="token keyword">const</span> begin <span class="token operator">=</span> contentIndex <span class="token operator">*</span> that<span class="token punctuation">.</span>partSize          <span class="token function">postAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>preUploadPartUrl<span class="token punctuation">,</span> <span class="token function">formData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">filePath</span><span class="token operator">:</span> file<span class="token punctuation">.</span>requestData<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span>            <span class="token literal-property property">uploadId</span><span class="token operator">:</span> file<span class="token punctuation">.</span>requestData<span class="token punctuation">.</span>id<span class="token punctuation">,</span>            <span class="token literal-property property">contentIndex</span><span class="token operator">:</span> contentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token literal-property property">contentSize</span><span class="token operator">:</span> contentSize<span class="token punctuation">,</span>            <span class="token literal-property property">contentMd5</span><span class="token operator">:</span> file<span class="token punctuation">.</span>partsMd5<span class="token punctuation">[</span>contentIndex<span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 上传分片</span>              <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'put'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>result<span class="token punctuation">)</span>              xhr<span class="token punctuation">.</span><span class="token function">overrideMimeType</span><span class="token punctuation">(</span><span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span>              <span class="token comment">// 上传进度</span>              xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function-variable function">onprogress</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>lengthComputable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  that<span class="token punctuation">.</span>progressData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> e<span class="token punctuation">.</span>loaded<span class="token punctuation">)</span> <span class="token operator">/</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token comment">// 上传结束后启动下一个分片</span>              xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  that<span class="token punctuation">.</span><span class="token function">uploadPartProcess</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> contentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> begin <span class="token operator">+</span> contentSize<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment">// 获取分片链接失败</span>              <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 上传结束后合并数据库</span>    <span class="token function">uploadPartAfter</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token comment">// 合并分片</span>      <span class="token keyword">let</span> param <span class="token operator">=</span> file<span class="token punctuation">.</span>requestData      param<span class="token punctuation">.</span>partsMd5 <span class="token operator">=</span> file<span class="token punctuation">.</span>partsMd5      param<span class="token punctuation">.</span>fileSort <span class="token operator">=</span> <span class="token string">''</span>      param<span class="token punctuation">.</span>sysCreateTime <span class="token operator">=</span> <span class="token string">''</span>      param<span class="token punctuation">.</span>sysUpdateTime <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">postAction</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>completeMultipartUploadUrl<span class="token punctuation">,</span> <span class="token function">formData</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>progressFormat <span class="token operator">=</span> <span class="token string">'Done!'</span>            that<span class="token punctuation">.</span>progressData <span class="token operator">=</span> <span class="token number">100</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel</title>
      <link href="/easyexcel/"/>
      <url>/easyexcel/</url>
      
        <content type="html"><![CDATA[<p>官方文档: <a href="https://easyexcel.opensource.alibaba.com/docs/current/">https://easyexcel.opensource.alibaba.com/docs/current/</a></p><h2 id="代码示例">代码示例</h2><h3 id="Excel限制下拉框文本长度不能超过-255-新建一个sheet存储下拉框">Excel限制下拉框文本长度不能超过 255, 新建一个sheet存储下拉框</h3><p><a href="https://github.com/alibaba/easyexcel/issues/1138">https://github.com/alibaba/easyexcel/issues/1138</a></p><ul><li>核心逻辑: 使用EXCEL 数据 &gt; 数据校验 &gt; <code>=select04!$A$1:$A$4</code></li><li>同样可以使用公式(不能使用数组) &gt; <code>=IF($B$13=1,select00!$A$1:$A$44,IF($B$13=2,select03!$A$1:$A$10,select04!$A$1:$A$4))</code></li><li>可以使用子串截取的方式从同一个下拉框获取数据 | Excel 省市县联动下拉框</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportSelectSheetWriteHandler</span> <span class="token keyword">implements</span> <span class="token class-name">SheetWriteHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 自定义的行和列     * key为下拉框对应的列号, 从0开始计算     * value存储一个map(其中key为数据库读取的值/value为显示展示的值)     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> customSelect<span class="token punctuation">;</span>    <span class="token comment">/**     * 生成下拉框最后行号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> lastRow<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ImportSelectSheetWriteHandler</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> customSelect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customSelect <span class="token operator">=</span> customSelect<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRow <span class="token operator">=</span> <span class="token function">lastRowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ImportSelectSheetWriteHandler</span> <span class="token function">lastRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> lastRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRow <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastRow <span class="token operator">=</span> lastRow<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">lastRowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> limit <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SystemConfigHelper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigValue</span><span class="token punctuation">(</span><span class="token string">"SYS_LIMIT_IMPORT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">ConvertUtils</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span>limit<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取导入上限配置失败!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeSheetCreate</span><span class="token punctuation">(</span><span class="token class-name">WriteWorkbookHolder</span> writeWorkbookHolder<span class="token punctuation">,</span> <span class="token class-name">WriteSheetHolder</span> writeSheetHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSheetCreate</span><span class="token punctuation">(</span><span class="token class-name">WriteWorkbookHolder</span> writeWorkbookHolder<span class="token punctuation">,</span> <span class="token class-name">WriteSheetHolder</span> writeSheetHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"第{}个Sheet写入成功。"</span><span class="token punctuation">,</span> writeSheetHolder<span class="token punctuation">.</span><span class="token function">getSheetNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>customSelect <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> customSelect<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> key <span class="token operator">:</span> customSelect<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">CellRangeAddressList</span> cellRangeAddressList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellRangeAddressList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lastRow<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> sheetName <span class="token operator">=</span> <span class="token string">"select"</span> <span class="token operator">+</span> writeSheetHolder<span class="token punctuation">.</span><span class="token function">getSheetNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> select <span class="token operator">=</span> customSelect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">generateOtherSheet</span><span class="token punctuation">(</span>writeWorkbookHolder<span class="token punctuation">.</span><span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheetName<span class="token punctuation">,</span> select<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> formula <span class="token operator">=</span> sheetName <span class="token operator">+</span> <span class="token string">"!$A$1:$A$"</span> <span class="token operator">+</span> select<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token class-name">DataValidationHelper</span> helper <span class="token operator">=</span> writeWorkbookHolder<span class="token punctuation">.</span><span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDataValidationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DataValidationConstraint</span> constraint <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">createFormulaListConstraint</span><span class="token punctuation">(</span>formula<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DataValidation</span> dataValidation <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">createValidation</span><span class="token punctuation">(</span>constraint<span class="token punctuation">,</span> cellRangeAddressList<span class="token punctuation">)</span><span class="token punctuation">;</span>                writeSheetHolder<span class="token punctuation">.</span><span class="token function">getSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addValidationData</span><span class="token punctuation">(</span>dataValidation<span class="token punctuation">)</span><span class="token punctuation">;</span>                writeWorkbookHolder<span class="token punctuation">.</span><span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSheetHidden</span><span class="token punctuation">(</span>writeWorkbookHolder<span class="token punctuation">.</span><span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSheetIndex</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">generateOtherSheet</span><span class="token punctuation">(</span><span class="token class-name">Workbook</span> wb<span class="token punctuation">,</span> <span class="token class-name">String</span> sheetName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> select<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建下拉列表值存储工作表</span>        <span class="token class-name">Sheet</span> sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环往该sheet中设置添加下拉列表的值</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> select<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Row</span> row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Cell</span> cellValue <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cellValue<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造多页签主子表数据">构造多页签主子表数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MasterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 方法3 如果写到不同的sheet 不同的对象</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"C:\\Users\\JUE\\Desktop\\testData.xlsx"</span><span class="token punctuation">;</span>        <span class="token class-name">ExcelWriter</span> excelWriter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 这里 指定文件</span>            excelWriter <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样。这里注意DemoData.class 可以每次都变，我这里为了方便 所以用的同一个class 实际上可以一直变</span>            <span class="token class-name">WriteSheet</span> writeSheet1 <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">writerSheet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"sheet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token function">headMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">dataMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> writeSheet1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">WriteSheet</span> writeSheet2 <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">writerSheet</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"sheet2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token function">headSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">dataSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> writeSheet2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 千万别忘记finish 会帮忙关闭流</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>excelWriter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                excelWriter<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">headMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"编码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">headSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"主表编码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"子表编码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"子表名称"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">dataMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"code"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"名称"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">dataSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"code"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"sub"</span> <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token string">"子表名称"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css介绍与实战</title>
      <link href="/css/"/>
      <url>/css/</url>
      
        <content type="html"><![CDATA[<h2 id="元素选择器">元素选择器</h2><h3 id="基础选择器">基础选择器</h3><p>基础选择器是选择器的所有选择器的基本组成元素，也最简单，包含如下5个类别：</p><ol><li>ID选择器</li><li>标签选择器</li><li>类选择器</li><li>属性选择器：类选择器算是一个特殊的<code>属性选择器</code>，通用的属性选择器举例如下：</li></ol><pre class="line-numbers language-none"><code class="language-none">#css代码[href="http://www.baidu.com/"] {font-size: 12px;}#html代码&lt;a href="http://www.baidu.com/&gt;百度&lt;/a&gt;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>通配选择器：就是特殊符号<code>*</code>，一般不建议单独使用，因为这个匹配效率很低</li></ol><h3 id="组合选择器">组合选择器</h3><ol><li>A B：后代选择器，A的所有儿子孙子等后代中匹配B的节点</li><li>A &gt; B：儿子选择器，只选A的儿子节点中匹配B的节点</li><li>A + B：相邻兄弟选择器，A的兄弟选择器中的第一个满足B的兄弟节点，注意只选择第一个</li><li>A ~ B: 普通兄弟选择器，跟B类似，只不过是所有满足B的兄弟节点，而不只是相邻的第一个</li></ol><h3 id="伪类选择器">伪类选择器</h3><p>最常见的选择器有如下几个类别：</p><ol><li>跟鼠标有关的几个选项：</li><li>link：还没有访问过的链接的状态</li><li>visited：已经访问过的链接的状态</li><li>hover：鼠标滑动到组件上面的时候的状态</li><li>active：鼠标单击左键放下到松开左键这段时间的状态</li><li>跟聚焦有关的几个选项</li><li>这个类别主要是指表单的各种输入组件，当某个输入组件获得焦点的时候状态</li><li>focus：当某个组件获得焦点</li><li>focus-within：当所有的儿子孙子节点中有一个节点获得焦点的状态</li><li>跟节点动态选择的几个选项</li><li>first-child：当一个节点是父亲所有直系儿子的第一个节点，且前面的匹配条件</li><li>first-of-type：所有节点中第一个满足前面的匹配条件的节点，跟上面first-child的区别在于及时满足节点的条件不是_长子_也能匹配</li><li>nth-child(an+b)；所有儿子节点都挑出来，逐个匹配前面的条件，如果匹配上了，在根据节点的offset信息进行(offste-b%a == 0)的判断，看是否能匹配上<br>\1. 通过这个属性，我们可以设置第几个儿子节点(0n+b)，前几个儿子节点(-1n+b)，奇数(2n+1)或者偶数(2n)节点的选择；<br>\1. 跟这个类似的还有nth-last-child：从后往前数的意思；</li><li>nth-of-type(an+b)：这个跟上面是类似的，唯一不同的是offset的算法，这个属性是先进行条件匹配，将节点进行一轮筛选过后的index再执行数值判断，感觉这个会比较常用；<br>\1. 通过这个属性，我们可以设置第几个儿子节点，前几个儿子节点，奇数或者偶数节点的选择；<br>\1. 跟这个属性类似的还会有first-of-type和last-of-type的属性</li><li>其他几个常见选项</li><li>empty：当节点中内容为空，连空格都没有的时候，就能匹配</li><li>target：当节点包含id，并且URL是通过<a href="http://host/params#id%E6%9D%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E8%AF%A5id%E5%AF%B9%E5%BA%94%E7%9A%84%E8%8A%82%E7%82%B9%E5%B0%B1%E8%83%BD%E5%91%BD%E4%B8%AD">http://host/params#id来访问的时候，该id对应的节点就能命中</a></li><li>checked：用于radiobutton、checkbox、select选项当选项被选中的时候，就能命中</li><li>enable/disable：当节点是enable或者disable的时候的就能命中</li></ol><h3 id="伪节点选择器">伪节点选择器</h3><p>伪节点选择器常见的有如下几个：</p><ol><li>::before：在指定元素的最前面创建一个子元素；</li><li>::after：在指定元素的最后面创建一个子元素；</li><li>::first-letter：指定元素的第一个字母；</li><li>::first-line：指定元素的第一行文字；</li></ol><h3 id="选择器优先级">选择器优先级</h3><p>如果某个HTML节点的某个属性命中了多个CSS的选择器，那么就需要一个冲突解决机制来确保到底使用哪个规则。</p><p>CSS的优先级选择有三个规则：</p><ol><li>如果css的某个属性后面加了<code>!important</code>的话，就一定会使用他，他是优先级最高的</li><li>如果都没指定<code>!important</code>，就用精确度匹配算法计算出规则的优先级得分，得分高的使用</li><li>如果优先级得分一样，就采用出现在文本最后的那个规则，即跟文本的先后顺序相关</li></ol><p>可以看到，如上三个规则中，最重要的就是第二个规则<strong>精确度匹配算法</strong>，该算法的大概逻辑如下：</p><p>首先，优先级算法有一个原则，就是精细度越高的规则，优先级就越高，比如id选择器 &gt; 类选择器 &gt; 标签选择器。</p><p>然后，由于一个选择器可能会有多个基础选择器组合而来的，所以需要有一个组合计算器的计算方法，计算方法如下：</p><pre class="line-numbers language-none"><code class="language-none">priority_score =     100 * count(ID选择器) + // 百位数    10  * count(类选择器|属性选择器|伪类选择器) + // 十位数    1   * count(标签选择器|伪元素选择器) // 个位数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意两点</p><ol><li>在所有基础选择器当中，通配选择器、组合符合(&gt;, +, ~)、以及否定伪类(div:not(.my_content)) 不参与到优先级计算当中；</li><li>属性选择器的例子，div[id=“my_div”]，这个会按照属性参与，而不是ID选择器；且该选择器中，标签选择器和属性选择器计数都会+1；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/swagger/"/>
      <url>/swagger/</url>
      
        <content type="html"><![CDATA[<p>Swagger <a href="https://swagger.io/docs/specification/2-0/describing-parameters/">官方文档</a></p><h2 id="使用第三方工具包">使用第三方工具包</h2><h3 id="增加包版本">增加包版本</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>swagger-bootstrap-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${swagger-bootstrap-ui.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除原来swagger-ui包">删除原来swagger-ui包</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${springfox-swagger2.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置类加上注解-EnableSwaggerBootstrapUI">配置类加上注解 <code>@EnableSwaggerBootstrapUI </code></h3><h3 id="yml配置登录名密码">yml配置登录名密码</h3><pre class="line-numbers language-none"><code class="language-none"># swagger配置swagger:  production: false  basic:    enable: true    username: cplh_swagger    password: ************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="swagger关闭ui放行">swagger关闭ui放行</h3><pre class="line-numbers language-none"><code class="language-none">// filterChainDefinitionMap.put("/swagger-ui.html", ANON);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="swagger地址由原来的-swagger-ui-html-变更为-doc-html">swagger地址由原来的 <code>/swagger-ui.html</code> 变更为 <code>/doc.html</code></h3><h3 id="cloud升级方法">cloud升级方法</h3><ul><li>cloud每个服务都应当升级swagger访问加密</li><li>网关需要放行对应的资源与请求</li></ul><h2 id="自定义简单校验-基于http安全协议">自定义简单校验(基于http安全协议)</h2><ul><li>通过拦截器自定义拦截逻辑</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/swagger*"</span><span class="token punctuation">,</span> <span class="token string">"/swagger/*"</span><span class="token punctuation">,</span> <span class="token string">"/swagger-resources/*"</span><span class="token punctuation">,</span> <span class="token string">"/v3/*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> filterName <span class="token operator">=</span> <span class="token string">"swaggerSecurityFilter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerSecurityFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SWAGGER_SECURITY_SESSION</span> <span class="token operator">=</span> <span class="token string">"swaggerSecuritySession"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${system-config.swagger-security:true}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> security <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${system-config.swagger-username:cplh_swagger}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${system-config.swagger-password:ZHbootvue@swagger}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> servletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>        <span class="token class-name">HttpServletResponse</span> httpServletResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>security<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> swaggerSessionValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">SWAGGER_SECURITY_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>swaggerSessionValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>swaggerSessionValue<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果session中有值且等于密码, 取消拦截</span>                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> auth <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> userAndPass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> upArr <span class="token operator">=</span> userAndPass<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>upArr<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeForbiddenCode</span><span class="token punctuation">(</span>httpServletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">String</span> iptUser <span class="token operator">=</span> upArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> iptPass <span class="token operator">=</span> upArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>iptUser<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>iptPass<span class="token punctuation">)</span>                            <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iptUser<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iptPass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        servletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">SWAGGER_SECURITY_SESSION</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeForbiddenCode</span><span class="token punctuation">(</span>httpServletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">writeForbiddenCode</span><span class="token punctuation">(</span>httpServletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeForbiddenCode</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SC_UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">WWW_AUTHENTICATE</span><span class="token punctuation">,</span> <span class="token string">"Basic realm=\"input Swagger Basic userName &amp; password \""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"You do not have permission to access this resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加请求头需要的通用参数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableOpenApi</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token class-name">SystemConfig</span><span class="token punctuation">.</span><span class="token constant">PREFIX</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"swagger-open"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2Config</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token class-name">SystemConfig</span> systemConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//添加head参数配置start</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestParameter</span><span class="token punctuation">&gt;</span></span> pars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParameterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">ParameterType</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">CommonConstant</span><span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token class-name">CommonConstant</span><span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParameterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">ParameterType</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">SysClientConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token class-name">SysClientConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParameterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">ParameterType</span><span class="token punctuation">.</span><span class="token constant">HEADER</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">SysClientConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token class-name">SysClientConfigUtils</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">OAS_30</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>systemConfig<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//加了ApiOperation注解的类，才生成接口文档</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ApiOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">globalRequestParameters</span><span class="token punctuation">(</span>pars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token class-name">SystemConfig</span> systemConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//大标题</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"zh-boot 接口平台"</span><span class="token punctuation">)</span>                <span class="token comment">//描述</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"zh-boot 接口平台"</span><span class="token punctuation">)</span>                <span class="token comment">//版本号</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>systemConfig<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream</title>
      <link href="/stream/"/>
      <url>/stream/</url>
      
        <content type="html"><![CDATA[<p>热门实例: <a href="https://www.w3cschool.cn/java/codetag-stream-lambda.html">https://www.w3cschool.cn/java/codetag-stream-lambda.html</a></p><h2 id="问题验证">问题验证</h2><h3 id="两个并行流之间的执行顺序">两个并行流之间的执行顺序</h3><p>如果一段程序中有两个并行流, 会执行完第一个并行流, 再去执行第二个并行流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStream</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 测试多个并行流的执行顺序</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token comment">//转换成并行流</span>                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AAAAAAAAAAAAA: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================== new Stream ========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token comment">//转换成并行流</span>                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BBBBBBBBBBBB: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stream按照指定尺寸分割集合">Stream按照指定尺寸分割集合</h3><ul><li>应用案例: oracle <code>IN</code> 查询 每次查询大小不能大于1000</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>qw <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> fieldValueList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">MAX_IN_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">-&gt;</span> index <span class="token operator">+</span> <span class="token constant">MAX_IN_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span>        qw<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>subQw <span class="token operator">-&gt;</span> subQw<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>sqlName<span class="token punctuation">,</span> fieldValueList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token constant">MAX_IN_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/redis/"/>
      <url>/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-五种数据结构">Redis 五种数据结构</h2><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>Sorted Set</li></ul><h2 id="Redis-国内镜像源">Redis 国内镜像源</h2><p><a href="https://mirrors.huaweicloud.com/redis/">https://mirrors.huaweicloud.com/redis/</a></p><h2 id="安装部署">安装部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 更新系统</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span><span class="token comment">## Ubuntu 上安装 Redis</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> redis-server<span class="token comment">## 查看redis版本</span>redis-cli <span class="token parameter variable">--version</span><span class="token comment">## 查看redis运行状态</span>systemctl status redis<span class="token comment">## 命令连接redis</span>redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> <span class="token number">123456</span><span class="token comment">## 设置redis密码(重启后需要重置密码)</span>config <span class="token builtin class-name">set</span> requirepass <span class="token number">123456</span> <span class="token comment"># redis-cli 进入服务器后处理</span><span class="token comment">## 卸载redis</span><span class="token function">sudo</span> <span class="token function">apt-get</span> purge --auto-remove redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://blog.51cto.com/u_16213452/12150139">Ubuntu安装特定版本Redis</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Ubuntu 上安装特定版本的 Redis</span><span class="token function">wget</span> https://mirrors.huaweicloud.com/redis/redis-7.4.1.tar.gz<span class="token comment">## 解压缩</span><span class="token function">tar</span> xzf redis-7.4.1.tar.gz<span class="token builtin class-name">cd</span> redis-7.4.1<span class="token comment">## 编译</span><span class="token function">make</span><span class="token comment">## 编译完成后，使用运行测试，确保redis正常工作</span><span class="token function">make</span> <span class="token builtin class-name">test</span><span class="token comment">## 测试通过可以正常安装Redis</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装过程中发现权限不足, 使用 make clean 之后重新安装</span><span class="token comment">## 配置Redis; 默认配置信息`/etc/redis/redis.conf`</span><span class="token function">mkdir</span> /etc/redis <span class="token function">cp</span> redis.conf /etc/redis <span class="token function">vim</span> /etc/redis/redis.config <span class="token comment"># 配置服务: supervised systemd 配置密码: requirepass bjqqmzpWXNOECN!@#</span><span class="token comment">## 使redis能够作为服务运行</span><span class="token function">vim</span> /etc/systemd/system/redis.service <span class="token comment"># 粘贴后文文件内容</span><span class="token comment">## 启动redis服务并设置开机自启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>redis.service</li></ul><pre class="line-numbers language-config" data-language="config"><code class="language-config">[Unit]Description=Redis In-Memory Data StoreAfter=network.target[Service]ExecStart=/usr/local/bin/redis-server /etc/redis/redis.confExecStop=/usr/local/bin/redis-cli shutdownUser=redisdGroup=redisRestart=always[Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JAVA实战-Spring">JAVA实战 - Spring</h2><h3 id="redis-单机与集群连接、功能测试注入">redis 单机与集群连接、功能测试注入</h3><h3 id="redis-实现多项目数据软隔离">redis 实现多项目数据软隔离</h3><h3 id="redisTemplate-常用方法">redisTemplate 常用方法</h3><ul><li>数据自增</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span><span class="token punctuation">,</span> mode <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> sender<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>pipeline</code>让数据批量自增</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// pipeline 命令拼接，数据量可以少一点</span>redisTemplate<span class="token punctuation">.</span><span class="token function">executePipelined</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> connection <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历需要批量处理的数据</span>    receives<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token operator">::</span><span class="token function">isNotBlank</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>receive <span class="token operator">-&gt;</span>            <span class="token comment">// rawKey &amp; rawHashKey 利用 redisTemplate.getKeySerializer() &amp; redisTemplate.getHashKeySerializer() 获得</span>            connection<span class="token punctuation">.</span><span class="token function">hIncrBy</span><span class="token punctuation">(</span>cacheRefreshUtils<span class="token punctuation">.</span><span class="token function">rawKey</span><span class="token punctuation">(</span><span class="token function">key</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheRefreshUtils<span class="token punctuation">.</span><span class="token function">rawHashKey</span><span class="token punctuation">(</span>mode <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> sender<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 必须返回null, 不返回null将抛出异常</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 06-Frameworks-and-Components </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s</title>
      <link href="/k8s/"/>
      <url>/k8s/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<p>官网: <a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a><br>菜鸟教程: <a href="https://www.runoob.com/docker/docker-architecture.html">https://www.runoob.com/docker/docker-architecture.html</a></p><h2 id="常用命令">常用命令</h2><h3 id="查看启动的任务">查看启动的任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看所有任务">查看所有任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动-停止任务">启动/停止任务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token variable">$contaniner</span>-id<span class="token function">docker</span> stop <span class="token variable">$contaniner</span>-id <span class="token comment"># 通过容器ID停止</span><span class="token function">docker</span> stop <span class="token variable">$contaniner</span>-name   <span class="token comment"># 通过名称停止</span><span class="token function">docker</span> start <span class="token variable">$contaniner</span>-id <span class="token comment"># 重启容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他常用命令">其他常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">-v</span> <span class="token comment"># 查看当前版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Windows10-安装-Docker-的详细教程">Windows10 安装 Docker 的详细教程</h2><ul><li><a href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe?utm_source=docker">官方下线地址</a></li></ul><h2 id="CentOS-安装-Docker">CentOS 安装 Docker</h2><h3 id="查看当前系统内核">查看当前系统内核</h3><p><strong>重要提示: docker内核版本必须是3.10+以上版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span> <span class="token comment"># 3.10.0-957.el7.x86_64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用yum安装docker">使用yum安装docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载老版本docker及其相关依赖</span>yum remove <span class="token function">docker</span> docker-common container-selinux docker-selinux docker-engine<span class="token comment"># 更新yum</span>yum update <span class="token comment"># 更新过程中有下载错误的依赖, 先按照提示忽略掉</span><span class="token comment"># 安装 yum-utils，它提供了 yum-config-manager，可用来管理yum源</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token comment"># yum安装软件报错 `Configuration: OptionBinding with id “failovermethod” does not exist`</span><span class="token comment"># vi CentOS-Epel.repo</span><span class="token comment"># 备份文件报错 `Removing leading `/' from member names`</span><span class="token comment"># tar zcPf /home/yum.repos.d.tar.gz /etc/yum.repos.d/</span><span class="token comment"># 查看已安装软件版本</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> yum-utils<span class="token comment"># 设置yum源</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 更新索引</span>yum makecache fast<span class="token comment"># 安装 docker-ce</span>yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token comment"># 安装</span><span class="token comment"># 启动Docker服务并设置开机自启</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 验证安装</span><span class="token function">docker</span> run hello-world<span class="token comment"># 重启docker</span>systemctl restart <span class="token function">docker</span><span class="token comment"># 查看所有服务</span>Docker stats <span class="token parameter variable">-a</span> <span class="token comment"># --no-stream 展示当前状态就直接退出了，不再实时更新</span><span class="token comment"># 查看所有容器</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 查看所有容器 包括已停止的</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment"># 删除容器</span><span class="token function">docker</span> <span class="token function">rm</span> f66<span class="token comment"># 查看所有镜像</span><span class="token function">docker</span> images<span class="token comment"># 进入容器控制台</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>容器名称或ID<span class="token operator">&gt;</span> /bin/bash<span class="token comment"># 退出容器控制台</span><span class="token builtin class-name">exit</span><span class="token comment">## 进入postgresql</span>psql <span class="token parameter variable">-U</span> <span class="token operator">&lt;</span>数据库用户名<span class="token operator">&gt;</span> <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">&gt;</span><span class="token comment"># 如果镜像使用默认配置（如官方镜像）：</span>psql <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> postgres<span class="token comment"># 网易：http://hub-mirror.c.163.com</span><span class="token comment"># 中科大镜像地址：http://mirrors.ustc.edu.cn/</span><span class="token comment"># 中科大github地址：https://github.com/ustclug/mirrorrequest</span><span class="token comment"># Azure中国镜像地址：http://mirror.azure.cn/</span><span class="token comment"># Azure中国github地址：https://github.com/Azure/container-service-for-azure-china</span><span class="token comment"># DockerHub镜像仓库: https://hub.docker.com/ </span><span class="token comment"># 阿里云镜像仓库： https://cr.console.aliyun.com </span><span class="token comment"># google镜像仓库： https://console.cloud.google.com/gcr/images/google-containers/GLOBAL （如果你本地可以翻墙的话是可以连上去的 ）</span><span class="token comment"># coreos镜像仓库： https://quay.io/repository/ </span><span class="token comment"># RedHat镜像仓库： https://access.redhat.com/containers</span><span class="token comment"># 创建或修改Docker配置文件</span><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'{  "registry-mirrors": ["http://mirrors.ustc.edu.cn/"]}EOF</span><span class="token comment"># 重启 docker 服务</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span class="token comment"># 查看镜像源</span><span class="token function">docker</span> info <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Registry Mirrors"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常问题处理">异常问题处理</h3><h4 id="Docker-安装错误-repodata-repomd-xml-Errno-14-HTTPS-Error-404-Not-Found-Trying-other-mirror">Docker 安装错误 repodata/repomd.xml: [Errno 14] HTTPS Error 404 - Not Found Trying other mirror.</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改文件中的下载地址</li></ul><pre class="line-numbers language-repo" data-language="repo"><code class="language-repo">[docker-ce-stable]name=Docker CE Stable - $basearch# baseurl=https://download.docker.com/linux/centos/$releasever/$basearch/stablebaseurl=https://download.docker.com/linux/centos/7/$basearch/stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改完成后重新安装</li></ul><h4 id="误删除基础仓库">误删除基础仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考链接">参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/441965046">Windows10 Docker安装详细教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EJS</title>
      <link href="/ejs/"/>
      <url>/ejs/</url>
      
        <content type="html"><![CDATA[<p>官网 ☞ <a href="https://ejs.bootcss.com/#docs">https://ejs.bootcss.com/#docs</a></p><h2 id="实例">实例</h2><pre class="line-numbers language-none"><code class="language-none">&lt;% if (user) { %&gt;  &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt;&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="用法">用法</h2><pre class="line-numbers language-none"><code class="language-none">let template = ejs.compile(str, options);template(data);// =&gt; 输出渲染后的 HTML 字符串ejs.render(str, data, options);// =&gt; 输出渲染后的 HTML 字符串ejs.renderFile(filename, data, options, function(err, str){    // str =&gt; 输出渲染后的 HTML 字符串});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数">参数</h2><ul><li><code>cache</code> 缓存编译后的函数，需要指定 <code>filename</code></li><li><code>filename</code> 被 <code>cache</code> 参数用做键值，同时也用于 include 语句</li><li><code>context</code> 函数执行时的上下文环境</li><li><code>compileDebug</code> 当值为 <code>false</code> 时不编译调试语句</li><li><code>client</code> 返回独立的编译后的函数</li><li><code>delimiter</code> 放在角括号中的字符，用于标记标签的开与闭</li><li><code>debug</code> 将生成的函数体输出</li><li><code>_with</code> 是否使用 <code>with() {}</code> 结构。如果值为 <code>false</code>，所有局部数据将存储在 <code>locals</code> 对象上。</li><li><code>localsName</code> 如果不使用 <code>with</code> ，localsName 将作为存储局部变量的对象的名称。默认名称是 <code>locals</code></li><li><code>rmWhitespace</code> 删除所有可安全删除的空白字符，包括开始与结尾处的空格。对于所有标签来说，它提供了一个更安全版本的 <code>-%&gt;</code> 标签（在一行的中间并不会剔除标签后面的换行符)。</li><li><code>escape</code> 为 <code>&lt;%=</code> 结构设置对应的转义（escape）函数。它被用于输出结果以及在生成的客户端函数中通过 <code>.toString()</code> 输出。(默认转义 XML)。</li><li><code>outputFunctionName</code> 设置为代表函数名的字符串（例如 <code>'echo'</code> 或 <code>'print'</code>）时，将输出脚本标签之间应该输出的内容。</li><li><code>async</code> 当值为 <code>true</code> 时，EJS 将使用异步函数进行渲染。（依赖于 JS 运行环境对 async/await 是否支持）</li></ul><h2 id="标签含义">标签含义</h2><ul><li><code>&lt;%</code> ‘脚本’ 标签，用于流程控制，无输出。</li><li><code>&lt;%_</code> 删除其前面的空格符</li><li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li><li><code>&lt;%-</code> 输出非转义的数据到模板</li><li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li><li><code>&lt;%%</code> 输出字符串 ‘&lt;%’</li><li><code>%&gt;</code> 一般结束标签</li><li><code>-%&gt;</code> 删除紧随其后的换行符</li><li><code>_%&gt;</code> 将结束标签后面的空格符删除</li></ul><h2 id="包含（include）">包含（include）</h2><p>通过 <code>include</code> 指令将相对于模板路径中的模板片段包含进来。(需要提供 ‘filename’ 参数。) 例如，如果存在 “./views/users.ejs” 和 “./views/user/show.ejs”<br>两个模板文件，你可以通过 <code>&lt;%- include('user/show'); %&gt;</code> 代码包含后者。</p><p>你可能需要能够输出原始内容的标签 (<code>&lt;%-</code>) 用于 include 指令，避免对输出的 HTML 代码做转义处理。</p><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;  &lt;% users.forEach(function(user){ %&gt;    &lt;%- include('user/show', {user: user}); %&gt;  &lt;% }); %&gt;&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义分隔符">自定义分隔符</h2><p>可针对单个模板或全局使用自定义分隔符：</p><pre class="line-numbers language-none"><code class="language-none">let ejs = require('ejs'),    users = ['geddy', 'neil', 'alex'];// 单个模板文件ejs.render('&lt;?= users.join(" | "); ?&gt;', {users: users},    {delimiter: '?'});// =&gt; 'geddy | neil | alex'// 全局ejs.delimiter = '$';ejs.render('&lt;$= users.join(" | "); $&gt;', {users: users});// =&gt; 'geddy | neil | alex'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存">缓存</h2><p>EJS 附带了一个基本的进程内缓存，用于缓在渲染模板过程中所生成的临时 JavaScript 函数。 通过 Node 的 <code>lru-cache</code> 库可以很容易地加入 LRU 缓存：</p><pre class="line-numbers language-none"><code class="language-none">let ejs = require('ejs'),    LRU = require('lru-cache');ejs.cache = LRU(100); // 具有 100 条内容限制的 LRU 缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要清除 EJS 缓存，调用 <code>ejs.clearCache</code> 即可。如果你正在使用的是 LRU 缓存并且需要设置不同的限额，则只需要将 <code>ejs.cache</code> 重置为 一个新的 LRU 实例即可。</p><h2 id="自定义文件加载器">自定义文件加载器</h2><p>默认的文件加载器是 <code>fs.readFileSync</code>，如果你想要的自定义它, 设置<code>ejs.fileLoader</code> 即可。</p><pre class="line-numbers language-none"><code class="language-none">let ejs = require('ejs');let myFileLoader = function (filePath) {  return 'myFileLoader: ' + fs.readFileSync(filePath);};ejs.fileLoader = myFileLoad;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用此功能，您可以在读取模板之前对其进行预处理。</p><h2 id="布局（Layouts）">布局（Layouts）</h2><p>EJS 并未对块（blocks）提供专门的支持，但是可以通过 包含页眉和页脚来实现布局，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">&lt;%- include('header'); -%&gt;&lt;h1&gt;  Title&lt;/h1&gt;&lt;p&gt;  My page&lt;/p&gt;&lt;%- include('footer'); -%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端支持">客户端支持</h2><p>从<a href="https://github.com/mde/ejs/releases/latest">latest release</a> 链接下载 <code>./ejs.js</code> 或 <code>./ejs.min.js</code> 文件。或者，你可以 clone 这个仓库并<br>通过执行 <code>jake build</code> 自己编译（或者执行 <code>$(npm bin)/jake build</code>，如果 jake 不是安装在全局环境的话）。</p><p>在页面中包含上面的任意一个文件，然后 <code>ejs</code> 就全局可用了</p><h3 id="示例">示例</h3><pre class="line-numbers language-none"><code class="language-none">&lt;div id="output"&gt;&lt;/div&gt;&lt;script src="ejs.min.js"&gt;&lt;/script&gt;&lt;script&gt;  let people = ['geddy', 'neil', 'alex'],      html = ejs.render('&lt;%= people.join(", "); %&gt;', {people: people});  // With jQuery:  $('#output').html(html);  // Vanilla JS:  document.getElementById('output').innerHTML = html;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项">注意事项</h3><p>大多数情况下，EJS 将会按照我们的预期运行; 但是, 仍然需要注意：</p><ol><li>显然, 如果你没有文件系统的访问权限, <code>ejs.renderFile</code> 将无法正常工作。</li><li>相同的原因, 除非为 include 设置一个回调函数，否则 include 无法正常工作。如下所示：</li></ol><pre class="line-numbers language-none"><code class="language-none">let str = "Hello &lt;%= include('file', {person: 'John'}); %&gt;",      fn = ejs.compile(str, {client: true});fn(data, null, function(path, d){ // include callback  // path -&gt; 'file'  // d -&gt; {person: 'John'}  // Put your code here  // Return the contents of file as a string}); // returns rendered string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IDEA-提供-EJS-代码高亮插件">IDEA 提供 EJS 代码高亮插件</h2>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-Template </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板引擎 </tag>
            
            <tag> EJS </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Active Directory (AD域)</title>
      <link href="/active-directory-ad-yu/"/>
      <url>/active-directory-ad-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="LADP">LADP</h2><ol><li><p>Lightweight Directory Access Protocol; 基于目录服务的轻量目录访问协议</p></li><li><p>目录中的信息按照树型结构进行组织</p></li><li><p>Distinguished Name (DN)</p><p>DN是用来引用条目的，DN相当于关系数据库表中的关键字（Primary Key）</p><p>属性（Attribute）由类型（Type）和一个或多个值（Values）组成，相当于关系数据库中的字段（Field）由字段名和数据类型组成，只是为了方便检索的需要，LDAP中的Type可以有多个Value</p></li></ol><p>Windows AD(Active Directory)域应该是LDAP的一个应用实例，而不应该是LDAP本身。Windows AD域的用户、权限管理应该是微软公司使用LDAP存储了一些数据来解决域控这个具体问题，AD域提供了相关的用户接口，我们可以把AD域当做微软定制的LDAP服务器。Active Directory先实现一个LDAP服务器，然后自己先用这个LDAP服务器实现了自己的一个具体应用。</p><h2 id="搭建AD域服务器">搭建AD域服务器</h2><p><a href="https://docs.microsoft.com/zh-cn/windows-server/identity/ad-ds/deploy/ad-ds-deployment">AD部署官方文档</a><br><a href="https://www.cnblogs.com/BugBrother/p/6760504.html">C#实现AD域验证登录</a></p><h3 id="配置虚拟机服务ip">配置虚拟机服务ip</h3><p>如果你的域控制器在虚拟机上，需要设置你的虚拟机网络连接方式为桥接模式，虚拟机处于无网状态，外部无法访问。</p><ul><li>第一步：添加角色功能=&gt;安装’Active Directory域服务’</li><li>第二步：配置服务器的ip地址</li><li>第三步：开始配置域服务<ul><li>服务器域名192.168.6.128</li><li>根域名: <a href="http://adserver.cn">adserver.cn</a></li><li>目录服务还原模式(DSRM)密码:  zhboot@123456</li><li>NetBIOS名称: ADSERVER</li></ul></li></ul><h3 id="异常排插与解决">异常排插与解决</h3><blockquote><p>:error: 域控制器升级的先决条件验证失败。</p></blockquote><ul><li>Active Directory 域服务所需的 TCP 端口已在该计算机上使用。你必须删除或重新配置当前使用这些端口(88、389、636、3268、3269)的服务。</li><li>重新安装虚拟机及服务</li></ul><h2 id="spring-boot-访问AD域">spring boot 访问AD域</h2><p>pom依赖</p><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-data-ldap&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>yml配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">ldap</span><span class="token punctuation">:</span>    <span class="token comment"># 389 (该端口有可能报错 Unprocessed Continuation Reference(s))</span>    <span class="token key atrule">urls</span><span class="token punctuation">:</span> ldap<span class="token punctuation">:</span>//192.168.6.128<span class="token punctuation">:</span><span class="token number">3268</span>    <span class="token key atrule">base</span><span class="token punctuation">:</span> dc=adserver<span class="token punctuation">,</span>dc=cn    <span class="token comment"># 下面为默认连接用户不配置将会报错 In order to perform this operation a successful bind must be completed on the connection.</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> administrator@adserver.cn    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AD域用户实体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entry</span><span class="token punctuation">(</span>objectClasses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LdapUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">Name</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DnAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uid<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Attribute</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cn"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> commonName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Attribute</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sn"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> suerName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userPassword<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>repository</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NibeiLdapUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">LdapRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LdapUser</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用户登录名密码校验</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 校验AD用户是否正确 UserPrincipalName:[登录名@域名] sAMAccountName:[登录名]</span><span class="token class-name">String</span> userPrincipalNameKey <span class="token operator">=</span> <span class="token string">"UserPrincipalName"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ldapTemplate<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EqualsFilter</span><span class="token punctuation">(</span>userPrincipalNameKey<span class="token punctuation">,</span> ldapUserLogin<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ldapUserLogin<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果用户校验错误, 则抛出异常</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"AD用户校验失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考连接">参考连接</h2><ul><li>服务搭建与服务集成</li></ul><p><a href="https://blog.csdn.net/HD243608836/article/details/120068640">Spring Boot中使用LDAP来统一管理用户信息</a></p><p><a href="https://blog.csdn.net/jianxia801/article/details/88883874">SpringBoot集成 Windows2012 AD 认证服务</a></p><ul><li>异常处理</li></ul><blockquote><h1>[LDAP: error code 49 - 80090308: LdapErr: DSID-0C0903C5, comment: AcceptSecurityContext error, data 52e, v2580</h1></blockquote><ul><li>When using the port 389 in the URL, change it to 3268.</li><li>When using the port 636 in the URL (when connecting via SSL), change it to 3269.</li></ul><p>More information about why it works this way can be found either in the <a href="https://social.technet.microsoft.com/Forums/en-US/e52b9154-b93a-4a3b-b6f2-0285f932da14/389-and-3268-port-difference?forum=winserverDS">Microsoft Active Directory forums</a> or on <a href="https://stackoverflow.com/questions/16412236/how-to-resolve-javax-naming-partialresultexception">Stack Overflow</a>.</p><blockquote><p>[LDAP: error code 1 - 000004DC: LdapErr: DSID-0C090728, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v2580</p></blockquote><ul><li>针对 ldapTemplate 必须有个可用的用户才行(本身用这个工具去验证用户的正确性; 故还应当找别的方法去处理)</li><li>在实际生产过程中, 管理员密码不被交出且密码定时过期, 应当优化为重新注入配置bean连接AD域<ul><li><a href="https://blog.csdn.net/weixin_34124577/article/details/92443749">Spring Boot 2.0 项目实现自同步AD域账号</a></li><li><a href="https://blog.csdn.net/garyond/article/details/80224221">Spring Boot集成AD域实现统一用户认证</a></li></ul></li></ul><h2 id="附录">附录</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zngd<span class="token punctuation">.</span>welding<span class="token punctuation">.</span>autowelding<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Context</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>directory<span class="token punctuation">.</span></span><span class="token class-name">DirContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>directory<span class="token punctuation">.</span></span><span class="token class-name">InitialDirContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span><span class="token class-name">String</span> post<span class="token punctuation">,</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DirContext</span> ctx<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">HashEnv</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">SECURITY_AUTHENTICATION</span><span class="token punctuation">,</span> <span class="token string">"simple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LDAP访问安全级别(none,simple,strong)</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">SECURITY_PRINCIPAL</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//AD的用户名</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">SECURITY_CREDENTIALS</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//AD的密码</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INITIAL_CONTEXT_FACTORY</span><span class="token punctuation">,</span><span class="token string">"com.sun.jndi.ldap.LdapCtxFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LDAP工厂类</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.ldap.connect.timeout"</span><span class="token punctuation">,</span> <span class="token string">"3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接超时设置为3秒</span>        <span class="token class-name">HashEnv</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_URL</span><span class="token punctuation">,</span> <span class="token string">"ldap://"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> post<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认端口389</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialDirContext</span><span class="token punctuation">(</span><span class="token class-name">HashEnv</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化上下文</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身份验证成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身份验证失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span>CommunicationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AD域连接失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身份验证未知异常!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>ctx<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ctx<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AdTest</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"172.17.1.1"</span><span class="token punctuation">,</span> <span class="token string">"389"</span><span class="token punctuation">,</span> <span class="token string">"liguowei@waopco.com"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Windows-Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> AD域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMwareWorkstations 虚拟机网络配置连接方式</title>
      <link href="/vmwareworkstations/"/>
      <url>/vmwareworkstations/</url>
      
        <content type="html"><![CDATA[<h2 id="桥接模式">桥接模式</h2><p>a. 直接把虚拟机的网卡接到物理网络(不建议)</p><pre class="line-numbers language-none"><code class="language-none">这种方法是虚拟机的网卡直接与物理机网卡进行通信。对于Windows的虚拟机而言可能非常方便，不用考虑太多，用在Linux虚拟机中同样也行，但是不建议采用这种方法，不利于维护，有时候虚拟机可能无法连接到互联网。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>b. 建议通过虚拟网络进行桥接；打开虚拟网络编辑器(菜单 “编辑” - “虚拟网络编辑器”)</p><p>该种方式相当于在虚拟机网卡与物理机物理网卡直接加一个虚拟网络VMnet0，<br>VMnet0可以选择桥接的网卡是有线网卡还是无线网卡，或者是自动选择。</p><p>比如物理机是通过无线网卡上网的，此时VMnet0选择了有线网卡，肯定就不能实现联网。<br>个人经验是选择“自动”，让VMnet0自动选择能够上网的网卡。<br>“桥接”是虚拟机的网卡直接把数据包交给物理机的物理网卡进行处理，虽然可以直接与外界进行通信，<br>但是虚拟机必须有自己的IP地址、DNS、网关等信息。此时，物理机和虚拟机的地位是一样的。</p><p>举个例子：物理机是房东、虚拟机是房客、物理机的网卡是大门，房东和房客都能通过大门，但是各自都有钥匙，互不影响，只是大门的所有者是房东而已。</p><p>可采用桥接的情景：物理机所处的网络中有DHCP服务，能够自动为网络内的主机分配IP地址。<br>不适合的情景：校园网，可能内部虚拟机无法联网；物理机拨号上网。</p><p>注1: DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）</p><h2 id="NAT模式-Network-Address-Translation-网络地址转换">NAT模式 (Network Address Translation) 网络地址转换</h2><p>相当于说在虚拟机与物理机直接添加一个交换机，相当于拥有NAT地址转换功能，能够自动把虚拟机的IP转换为与物理机在同一网段的IP。<br>比如虚拟机网卡连接到物理机上的虚拟网卡VMnet8，当VMnet8收到虚拟机的数据包时，会把数据包转发给物理机的物理网卡。<br>相当于物理网卡不直接接触虚拟机的数据包，而是接触VMnet8进行处理。实际上VMnet8是NAT模式，自带DHCP功能，能够给虚拟机分配IP地址。</p><p>能够实现虚拟机与物理机之间相互通信、虚拟机到外面的网络通信，但是外面的网络不能到虚拟机通信。</p><h2 id="仅主机模式-host-only">仅主机模式 (host-only)</h2><p>该模式是内部虚拟机连接到一个可提供DHCP功能的虚拟网卡VMnet1上去，VMnet1相当于一个交换机，<br>将虚拟机发来的数据包转发给物理网卡，但是物理网卡不会将该数据包向外转发。<br>所以仅主机模式只能用于虚拟机与虚拟机之间、虚拟机与物理机之间的通信。</p><h2 id="名词解释">名词解释</h2><h3 id="LAN区段">LAN区段</h3><p>LAN区段相当于说模拟出一个交换机或者集线器出来，把不同虚拟机连接起来，<br>与物理机不进行数据交流，与外网也不进行数据交流，构建一个独立的网络。<br>没有DHCP功能，需要手工配置IP或者单独配置DHCP服务器。</p><h3 id="配置静态IP">配置静态IP</h3><p>当前应用场景: 不需要外网能访问虚机，主机能访问虚机即可，故使用NET模式便可, 由虚机的交换机上配置IP</p><h4 id="操作示例">操作示例</h4><ul><li><a href="https://www.cnblogs.com/chengssblog/p/6531964.html">Vmware虚拟机设置静态IP地址</a></li><li><a href="https://blog.csdn.net/oyxyfd/article/details/106060302">VMware虚拟机Windows sever2016配置静态IP</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Virtual-Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/linux/"/>
      <url>/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令">常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span> <span class="token comment"># 查看当前路径</span><span class="token function">history</span> <span class="token comment"># 搜索服务器上历史命令</span><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token comment"># 搜索包含tomcat历史命令</span><span class="token comment"># ? 如何查询某一个历史命令附近的命令?</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /data/nodejs/node-v16.13.2-linux-x64/bin/yarn /usr/sbin/yarn <span class="token comment"># 全局命令</span><span class="token function">vim</span> /etc/profile <span class="token comment"># 修改系统环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将上一条命令的结果作为下一条命令的参数">将上一条命令的结果作为下一条命令的参数</h2><p>test文件夹示例</p><h3 id="xargs">xargs</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>.txt<span class="token function">ls</span> <span class="token comment"># test10.txt test1.txt test2.txt test3.txt test4.txt test5.txt test6.txt test7.txt test8.txt test9.txt</span><span class="token function">ls</span> <span class="token punctuation">..</span>/test/<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> test3 <span class="token comment">#查找不包含test3的文件</span><span class="token function">ls</span> <span class="token punctuation">..</span>/test/<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> test3<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token comment"># 删除不包含test3的文件</span><span class="token function">ls</span> <span class="token comment"># test3.txt </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用反引号">使用反引号</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>.txt<span class="token function">ls</span> <span class="token comment"># test10.txt test1.txt test2.txt test3.txt test4.txt test5.txt test6.txt test7.txt test8.txt test9.txt</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token punctuation">..</span>/test/<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> test2<span class="token variable">`</span></span> <span class="token comment"># 将反引号内的结果作为下一条命令的参数</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> access_log.2022<span class="token variable">`</span></span> <span class="token comment"># 删除文件名匹配； grep -e 表示可以是正则匹配</span><span class="token function">ls</span> <span class="token comment"># test2.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用find-exec命令">使用find exec命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>.txt<span class="token function">ls</span> <span class="token comment"># test10.txt test1.txt test2.txt test3.txt test4.txt test5.txt test6.txt test7.txt test8.txt test9.txt</span><span class="token function">find</span> <span class="token punctuation">..</span>/test/ <span class="token parameter variable">-name</span> test2.txt <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token comment">#这里的{}和\;是成对使用的。#将find的查找结果作为参数</span><span class="token comment"># test10.txt  test1.txt  test3.txt  test4.txt  test5.txt  test6.txt  test7.txt  test8.txt  test9.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用">使用$( )</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>.txt<span class="token function">ls</span> <span class="token comment"># test10.txt test1.txt test2.txt test3.txt test4.txt test5.txt test6.txt test7.txt test8.txt test9.txt</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> <span class="token punctuation">..</span>/test<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> test2<span class="token variable">)</span></span> <span class="token comment"># 将$( )的执行结果作为rm -rf 的参数</span><span class="token function">ls</span> <span class="token comment"># test2.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件操作">文件操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token variable">$name</span> <span class="token comment"># 搜索匹配的文件名</span><span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token variable">$source</span> <span class="token variable">$direct</span> <span class="token comment"># 复制文件</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span>path<span class="token punctuation">}</span> <span class="token comment"># 强制删除文件夹及文件</span><span class="token function">mv</span> A B   <span class="token comment"># 将目录A重命名为B</span><span class="token function">mv</span> /a /b/c <span class="token comment"># 将/a目录移动到/b下，并重命名为c</span><span class="token function">mv</span> abc <span class="token number">123</span> <span class="token comment"># 将一个名为abc的文件重命名为123，如果当前目录下也有个123的文件的话，这个文件是会将它覆盖的。</span><span class="token function">chmod</span> <span class="token number">777</span> <span class="token variable">$file</span> <span class="token comment"># 权限不足</span><span class="token function">chmod</span> <span class="token parameter variable">-Rf</span> <span class="token number">777</span> <span class="token variable">$floder</span> <span class="token comment"># 权限不足</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件信息">文件信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">stat</span> install.log <span class="token comment"># 查看文件信息</span><span class="token function">ls</span> install.log <span class="token comment"># 查看文件信息</span><span class="token comment"># 修改文件信息</span><span class="token function">touch</span> <span class="token comment"># -a : 仅修改access time。</span><span class="token comment"># -c : 仅修改时间，而不建立文件。</span><span class="token comment"># -d : 后面可以接日期，也可以使用 –date=”日期或时间”</span><span class="token comment"># -m : 仅修改mtime。</span><span class="token comment"># -t : 后面可以接时间，格式为 [YYMMDDhhmm]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件安装">软件安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whereis</span> nginx <span class="token comment"># 查看软件安装路径</span><span class="token function">which</span> nginx <span class="token comment"># 查看运行文件所在路径</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> tomcat <span class="token comment"># 查看运行进程</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">head</span> -1<span class="token punctuation">;</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-rn</span> -k3<span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-10</span> <span class="token comment"># 查看cpu占用过高的进程</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> PID <span class="token comment"># 杀死运行进程</span><span class="token function">lsof</span> <span class="token parameter variable">-i:port</span> <span class="token comment"># 查看端口占用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开启-关闭防火墙">开启/关闭防火墙</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-ports <span class="token comment"># 列出所有防火墙端口</span>firewall-cmd --query-port<span class="token operator">=</span><span class="token number">9010</span>/tcp  <span class="token comment"># 查询端口防火墙状态</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">9010</span>/tcp <span class="token parameter variable">--permanent</span> <span class="token comment"># 增加防火墙端口</span>systemctl restart firewalld <span class="token comment"># 重启防火墙</span>firewall-cmd --query-port<span class="token operator">=</span><span class="token number">9010</span>/tcpfirewall-cmd --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器性能">服务器性能</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-h</span> <span class="token comment"># 内存; top htop 也可</span><span class="token function">cat</span> /proc/meminfo <span class="token operator">|</span> <span class="token function">grep</span> MemTotal <span class="token comment"># 内存总数</span><span class="token function">cat</span> /proc/cpuinfo <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"cpu cores"</span> <span class="token comment"># CPU核数</span><span class="token function">cat</span> /proc/cpuinfo <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"model name"</span><span class="token function">df</span> <span class="token parameter variable">-h</span> <span class="token comment"># 查询硬盘大小</span><span class="token function">du</span> <span class="token parameter variable">-h</span> --max-depth<span class="token operator">=</span><span class="token number">1</span> /data <span class="token comment"># 查看一级文件夹占用磁盘大小</span><span class="token function">uname</span> <span class="token parameter variable">-a</span> <span class="token comment"># 系统位数、内核版本</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> * <span class="token comment"># 目录或文件占用磁盘大小</span><span class="token function">sudo</span> <span class="token function">fdisk</span> <span class="token parameter variable">-l</span> <span class="token comment"># 数据盘大小</span><span class="token function">sudo</span> <span class="token function">parted</span> /dev/sda1 print <span class="token comment"># 查询硬盘大小</span><span class="token function">sudo</span> yum <span class="token function">install</span> nvidia-smi nvidia-smi <span class="token parameter variable">-L</span> <span class="token comment"># 查看显卡信息(部分云服务器是没有该参数么)</span><span class="token comment"># centerOS 查看gpu使用状态</span><span class="token function">sudo</span> yum <span class="token function">install</span> epel-release <span class="token comment"># 安装</span><span class="token function">sudo</span> yum <span class="token function">install</span> gpustat <span class="token comment"># 安装</span><span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> <span class="token parameter variable">--color</span> gpustat <span class="token parameter variable">--c</span> <span class="token comment"># 使用</span><span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">0.5</span> <span class="token parameter variable">-d</span> nvidia-smi <span class="token comment"># 实时刷新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存监控">内存监控</h2><h3 id="ps-查看进程及进程中线程当前CPU使用情况">ps 查看进程及进程中线程当前CPU使用情况</h3><h3 id="free-总体RAM利用率">free(总体RAM利用率)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-h</span> <span class="token comment"># 查看 Mem 及 Swap</span><span class="token function">free</span> <span class="token parameter variable">-s</span> <span class="token number">3</span> <span class="token comment"># 每隔3s执行一次free</span><span class="token function">free</span> <span class="token parameter variable">-c</span> <span class="token number">3</span> <span class="token comment"># 运行一定次数</span><span class="token function">free</span> <span class="token parameter variable">-h</span> <span class="token parameter variable">-s</span> <span class="token number">5</span> <span class="token parameter variable">-c</span> <span class="token number">20</span> <span class="token comment"># 每个5s输出一次, 共输出20次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="top-每个进程内存利用率">top(每个进程内存利用率)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token comment"># 查看每个进程内存占用率</span><span class="token function">top</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-p</span> <span class="token number">31357</span> <span class="token comment"># 显示指定进程下耗时最高的线程</span><span class="token builtin class-name">shift</span> + m <span class="token comment"># 按内存占用率排序</span>q <span class="token comment"># 退出top监控</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="htop-图形化显示RAM总体利用率">htop(图形化显示RAM总体利用率)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> <span class="token function">htop</span><span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="java调优过程">java调优过程</h3><ul><li><a href="https://dandelioncloud.cn/article/details/1439110455683014658/">https://dandelioncloud.cn/article/details/1439110455683014658/</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps <span class="token punctuation">[</span>-mlv<span class="token punctuation">]</span><span class="token comment"># 查询java进程 -q 只展示pid -m 输出main参数 -l 主类完整包名 -v jvm 参数</span>jstack <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token number">31357</span> <span class="token operator">&gt;</span> jstack.31357.log <span class="token comment"># 保存线程消耗最高的日志 -F 强制打印 -l 长列表  -m 混合模式</span>jmap <span class="token comment"># jvm使用情况 </span>jmap <span class="token parameter variable">-heap</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token comment"># 查看整个JVM内存状态,要注意的是在使用CMS GC 情况下，jmap -heap的执行有可能会导致JAVA 进程挂起 </span>jmap <span class="token parameter variable">-histo</span> <span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token comment"># 查看JVM堆中对象详细占用情况 </span>jmap <span class="token parameter variable">-histo:live</span> pid <span class="token comment"># 指定了live子选项，则只计算活动的对象 </span>jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>文件名 <span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token comment"># 导出整个JVM 中内存信息</span>jvisualvm.exe <span class="token comment"># java 自带的jvm监控工具</span>pmap <span class="token comment"># - report memory map of a process(查看进程的内存映像信息)pmap命令用于报告进程的内存映射关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他命令">其他命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token punctuation">[</span>-P <span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token comment"># 下载资源 [-P 指定下载路径]</span>ll<span class="token function">tail</span><span class="token function">rename</span><span class="token function">df</span> <span class="token parameter variable">-hl</span> <span class="token comment"># 查看磁盘大小</span><span class="token function">cat</span> /etc/redhat-release <span class="token comment"># 查看操作系统类型及版本</span><span class="token function">uname</span> <span class="token parameter variable">-m</span> <span class="token comment"># 查看操作系统架构</span><span class="token function">mkdir</span> <span class="token comment"># 新建文件夹</span><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> <span class="token punctuation">{</span>target<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">..</span>.source<span class="token punctuation">}</span> <span class="token comment"># 打包</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> <span class="token punctuation">{</span>source<span class="token punctuation">}</span> <span class="token parameter variable">-C</span> <span class="token punctuation">{</span>targetPath<span class="token punctuation">}</span> <span class="token comment"># 解压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tools">Tools</h2><h3 id="vim">vim</h3><ul><li>开始编辑</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> filename.suffixi <span class="token comment"># 进入编辑</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>退出编辑</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Esc:wq 保存并退出:q<span class="token operator">!</span> 不保存直接退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>搜索命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># 进入后直接搜索; 编辑模式需要Esc退出编辑再使用 /</span>/关键字 <span class="token comment"># 向下查找</span>?关键字 <span class="token comment"># 向上查找</span>/关键字<span class="token punctuation">\</span><span class="token operator">&gt;</span> <span class="token comment"># 匹配末尾</span>/<span class="token punctuation">\</span><span class="token operator">&lt;</span>关键字 <span class="token comment"># 匹配开头</span>/<span class="token punctuation">\</span><span class="token operator">&lt;</span>关键字<span class="token punctuation">\</span><span class="token operator">&gt;</span> <span class="token comment"># 匹配全部</span>:set ignorecase <span class="token comment"># 不区分大小写</span>:set noignorecase <span class="token comment"># 恢复大小写敏感</span>:set hlsearch <span class="token comment"># 高亮搜索</span>:set incsearch <span class="token comment"># 递进搜索; 每输入一个字符, 搜索一次</span>n <span class="token comment"># 移动当下一个匹配处</span><span class="token builtin class-name">shift</span> + n <span class="token comment"># 移动到上一个匹配处</span>* <span class="token comment"># 光标移动到关键字任意位置按键; 搜索选定的关键字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gg <span class="token comment"># 跳到第一行</span>10gg <span class="token comment"># 跳到最后一行</span><span class="token builtin class-name">shift</span> + g <span class="token comment"># 跳到最后一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="yum">yum</h3><p>该方法安装的软件版本无法控制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span> <span class="token parameter variable">-y</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">git</span><span class="token function">git</span> <span class="token parameter variable">--version</span><span class="token function">ls</span> /usr/libexec/git-core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="htop">htop</h3><h4 id="基础命令">基础命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">htop</span> <span class="token parameter variable">-h</span> <span class="token comment"># 获取命令帮助</span><span class="token function">htop</span> <span class="token parameter variable">-v</span> <span class="token comment"># 查看命令版本</span><span class="token function">htop</span> <span class="token parameter variable">-p</span> <span class="token number">4035</span> <span class="token comment"># 查看指定进程信息</span><span class="token function">htop</span> <span class="token parameter variable">-u</span> root <span class="token comment"># 查看指定用户信息</span><span class="token function">htop</span> <span class="token parameter variable">-d</span> <span class="token number">50</span> <span class="token comment"># 指定刷新间隔; 单位 0.1s</span><span class="token function">htop</span> <span class="token parameter variable">-s</span> M_SIZE <span class="token comment"># 指定列排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="信息关键字">信息关键字</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center">PID</td><td style="text-align:left">进程标志号，是非零正整数</td></tr><tr><td style="text-align:center">USER</td><td style="text-align:left">进程所有者的用户名</td></tr><tr><td style="text-align:center">PR</td><td style="text-align:left">进程的优先级别</td></tr><tr><td style="text-align:center">NI</td><td style="text-align:left">进程的优先级别数值</td></tr><tr><td style="text-align:center">VIRT</td><td style="text-align:left">进程占用的虚拟内存值</td></tr><tr><td style="text-align:center">RES</td><td style="text-align:left">进程占用的物理内存值</td></tr><tr><td style="text-align:center">SHR</td><td style="text-align:left">进程使用的共享内存值</td></tr><tr><td style="text-align:center">S</td><td style="text-align:left">进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数</td></tr><tr><td style="text-align:center">%CPU</td><td style="text-align:left">该进程占用的CPU使用率</td></tr><tr><td style="text-align:center">%MEM</td><td style="text-align:left">该进程占用的物理内存和总内存的百分比</td></tr><tr><td style="text-align:center">TIME+</td><td style="text-align:left">该进程启动后占用的总的CPU时间</td></tr><tr><td style="text-align:center">COMMAND</td><td style="text-align:left">进程启动的启动命令名称</td></tr></tbody></table><h4 id="快捷键">快捷键</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">F1</td><td style="text-align:left">获取功能键帮助</td></tr><tr><td style="text-align:center">F2</td><td style="text-align:left">显示设置</td></tr><tr><td style="text-align:center">F3</td><td style="text-align:left">搜索command内容</td></tr><tr><td style="text-align:center">F4</td><td style="text-align:left">过滤</td></tr><tr><td style="text-align:center">F5</td><td style="text-align:left">按照进程树展示，开启之后后面快捷键递进，即使用 F5 进行排序选择</td></tr><tr><td style="text-align:center">F6</td><td style="text-align:left">排序选择</td></tr><tr><td style="text-align:center">F7</td><td style="text-align:left">减小进程优先级</td></tr><tr><td style="text-align:center">F8</td><td style="text-align:left">增加进程优先级</td></tr><tr><td style="text-align:center">F9</td><td style="text-align:left">杀死进程, 可以使用上下键选择后回车杀死进程</td></tr><tr><td style="text-align:center">F10</td><td style="text-align:left">退出</td></tr></tbody></table><h4 id="参数说明">参数说明</h4><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">参数说明</th></tr></thead><tbody><tr><td style="text-align:left">-C --no-color</td><td style="text-align:left">使用单色配色方案</td></tr><tr><td style="text-align:left">-d --delay=DELAY</td><td style="text-align:left">设置刷新间隔时间，单位十分之一秒</td></tr><tr><td style="text-align:left">-h --help</td><td style="text-align:left">打印帮助信息</td></tr><tr><td style="text-align:left">-s --sort-key=COLUMN</td><td style="text-align:left">按照指定列排序选择</td></tr><tr><td style="text-align:left">-t --tree</td><td style="text-align:left">默认值，按照树结构视图显示</td></tr><tr><td style="text-align:left">-u --user=USERNAME</td><td style="text-align:left">只显示指定用户进程信息</td></tr><tr><td style="text-align:left">-p --pid=PID,[,PID,PID…]</td><td style="text-align:left">只显示指定pid进程信息</td></tr><tr><td style="text-align:left">-v --version</td><td style="text-align:left">打印命令版本</td></tr></tbody></table><h3 id="tar">tar</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-c</span> <span class="token comment"># 建立压缩档案</span><span class="token parameter variable">-x</span> <span class="token comment"># 解压</span><span class="token parameter variable">-t</span> <span class="token comment"># 查看内容</span><span class="token parameter variable">-r</span> <span class="token comment"># 向压缩归档文件末尾追加文件</span><span class="token parameter variable">-u</span> <span class="token comment"># 更新原压缩包中的文件</span><span class="token parameter variable">-z</span> <span class="token comment"># 有gzip属性的</span><span class="token parameter variable">-j</span> <span class="token comment"># 有bz2属性的</span><span class="token parameter variable">-Z</span> <span class="token comment"># 有compress属性的</span><span class="token parameter variable">-v</span> <span class="token comment"># 显示所有过程</span><span class="token parameter variable">-O</span> <span class="token comment"># 将文件解开到标准输出</span><span class="token parameter variable">-f</span> 使用档案名字,切记,这个参数是最后一个参数,后面只能接档案名--strip-components <span class="token number">1</span> <span class="token comment"># 解压至下一级目录，若为2则解压至下下级目录</span><span class="token parameter variable">--exclude</span> <span class="token comment"># 排除某个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 02-Operating-System </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA</title>
      <link href="/intellij-idea/"/>
      <url>/intellij-idea/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA无限试用">IDEA无限试用</h2><p>最新IDEA只有短期的有效试用时间, 且验证了用户邮箱; 可使用lzu后缀的学校邮箱 或 删除注册表重复试用试用</p><p><a href="https://www.jetbrains.com/idea/download/other.html">IDEA历史版本</a></p><p>直接下载地址 <a href="https://download.jetbrains.com/idea/ideaIU-2021.2.1.exe?_gl=1*161tx0f*_ga*ODYyMzc1MDUuMTU4NDE4MDU0MQ..*_ga_9J976DJZ68*MTY2NTgwOTY1NS4zLjAuMTY2NTgwOTY1Ni4wLjAuMA..&amp;_ga=2.180236583.2030136809.1665809656-86237505.1584180541">2021.2.1</a></p><h3 id="手动试用版">手动试用版</h3><p>删除文件及注册表</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">C:\Users\JUE\AppData\Roaming\JetBrains\IntelliJIdea2021.2\eval\*C:\Users\JUE\AppData\Roaming\JetBrains\IntelliJIdea2021.2\options\other.xmlHKEY_CURRENT_USER\Software\JavaSoft\Prefs\jetbrains\*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="插件试用">插件试用</h3><ol><li>导入第三方插件地址 <code>https://plugins.zhile.io</code></li><li>搜索 ide eval reset 安装</li><li>help --eval reset (可以打开启动自动更新无限试用时间)</li></ol><h3 id="其他方法-2024-1-4">其他方法: 2024.1.4</h3><p><a href="https://www.quanxiaoha.com/idea-pojie/idea-pojie-20241.html">https://www.quanxiaoha.com/idea-pojie/idea-pojie-20241.html</a><br><a href="https://www.cnblogs.com/gdutxiaoxu/p/17098362.html">https://www.cnblogs.com/gdutxiaoxu/p/17098362.html</a></p><h2 id="常用配置">常用配置</h2><h3 id="Git在信息栏中显示本地修改">Git在信息栏中显示本地修改</h3><p>File &gt; Settings &gt; Version Control &gt; Commit -&gt; Use non-modal commit interface</p><p>取消勾选上述选项</p><h3 id="版本管理本地修改在文件夹路径中体现">版本管理本地修改在文件夹路径中体现</h3><p>File &gt; Settings &gt; Version Control -&gt; Show directories with changed descendants</p><p>勾选上述选项</p><h3 id="根据文件类型调整生成的模板-eg-新建java文件时带上作者名">根据文件类型调整生成的模板(eg. 新建java文件时带上作者名)</h3><p>File &gt; Settings &gt; Editor &gt; File and Code Templates</p><h4 id="Markdown">Markdown</h4><p>File:</p><ul><li>Name: Markdown</li><li>Extension: md</li></ul><pre class="line-numbers language-none"><code class="language-none">---title: ${NAME}date: ${YEAR}-${MONTH}-${DAY} ${HOUR}:${MINUTE}:${SECOND}keywords: ${NAME}summary: ${NAME}tags:    - ${NAME}---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整java生成-getter-setter-代码模板">调整java生成 getter setter 代码模板</h3><p>File &gt; Setting &gt; Editor &gt; Code Style &gt; Java &gt; Code Generation</p><h4 id="customGetter">customGetter</h4><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>thymeleaftemplatesfragmentexpressions</span></div><code class="language-text">#if($field.modifierStatic)static ###end$field.type ##$field.name ##() {return $field.name;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="customSetter">customSetter</h4><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>thymeleaftemplatesfragmentexpressions</span></div><code class="language-text">#set($paramName = $helper.getParamName($field, $project))public ###if($field.modifierStatic)static void ###else    $classSignature ###end$field.name ($field.type $paramName) {#if ($field.name == $paramName)    #if (!$field.modifierStatic)    this.##    #else        $classname.##    #end#end$field.name = $paramName;#if(!$field.modifierStatic)return self();#end}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快捷键快速生成当前日期">快捷键快速生成当前日期</h3><p>File &gt; Settings &gt; Editor &gt; Live Template</p><img src="/intellij-idea/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE-%E5%A2%9E%E5%8A%A0%E6%A8%A1%E6%9D%BF.png" class="" title="增加模板"><img src="/intellij-idea/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE-%E7%BC%96%E8%BE%91%E5%8F%98%E9%87%8F.png" class="" title="编辑变量"><p>使用方法：内容里面直接输入<code>date</code>即可</p><img src="/intellij-idea/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E9%94%AE-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png" class="" title="使用方法"><h2 id="推荐插件">推荐插件</h2><blockquote><p>Setting Plugins</p></blockquote><h3 id="leetcode-editor">leetcode-editor</h3><p>利用编译器查看提交leetcode题目</p><h3 id="CodeGeeX">CodeGeeX</h3><p>编码提示插件</p><ul><li><code>TAB</code>使用推荐语法</li><li><code>Alt + [</code> 切换推荐</li></ul><h4 id="配置文件">配置文件</h4><pre class="line-numbers language-none"><code class="language-none">D:\code\basic-java\src\main\java\com\jue\java\learn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$!velocityTool.camelCaseName(${question.titleSlug})/$!velocityTool.camelCaseName(${question.titleSlug})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">${question.content}package com.jue.java.learn.leetcode.editor.cn.$!velocityTool.camelCaseName(${question.titleSlug});/** * @author JUE * @number ${question.frontendQuestionId} */public class $!velocityTool.camelCaseName(${question.titleSlug}) {    public static void main(String[] args) {        Solution solution = new Solution();    }}${question.code}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常解决">异常解决</h2><h3 id="项目maven构建成功但是启动失败的解决-统一构建环境与启动环境">项目maven构建成功但是启动失败的解决(统一构建环境与启动环境)</h3><img src="/intellij-idea/mavenProjectError.png" class="" title="image"><h3 id="TypeError-this-cliEngineCtor-is-not-a-constructor">TypeError: this.cliEngineCtor is not a constructor</h3><ul><li>点击detail, 打开安装路径下<code>eslint-plugin.js</code>文件</li><li>修改文件(需要管理员权限) <code>this.cliEngineCtor</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// this.cliEngineCtor = requireInContext(eslintPackagePath + "lib/api", state.packageJsonPath).CLIEngine;</span><span class="token keyword">this</span><span class="token punctuation">.</span>cliEngineCtor <span class="token operator">=</span> <span class="token function">requireInContext</span><span class="token punctuation">(</span>eslintPackagePath <span class="token operator">+</span> <span class="token string">"lib/cli-engine"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>packageJsonPath<span class="token punctuation">)</span><span class="token punctuation">.</span>CLIEngine<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重启项目</li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/markdown/"/>
      <url>/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="简单使用">简单使用</h2><h3 id="文字渲染">文字渲染</h3><p><em>斜体</em><br><strong>加粗</strong><br><em><strong>斜体加粗</strong></em><br><s>删除线</s></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">*斜体***加粗*****斜体加粗***~~删除线~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构段落">结构段落</h3><h1>一级标题</h1><h6 id="六级标题">六级标题</h6><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 一级标题###### 六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>引用</p></blockquote><p>分割线</p><hr><hr><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt; 引用分割线 --- ***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外链引用">外链引用</h3><h4 id="图片-desc">图片 <img src="https://avatars.githubusercontent.com/u/49236180" alt="desc" title="title"></h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">![desc](https://avatars.githubusercontent.com/u/49236180 "title")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="超链接">超链接</h4><p><a href="https://leetcode-cn.com/problemset/all/" title="力扣">leetcode</a></p><p><a herf="https://leetcode-cn.com/problemset/all/" target="_blank">力扣</a></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[leetcode](https://leetcode-cn.com/problemset/all/ "力扣")&lt;a herf="https://leetcode-cn.com/problemset/all/" target="_blank"&gt;力扣&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="代码">代码</h4><p><code>代码</code></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">`代码`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码块">代码块</h4><pre class="line-numbers language-type" data-language="type"><code class="language-type">代码块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><code class="language-text">```type代码块(下行反斜线需要去掉)\```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="列表表格">列表表格</h3><h4 id="无序列表">无序列表</h4><ul><li>1</li></ul><ul><li>2</li></ul><ul><li>3</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">- 1+ 2* 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="有序列表">有序列表</h4><ol><li>a</li><li>b</li><li>c</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. a2. b3. c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="列表嵌套">列表嵌套</h4><ol><li>标题<ul><li>tab</li></ul></li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">1. 标题    * tab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="表格">表格</h4><table><thead><tr><th>正常</th><th style="text-align:center">居中</th><th style="text-align:right">居右</th></tr></thead><tbody><tr><td>表格文字测试</td><td style="text-align:center">表格文字测试</td><td style="text-align:right">表格文字测试</td></tr><tr><td>表格文字</td><td style="text-align:center">表格文字</td><td style="text-align:right">表格文字</td></tr><tr><td>表格</td><td style="text-align:center">表格</td><td style="text-align:right">表格</td></tr></tbody></table><pre class="line-numbers language-text" data-language="text"><code class="language-text">|正常|居中|居右||---|:---:|---:||表格文字测试|表格文字测试|表格文字测试| |表格文字|表格文字|表格文字||表格|表格|表格|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进阶使用">进阶使用</h2><h3 id="流程图">流程图</h3><ul><li>Typora支持部分流程图; idea增加了md流程扩展插件</li></ul><h4 id="横向流程图">横向流程图</h4><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[方形]</span> <span class="token arrow operator">--&gt;</span>B<span class="token text string">(圆角)</span>B <span class="token arrow operator">--&gt;</span> C<span class="token text string">{条件a}</span>C <span class="token arrow operator">--&gt;</span><span class="token label property">|a=1|</span> D<span class="token text string">[结果1]</span>C <span class="token arrow operator">--&gt;</span><span class="token label property">|a=2|</span> E<span class="token text string">[结果2]</span>F<span class="token text string">[横向流程图]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="竖向流程图">竖向流程图</h4><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TDA<span class="token text string">[方形]</span> <span class="token arrow operator">--&gt;</span>B<span class="token text string">(圆角)</span>B <span class="token arrow operator">--&gt;</span> C<span class="token text string">{条件a}</span>C <span class="token arrow operator">--&gt;</span><span class="token label property">|a=1|</span> D<span class="token text string">[结果1]</span>C <span class="token arrow operator">--&gt;</span><span class="token label property">|a=2|</span> E<span class="token text string">[结果2]</span>F<span class="token text string">[竖向流程图]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="普通流程图">普通流程图</h4><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 开始框op<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 处理框cond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> <span class="token function">判断框</span><span class="token punctuation">(</span>是或否<span class="token operator">?</span><span class="token punctuation">)</span>sub1<span class="token operator">=&gt;</span>subroutine<span class="token operator">:</span> 子流程io<span class="token operator">=&gt;</span>inputoutput<span class="token operator">:</span> 输入输出框e<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 结束框st<span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token operator">-</span><span class="token operator">&gt;</span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>io<span class="token operator">-</span><span class="token operator">&gt;</span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">sub1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UML时序图源码样例：">UML时序图源码样例：</h4><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">对象A-&gt;对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B--&gt;对象A: 我很好(响应)对象A-&gt;对象B: 你真的好吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA10<span class="token text string">[A10]</span> <span class="token arrow operator">---</span> A11<span class="token text string">[A11]</span>A20<span class="token text string">[A20]</span> <span class="token arrow operator">===</span> A21<span class="token text string">[A21]</span>A30<span class="token text string">[A30]</span> <span class="token arrow operator">-.-</span> A31<span class="token text string">[A31]</span>B10<span class="token text string">[B10]</span> <span class="token arrow operator">--&gt;</span> B11<span class="token text string">[B11]</span>B20<span class="token text string">[B20]</span> <span class="token arrow operator">==&gt;</span> B21<span class="token text string">[B21]</span>B30<span class="token text string">[B30]</span> <span class="token arrow operator">-.-&gt;</span> B31<span class="token text string">[B31]</span>C10<span class="token text string">[C10]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">yes</span><span class="token arrow operator">--&gt;</span></span> C11<span class="token text string">[C11]</span>C20<span class="token text string">[C20]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">==</span><span class="token label property">yes</span><span class="token arrow operator">==&gt;</span></span> C21<span class="token text string">[C21]</span>C30<span class="token text string">[C30]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">-.</span><span class="token label property">yes</span><span class="token arrow operator">.-&gt;</span></span> C31<span class="token text string">[C31]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TDa1<span class="token text string">[带文本矩形]</span>a2<span class="token text string">(带文本圆角矩形)</span>a3<span class="token text string">&gt;带文本不对称矩形]</span>b1<span class="token text string">{带文本菱形}</span>c1<span class="token text string">((带文本圆形))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公式渲染mathjax">公式渲染<code>mathjax</code></h3><p>参考链接:</p><ul><li><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</a></p></li><li><p><a href="http://events.jianshu.io/p/8363e3815b92">http://events.jianshu.io/p/8363e3815b92</a></p></li></ul><p>\begin{eqnarray*}<br>\nabla\cdot\vec{E}&amp;=&amp;\frac{\rho}{\epsilon_0}\\<br>\nabla\cdot\vec{B}&amp;=&amp;0\\<br>\nabla\times\vec{E}&amp;=&amp;-\frac{\partial B}{\partial t}\\<br>\nabla\times\vec{B}&amp;=&amp;\mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t}\right)\\<br>\end{eqnarray*}</p><h4 id="插入公式">插入公式</h4><ul><li>行中公式(放在文中与其它文字混编)可以用如下方法表示：<code>$ 数学公式 $</code></li><li>独立公式可以用如下方法表示：<code>$$ 数学公式 $$</code></li></ul><h4 id="输入上下标">输入上下标</h4><ul><li><code>^</code>表示上标， <code>_</code> 表示下标。</li><li>如果上下标的内容多于一个字符，需要用 <code>{}</code>将这些内容括成一个整体。</li><li>上下标可以嵌套，也可以同时使用。</li></ul><p>$$ x^{y^z}=(1+{\rm e}^x)^{-2xy^w} $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ x^{y^z}=(1+{\rm e}^x)^{-2xy^w} $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>另外，如果要在左右两边都有上下标，可以用<code>\sideset</code> 命令</li></ul><h4 id="括号和分隔符">括号和分隔符</h4><p><code>()</code>、<code>[]</code>和<code>|</code>表示符号本身，使用 <code>\{\}</code> 来表示 <code>{}</code>。</p><p>一些特殊的括号：</p><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">显示</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\langle表达式\rangle$</code></td><td style="text-align:center">$\langle表达式\rangle$</td></tr><tr><td style="text-align:center"><code>$\lceil表达式\rceil$</code></td><td style="text-align:center">$\lceil表达式\rceil$</td></tr><tr><td style="text-align:center"><code>$\lfloor表达式\rfloor$</code></td><td style="text-align:center">$\lfloor表达式\rfloor$</td></tr><tr><td style="text-align:center"><code>$\lbrace表达式\rbrace$</code></td><td style="text-align:center">$\lbrace表达式\rbrace$</td></tr></tbody></table><h4 id="分数">分数</h4><ul><li>通常使用 <code>\frac {分子} {分母}</code>命令产生一个分数，可嵌套。</li></ul><p>$$\frac {分子} {分母}$$</p><ul><li>便捷情况可直接输入 <code>\frac ab</code>来快速生成一个</li></ul><p>$$\frac ab$$</p><h4 id="开方">开方</h4><ul><li>使用 <code>\sqrt [根指数，省略时为2] {被开方数}</code>命令输入开方。</li></ul><p>$$\sqrt[3]{2}$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\sqrt[3]{2}$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="省略号">省略号</h4><p>数学公式中常见的省略号有两种，<code>\ldots</code> 表示与文本底线对齐的省略号，<code>\cdots</code> 表示与文本中线对齐的省略号。</p><p>$$ f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm cdots} + x_n^2 $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}\_{\rm cdots} + x_n^2 $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="矢量">矢量</h4><p>使用 <code>\vec{矢量}</code>来自动产生一个矢量。也可以使用 <code>\overrightarrow</code>等命令改变字母上方的符号。</p><p>$$\vec{a} \cdot \vec{b}=0$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\vec{a} \cdot \vec{b}=0$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$$\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上划线、下划线-平均数">上划线、下划线 (平均数)</h4><p>$$ \overline X \quad  and  \quad \underline X \quad and \quad \hat a $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ \overline X \quad  and  \quad \underline X \quad and \quad \hat a $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="积分">积分</h4><p>使用 <code>\int_积分下限^积分上限 {被积表达式}</code>来输入一个积分。</p><p>$$\int_0^1 {x^2} ,{\rm d}x$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\int_0^1 {x^2} \,{\rm d}x$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="极限">极限</h4><p>使用<code>\lim_{变量 \to 表达式} 表达式</code> 来输入一个极限。如有需求，可以更改 <code>\to</code> 符号至任意符号。</p><p>$$ \lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)} $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ \lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)} $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="累加、累乘">累加、累乘</h4><p>使用 <code>\sum_{下标表达式}^{上标表达式} {累加表达式}</code>来输入一个累加。<br>与之类似，使用 <code>\prod \bigcup \bigcap</code>来分别输入累乘、并集和交集。<br>此类符号在行内显示时上下标表达式将会移至右上角和右下角。</p><p>$$\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R$$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在符号-底-顶部-写符号-换行">在符号 底&amp;顶部 写符号&amp;换行</h4><h5 id="符号底部">符号底部</h5><p><code>\underset{A}{B}</code></p><p>$$ \underset{0\leq j \leq k-1}{\arg\min} $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ \underset{0\leq j \leq k-1}{\arg\min} $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="符号顶部">符号顶部</h5><p><code>\overset{A}{B}</code></p><p>$$ A \overset ?= B $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ A \overset ?= B $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="符号底部换行">符号底部换行</h5><p><code>_{\substack A \\\\ B}</code></p><p>$$ \sum_{\substack{0&lt;i&lt;n \\ 0&lt;j&lt;n}} A_{ij} $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ \sum_{\substack{0&lt;i&lt;n \\\\ 0&lt;j&lt;n}} A_{ij} $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="希腊字母">希腊字母</h4><p>输入 <code>\小写希腊字母英文全称</code>和<code>\首字母大写希腊字母英文全称</code>来分别输入小写和大写希腊字母。<br>对于大写希腊字母与现有字母相同的，直接输入大写字母即可。</p><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">显示</th><th style="text-align:center">输入</th><th style="text-align:center">显示</th></tr></thead><tbody><tr><td style="text-align:center"><code>$\alpha$  </code></td><td style="text-align:center">$\alpha$</td><td style="text-align:center"><code>$A$       </code></td><td style="text-align:center">$A$</td></tr><tr><td style="text-align:center"><code>$\beta$   </code></td><td style="text-align:center">$\beta$</td><td style="text-align:center"><code>$B$       </code></td><td style="text-align:center">$B$</td></tr><tr><td style="text-align:center"><code>$\gamma$  </code></td><td style="text-align:center">$\gamma$</td><td style="text-align:center"><code>$\Gamma$  </code></td><td style="text-align:center">$\Gamma$</td></tr><tr><td style="text-align:center"><code>$\delta$  </code></td><td style="text-align:center">$\delta$</td><td style="text-align:center"><code>$\Delta$  </code></td><td style="text-align:center">$\Delta$</td></tr><tr><td style="text-align:center"><code>$\epsilon$</code></td><td style="text-align:center">$\epsilon$</td><td style="text-align:center"><code>$E$       </code></td><td style="text-align:center">$E$</td></tr><tr><td style="text-align:center"><code>$\zeta$   </code></td><td style="text-align:center">$\zeta$</td><td style="text-align:center"><code>$Z$       </code></td><td style="text-align:center">$Z$</td></tr><tr><td style="text-align:center"><code>$\eta$    </code></td><td style="text-align:center">$\eta$</td><td style="text-align:center"><code>$H$       </code></td><td style="text-align:center">$H$</td></tr><tr><td style="text-align:center"><code>$\theta$  </code></td><td style="text-align:center">$\theta$</td><td style="text-align:center"><code>$\Theta$  </code></td><td style="text-align:center">$\Theta$</td></tr><tr><td style="text-align:center"><code>$\iota$   </code></td><td style="text-align:center">$\iota$</td><td style="text-align:center"><code>$I$       </code></td><td style="text-align:center">$I$</td></tr><tr><td style="text-align:center"><code>$\kappa$  </code></td><td style="text-align:center">$\kappa$</td><td style="text-align:center"><code>$K$       </code></td><td style="text-align:center">$K$</td></tr><tr><td style="text-align:center"><code>$\lambda$ </code></td><td style="text-align:center">$\lambda$</td><td style="text-align:center"><code>$\Lambda$ </code></td><td style="text-align:center">$\Lambda$</td></tr><tr><td style="text-align:center"><code>$\nu$     </code></td><td style="text-align:center">$\nu$</td><td style="text-align:center"><code>$N$       </code></td><td style="text-align:center">$N$</td></tr><tr><td style="text-align:center"><code>$\mu$     </code></td><td style="text-align:center">$\mu$</td><td style="text-align:center"><code>$M$       </code></td><td style="text-align:center">$M$</td></tr><tr><td style="text-align:center"><code>$\xi$     </code></td><td style="text-align:center">$\xi$</td><td style="text-align:center"><code>$\Xi$     </code></td><td style="text-align:center">$\Xi$</td></tr><tr><td style="text-align:center"><code>$o$       </code></td><td style="text-align:center">$o$</td><td style="text-align:center"><code>$O$       </code></td><td style="text-align:center">$O$</td></tr><tr><td style="text-align:center"><code>$\pi$     </code></td><td style="text-align:center">$\pi$</td><td style="text-align:center"><code>$\Pi$     </code></td><td style="text-align:center">$\Pi$</td></tr><tr><td style="text-align:center"><code>$\rho$    </code></td><td style="text-align:center">$\rho$</td><td style="text-align:center"><code>$P$       </code></td><td style="text-align:center">$P$</td></tr><tr><td style="text-align:center"><code>$\sigma$  </code></td><td style="text-align:center">$\sigma$</td><td style="text-align:center"><code>$\Sigma$  </code></td><td style="text-align:center">$\Sigma$</td></tr><tr><td style="text-align:center"><code>$\tau$    </code></td><td style="text-align:center">$\tau$</td><td style="text-align:center"><code>$T$       </code></td><td style="text-align:center">$T$</td></tr><tr><td style="text-align:center"><code>$\upsilon$</code></td><td style="text-align:center">$\upsilon$</td><td style="text-align:center"><code>$\Upsilon$</code></td><td style="text-align:center">$\Upsilon$</td></tr><tr><td style="text-align:center"><code>$\phi$    </code></td><td style="text-align:center">$\phi$</td><td style="text-align:center"><code>$\Phi$    </code></td><td style="text-align:center">$\Phi$</td></tr><tr><td style="text-align:center"><code>$\chi$    </code></td><td style="text-align:center">$\chi$</td><td style="text-align:center"><code>$X$       </code></td><td style="text-align:center">$X$</td></tr><tr><td style="text-align:center"><code>$\psi$    </code></td><td style="text-align:center">$\psi$</td><td style="text-align:center"><code>$\Psi$    </code></td><td style="text-align:center">$\Psi$</td></tr><tr><td style="text-align:center"><code>$\omega$  </code></td><td style="text-align:center">$\omega$</td><td style="text-align:center"><code>$\Omega$  </code></td><td style="text-align:center">$\Omega$</td></tr></tbody></table><h4 id="大括号和行标">大括号和行标</h4><ul><li>指定括号大小：</li></ul><p>$$ \Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr) $$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$ \Biggl(\biggl(\Bigl(\bigl((x)\bigr)\Bigr)\biggr)\Biggr) $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>自动匹配括号大小：</li></ul><p>使用 <code>\left</code>和 <code>\right</code>来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} 。<br>在每个公式末尾前使用<code>\tag{行标}</code>来实现行标。</p><ul><li>!下述表达式不能正常执行</li></ul><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$f\left(   \left[      \frac{       1+\left\{x,y\right\}     }{       \left(          \frac{x}{y}+\frac{y}{x}       \right)       \left(u+1\right)     }+a   \right]^{3/2}\right)\tag{行标}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方程组">方程组</h4><ul><li>在需要建立方程组的时候，可以用 <code>\begin{array}…\end{array}</code> 和 <code>\left\{…\right.</code>，如：</li></ul><p>$$<br>\left\{<br>\begin{array}{ll}<br>a_1x+b_1y+c_1z=d_1 \\<br>a_2x+b_2y+c_2z=d_2 \\<br>a_3x+b_3y+c_3z=d_3<br>\end{array}<br>\right.<br>$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\left\\{ \begin{array}{ll}a_1x+b_1y+c_1z=d_1 \\\\a_2x+b_2y+c_2z=d_2 \\\\a_3x+b_3y+c_3z=d_3\end{array}\right.$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>另外，也可以使用 <code>\begin{cases}…\end{cases}</code>，如：</li></ul><p>$$<br>\begin{cases}<br>a_1x+b_1y+c_1z=d_1 \\<br>a_2x+b_2y+c_2z=d_2 \\<br>a_3x+b_3y+c_3z=d_3<br>\end{cases}<br>$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\begin{cases}a_1x+b_1y+c_1z=d_1 \\\\a_2x+b_2y+c_2z=d_2 \\\\a_3x+b_3y+c_3z=d_3\end{cases}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果想把等号对齐，就用 <code>\begin{aligned}...\end{aligned}</code> 和 <code>\left\{…\right.</code>，如：</li></ul><p>$$<br>\left\{<br>\begin{aligned}<br>a_1x+b_1y+c_1z &amp;= d_1+e_1 \\<br>a_2x+b_2y &amp;= d_2 \\<br>a_3x+b_3y+c_3z &amp;= d_3<br>\end{aligned}<br>\right.<br>$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\left\\{\begin{aligned}a_1x+b_1y+c_1z &amp;= d_1+e_1 \\\\a_2x+b_2y &amp;= d_2 \\\\a_3x+b_3y+c_3z &amp;= d_3\end{aligned}\right.$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果想要等号对齐，并左右两边左对齐，就可以用 <code>array</code> 中的 <code>l</code> 参数：</li></ul><p>$$<br>\left\{<br>\begin{array}{ll}<br>a_1x+b_1y+c_1z &amp;=d_1+e_1 \\<br>a_2x+b_2y &amp;=d_2 \\<br>a_3x+b_3y+c_3z &amp;=d_3<br>\end{array}<br>\right.<br>$$</p><pre class="line-numbers language-mathjax" data-language="mathjax"><code class="language-mathjax">$$\left\\{\begin{array}{ll}a_1x+b_1y+c_1z &amp;=d_1+e_1 \\\\a_2x+b_2y &amp;=d_2 \\\\a_3x+b_3y+c_3z &amp;=d_3\end{array}\right.$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字体转换">字体转换</h4><p>若要对公式的某一部分字符进行字体转换，可以用 <code>{\字体 {需转换的部分字符}}</code> 命令，其中 <code>\字体</code> 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体.</p><table><thead><tr><th>输入</th><th>说明</th></tr></thead><tbody><tr><td><code>\rm</code></td><td>$\rm{罗马体}$</td></tr><tr><td><code>\cal</code></td><td>$\cal{花体}$</td></tr><tr><td><code>\it</code></td><td>$\it{意大利体}$</td></tr><tr><td><code>\Bbb</code></td><td>$\Bbb{黑板粗体}$</td></tr><tr><td><code>\bf</code></td><td>$\bf{粗体}$</td></tr><tr><td><code>\mit</code></td><td>$\mit{数学斜体}$</td></tr><tr><td><code>\sf</code></td><td>$\sf{等线体}$</td></tr><tr><td><code>\scr</code></td><td>$\scr{手写体}$</td></tr><tr><td><code>\tt</code></td><td>$\tt{打字机体}$</td></tr><tr><td><code>\frak</code></td><td>$\frak{旧德式字体}$</td></tr><tr><td><code>\boldsymbol</code></td><td>$\boldsymbol{黑体}$</td></tr></tbody></table><h4 id="设定表格">设定表格</h4><p>$$<br>\begin{array}{ccc|c}<br>a11 &amp; a12 &amp; a13  &amp; b1 \\<br>a21 &amp; a22  &amp; a23 &amp; b2  \\<br>a31 &amp; a32  &amp; a33 &amp; b3  \\<br>\end{array}<br>$$</p><pre class="line-numbers language-none"><code class="language-none">$$mathjax\begin{array}{ccc|c}a11 &amp; a12 &amp; a13  &amp; b1 \\\\a21 &amp; a22  &amp; a23 &amp; b2  \\\\a31 &amp; a32  &amp; a33 &amp; b3  \\\\\end{array}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊符号">特殊符号</h4><table><thead><tr><th style="text-align:center">名称</th><th>输入</th><th>显示</th></tr></thead><tbody><tr><td style="text-align:center">无穷</td><td><code>$\infty$</code></td><td>$\infty$</td></tr><tr><td style="text-align:center">加减乘除</td><td><code>$\times \div \pm \mp$</code></td><td>$\times \div \pm \mp$</td></tr><tr><td style="text-align:center">点乘</td><td><code>$\cdot$</code></td><td>$\cdot$</td></tr><tr><td style="text-align:center">空格</td><td><code>$\quad$</code></td><td>$\quad$</td></tr><tr><td style="text-align:center">各种等号</td><td><code>$\lt \gt \le \leq \leqq \leqslant \ge \geq \geqq \geqslant \neq$</code></td><td>$\lt \gt \le \leq \leqq \leqslant \ge \geq \geqq \geqslant \neq$</td></tr><tr><td style="text-align:center">求导</td><td><code>$\text{d}x$</code></td><td>$\text{d}x$</td></tr><tr><td style="text-align:center">累乘</td><td><code>$\prod$</code></td><td>$\prod$</td></tr><tr><td style="text-align:center">积分</td><td><code>$\int$</code></td><td>$\int$</td></tr><tr><td style="text-align:center">积积分</td><td><code>$\iint$</code></td><td>$\iint$</td></tr><tr><td style="text-align:center">积积积分</td><td><code>$\iiint$</code></td><td>$\iiint$</td></tr><tr><td style="text-align:center">并集交集什么的</td><td><code>$\cup \cap \setminus \subset \subseteq \subsetneq \supset \in \notin \emptyset \varnothing$</code></td><td>$\cup \cap \setminus \subset \subseteq \subsetneq \supset \in \notin \emptyset \varnothing$</td></tr><tr><td style="text-align:center">箭头</td><td><code>\$to \rightarrow \leftarrow \Rightarrow \Leftarrow \mapsto \hookrightarrow$</code></td><td>$\to \rightarrow \leftarrow \Rightarrow \Leftarrow \mapsto \hookrightarrow$</td></tr><tr><td style="text-align:center">-</td><td><code>$\binom{n+1}{2k}$</code></td><td>$\binom{n+1}{2k}$</td></tr><tr><td style="text-align:center">-</td><td><code>$\land \lor \lnot \forall \exists \top \bot \vdash \vDash$</code></td><td>$\land \lor \lnot \forall \exists \top \bot \vdash \vDash$</td></tr><tr><td style="text-align:center">-</td><td><code>$\star \ast \oplus \circ \bullet$</code></td><td>$\star \ast \oplus \circ \bullet$</td></tr><tr><td style="text-align:center">-</td><td><code>$\approx \sim \simeq \cong \equiv \prec \lhd \therefore$</code></td><td>$\approx \sim \simeq \cong \equiv \prec \lhd \therefore$</td></tr><tr><td style="text-align:center">-</td><td><code>$\square \triangleq \triangle \nabla \partial$</code></td><td>$\square \triangleq \triangle \nabla \partial$</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 04-Programming-Languages </category>
          
          <category> Assistant-File-Types </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/hexo/"/>
      <url>/hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo | Github 自定义博客生成工具</p><span id="more"></span><h2 id="hexo安装"><a href="https://hexo.io/zh-cn/">hexo安装</a></h2><ul><li><a href="/node/#%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85%E7%BB%84%E4%BB%B6">npm安装全局组件</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token function">yarn</span> <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><a href="https://hexo.io/docs/writing.html">初始化项目</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init B612-Factory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><a href="https://hexo.io/docs/server.html">项目启动</a> <code>http://localhost:4000</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><a href="https://hexo.io/docs/generating.html">生成静态文件</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><a href="#git%E5%8F%91%E5%B8%83">部署到远程站点</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="hexo-使用">hexo 使用</h2><h3 id="创建文章">创建文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。</li></ul><h3 id="Front-matter-选项详解">Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>config.default_layout</td><td>布局</td></tr><tr><td>title</td><td>文章的文件名</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td><td>建立日期</td></tr><tr><td>updated</td><td>文件更新日期</td><td>更新日期</td></tr><tr><td>tags</td><td>-</td><td>标签（不适用于分页）；没有顺序和层次</td></tr><tr><td>categories</td><td>-</td><td>分类（不适用于分页）；具有顺序性和层次性</td></tr></tbody></table><h4 id="示例">示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo Front<span class="token punctuation">-</span>matter<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-10-13 15:00:00</span><span class="token key atrule">categories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span> 分类1<span class="token punctuation">,</span> 分类1<span class="token punctuation">-</span><span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span> 分类1<span class="token punctuation">,</span> 分类1<span class="token punctuation">-</span><span class="token number">2</span> <span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token punctuation">[</span> 分类2 <span class="token punctuation">]</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 标签1  <span class="token punctuation">-</span> 标签2<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="摘要补充">摘要补充</h4><ul><li>Front-matter summary|excerpt</li><li>文章需要截断的地方增加 <code>&lt;!--more--&gt;</code>，首页就会显示这条指令以上的所有内容，隐藏接下来的所有内容</li></ul><h3 id="Hexo-将文件内容作为代码片段插入到博客中">Hexo 将文件内容作为代码片段插入到博客中</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* global hexo */</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fileCode</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> data<span class="token punctuation">.</span>content    <span class="token keyword">const</span> regExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[@fileCode]\((.*)\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>    <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> regExp<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        matches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> readFiles <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> file <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> splits <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> fileType <span class="token operator">=</span> splits<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> splits<span class="token punctuation">[</span>splits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">'source/'</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>source<span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.md'</span><span class="token punctuation">,</span> <span class="token string">'/'</span> <span class="token operator">+</span> file<span class="token punctuation">)</span>        <span class="token keyword">let</span> fileContent <span class="token operator">=</span> path        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'读取文件错误'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    fileContent <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token string">'```'</span> <span class="token operator">+</span> fileType <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> fileContent <span class="token operator">+</span> <span class="token string">'\n```\n'</span><span class="token punctuation">;</span>                    content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>readFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>content <span class="token operator">=</span> content    <span class="token keyword">return</span> data<span class="token punctuation">}</span><span class="token comment">// https://hexo.io/zh-cn/api/filter</span><span class="token comment">// https://www.jianshu.com/p/c8964c5ffd7a</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'before_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">config</span><span class="token operator">:</span> themeCfg<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>theme<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>themeCfg<span class="token punctuation">.</span>fileCode<span class="token punctuation">.</span>enable <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>fileCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fileCode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多配置"><a href="https://hexo.io/zh-cn/docs/configuration">更多配置</a></h2><h3 id="主题切换-theme"><a href="https://hexo.io/zh-cn/docs/themes">主题切换</a> <code>theme</code></h3><ul><li>在样式文件夹中下载合适的主题</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ./B612-Factory/themes$ <span class="token function">git</span> clone https://github.com/WANGJUEYA/hexo-theme-christmas-tree.git christmas-tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改hexo根目录 <code>_config.yml</code> 中 <code>theme</code> 对应配置 <code>配置必填项见主题说明</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> christmas<span class="token punctuation">-</span>tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>可在hexo <a href="https://hexo.io/themes/">主题仓库</a> 挑选心仪的主题样式替换</p><ul><li><a href="https://wangjueya.github.io/">christmas-tree</a> ☞ <code>https://github.com/WANGJUEYA/hexo-theme-christmas-tree.git</code></li><li><a href="http://blinkfox.com//">matery</a> ☞ <code>https://github.com/blinkfox/hexo-theme-matery.git</code></li><li><a href="https://hexo.fluid-dev.com/">fluid</a> ☞ <code>https://github.com/fluid-dev/hexo-theme-fluid.git</code></li><li><a href="https://wujun234.com/">tree</a> ☞ <code>https://github.com/wujun234/hexo-theme-tree.git</code></li><li><a href="https://cerallin.github.io/">Theme Yuzu</a> ☞ <code>https://github.com/Cerallin/hexo-theme-yuzu.git</code></li></ul></li></ul><h3 id="图片存储-post-asset-folder">图片存储 <code>post_asset_folder</code></h3><ul><li><p>使用绝对路径</p><ul><li>md相关URL资源引用</li></ul></li><li><p>使用相对路径</p><ul><li>修改hexo根目录 <code>_config.yml</code> 中 <code>theme</code> 对应配置 <code>配置必填项见主题说明</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 修改之后会开启 Hexo 的文章资源文件管理功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>开启资源管理后, Hexo 将会在我们每一次通过 <code>hexo new &lt;title&gt;</code> 命令创建新文章时自动创建一个同名文件夹,  <code>![name](./example.jpg)</code> 即可访问(该方法仅支持生成文档路径为一级,<br>相对路径需要手动书写)</li></ul></li><li><p>使用 markdown 和 hexo 均支持的相对路径</p></li></ul><p>安装插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> hexo-asset-img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>![image file label]（markdown-file-name/local-image.png） -&gt; {% asset_img label local-image.png %}</code></p><img src="/hexo/example.jpg" class="" title="图片引用 图片引用"><h3 id="自动将目录生成分类">自动将目录生成分类</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> hexo-auto-category<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># hexo-auto-category</span><span class="token key atrule">auto_category</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  depth<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git发布">git发布</h2><ul><li><p>生成并配置ssh</p><ul><li>配置全局配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"GitHub用户名"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"GitHub绑定邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>输入命令, 一直回车生成文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-m</span> PEM <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"{注册邮箱地址}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>打开 <code>C:\Users\用户名\.ssh\id_rsa.pub</code>, 复制内容</li><li>在gitee及github设置中新增ssh</li></ul></li><li><p>安装部署所需要的插件</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改hexo根目录 <code>_config.yml</code> 对应发布配置</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span>    <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>用户名/用户名.github.io.git    <span class="token key atrule">gitee</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>用户名/用户名.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>点击发布即可 (gitee需要在<code>Gitee Pages 服务</code>手动更新)</li></ul><h2 id="自定义插件">自定义插件</h2><ul><li><a href="https://blog.csdn.net/godread_cn/article/details/122031503">hexo 教程之为 hexo 编写一个插件</a></li></ul><h2 id="其他插件介绍">其他插件介绍</h2><h3 id="流程图">流程图</h3><ul><li>Hexo插件使用教程: <a href="https://blog.17lai.site/posts/cf0f47fd/#Mermaid">https://blog.17lai.site/posts/cf0f47fd/#Mermaid</a></li><li>mermaid语法教程: <a href="https://mermaid-js.github.io/mermaid/#/">https://mermaid-js.github.io/mermaid/#/</a></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">{% mermaid %}[内容]{% endmermaid %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="mermaid">  graph TDA[Christmas] --&gt;|Get money| B(Go shopping)B --&gt; C{Let me think}C --&gt;|One| D[Laptop]C --&gt;|Two| E[iPhone]C --&gt;|Three| F[Car]</div><pre class="line-numbers language-text" data-language="text"><code class="language-text">{% mermaid %}graph TDA[Christmas] --&gt;|Get money| B(Go shopping)B --&gt; C{Let me think}C --&gt;|One| D[Laptop]C --&gt;|Two| E[iPhone]C --&gt;|Three| F[Car]{% endmermaid %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="脑图-hexo-markmap">脑图 <code>hexo-markmap</code></h3><ul><li><a href="https://github.com/MaxChang3/hexo-markmap">https://github.com/MaxChang3/hexo-markmap</a></li></ul><div class="markmap-container" style="height:400px">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;links&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;<strong>inline</strong> <del>text</del> <em>styles</em>&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[2,4]},&quot;v&quot;:&quot;multiline<br>\ntext&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;<code>inline code</code>&quot;}],&quot;p&quot;:{}}"></svg></div><h3 id="公式">公式</h3><blockquote><p><a href="https://wangjueya.github.io/markdown/#%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93mathjax">https://wangjueya.github.io/markdown/#公式渲染mathjax</a></p></blockquote><h2 id="快捷启动可用项目">快捷启动可用项目</h2><blockquote><p>需要环境 <code>git</code> <code>npm</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@github.com:WANGJUEYA/B612-Factory.git <span class="token parameter variable">--recursive</span>$ <span class="token builtin class-name">cd</span> B612-Factory$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> run server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果本地ssh密钥不为空会有 <code>Permission denied</code>报错, 使用 git-bash 客户端</li><li>用自己的markdown文件替换 <code>./source/_posts</code> 下所有文件</li></ul><h2 id="参考链接">参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/269420507">利用Gitee+Hexo搭建个人网站</a></li><li><a href="https://zhuanlan.zhihu.com/p/85037427">Hexo系列 | Hexo的基本使用</a></li><li><a href="https://blog.csdn.net/qq_44573890/article/details/107693424?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-5-107693424-blog-108146314.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7ERate-5-107693424-blog-108146314.pc_relevant_aa&amp;utm_relevant_index=6">Hexo+GitHub+Gitee搭建静态博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 07-Programming-Assistant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> git </tag>
            
            <tag> gitee </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
